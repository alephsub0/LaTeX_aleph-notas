%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Dtx_aleph_notas (3).pdf
%%Creator: Adobe Acrobat 20.12.0
%%For: MateAndres
%%CreationDate: 14/08/2020, 19:29:13
%%BoundingBox: 0 0 595 842
%%HiResBoundingBox: 0 0 595 842
%%CropBox: 0 0 595 842
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1102 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="dvips + GPL Ghostscript 9.26"
   pdf:Keywords=""
   xmp:ModifyDate="2020-08-15T00:28:15Z"
   xmp:CreateDate="2020-08-15T00:28:15Z"
   xmp:CreatorTool="LaTeX with hyperref"
   xmpMM:DocumentID="uuid:c22179f0-16aa-11f6-0000-6885c2b7dec3"
   xmpMM:InstanceID="uuid:c22179f0-16aa-11f6-0000-6885c2b7dec3"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 842 li
595 842 li
595 0 li
cp
clp
.405 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
62.3609 47.7859 mo
532.44 47.7859 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.810547 .619141 0 .219971 cmyk
@
gsave
65.1602 88.03 mo
140.56 88.03 li
140.56 60.4717 li
65.1602 60.4717 li
cp
clp
/1 
[/DeviceCMYK] /CSA add_res
.902098 .747311 .142947 .0211185 cmyk
%ADOBeginSubsetFont: PAAAAA+PalatinoLinotype-Roman Initial
ct_T42Dict begin
-0.168 -0.289 1.418 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /PAAAAA+PalatinoLinotype-Roman
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
742002de08d300000124000004ee6670676d1f62e26c0000061400000628
676c79660000000000001ec400002e5868656164f47077be00000c3c0000
0036686865611287079c00000c7400000024686d74783fbb03b400000c98
000000406c6f63610000000000000cd8000000226d61787009e113090000
0cfc000000206e616d650000000000000d1c00000028707265709cd77718
00000d440000117d67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005c900000000057d
002400620563001d0000039d001f000003b40018000003aa002000790000
ffdcffad0000ffe000000000ffdd0000fdc8000600000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000005ca057d03a502380375000000000000
000008000000080000000000000000000000000000000000000000000000
000000000000000000000000002800a700be00a700000000004300520043
000000000000000000000000000000b40044000aff4cffbcfff600fa0030
000aff06ffd0fff6025402b200000000000000000000000004b60392003e
ffc200d300ab00be005b00c0006600be00b000a7002b00a0005000ac00b5
00ae009e00a50000002d00b20055006b0053004a0043007a006100800046
00a0007f006800440081005a00c700c700a800a8004000000040003901f6
00950000000000000000000000ef00ef00e500b60213005400beff420000
000000000000000000000074007001a800e000a1009a0069009001660015
001000780088007f0069025d026c00320063005d00000000006e00000000
000002c100df00a803b0004c01cf03710095000000000007008a005200b4
00e100e1006e00ae008f003c00470054005f0097003d007b006d00b100b1
0052003300b20086008e01ef00ac009d00a00046008b0060009e004b0086
003800f2ff0e005a0045017c00540162002b005f0075004901db00b200de
01dc00cb01110083007101f201c901b500b60025008500c101f100520084
003f00bf00a60058008f0056007700d4008e009900a000ac005f004f021d
02580245023c00830074002b00550062002a0004021c023004610473007a
0030003f00300048003400960096007200da00d20079006c006601020069
00230077ff890022ffde019000720062006d005a002e001affe60018ffe8
ff7b0078003900340068008300740042005a004600450062021300560092
006c006f007e022a0570009203dd00b1008afe1500a8007d005f004c003d
005200fe00b000900088007e0074009c02a202a400320091024c00320292
002702a40002004c0053006a00330044003b00260050005601bf000002b9
004e00c60090005a00740021007e0204005202680068006b009d00850055
0043006d02d500e800730089003a00530066005905cd0072012101960153
00fa004100dc007e0057002d009a0069009a0049016301c2010800e1007f
0100013001c00079004d0055021e022a0064004b01b3009d0033008400e5
00b5005400b4003f003700b501fe00eaff16009b003fff0400bbff45008c
0038002e00a2016e004201b5037200c8005b00a501ad003b00b602ce0187
0140006e01b800b60049002101a800c300a60097011b005000b902920093
02fb003400af00660051003f00a300650090008c00950056007600b3007b
00b8009e008600a5009c006c00a9007b0084005e0090006601af01030043
00c800df00e70282004d003c019700470044013d003b004a008700410042
00b300a300af0090006600a0006c004f0085004100b300ce064406130681
ff8b019f018805f1ffa90054ff1003a003c20062ff9e0095048b04920607
05c904bfffec00480049003c009e0069004b006e0046007f046c0497ff70
05930866005000a90067ff990056ffaa01b9002b00b800af00c800cb005f
04f505d20438ffc3010803efff880602042b06030593ff1f00004030544a
494847463b3a3936333231302f2e2d2c2b2a2927262521201f1e1d1c1b1a
19181615141312110f0e0d0c0b0803022c01b01843584eb0032510f221b0
00124d1b2045b00425b00425234a6164b0285258212310d21bb0032510f2
21b0001259592d2cb01a435821211bb00225b0022549b00325b003254a61
2064b01050582121211bb00325b0032549b0005058b0005058b8ffe23821
1bb0103821591bb0005258b01e38211bb8fff03821595959592d2c01b018
435845646a23456469b01943646060b0462344231020b046f02fb000121b
2121208a208a525811331b212159592d2c00b0462370b101463e01b04623
70b10246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0
022523442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523
442121212d2cb000b0122b2121212d2cb000b0132b2121212d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb1
000325456854b01c4b505a58b0032545b0032545606820b004252344b004
2523441bb00325204568208a2344b00325456860b003252344592d2cb003
25204568208a2344b003254564686560b00425b0016023442d2cb0094358
8721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b047
23448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959
182d2c208a4523456860442d2c456a422d2c01b0184358b00425b0042549
64234564696120b080626ab00225b00225618cb0194360b0462344218a10
b046f6211b21212121592d2c01b0184358b0022545b002254564606ab003
25456a6120b00425456a208a8b65b0042523448cb00325234421211b2045
6a4420456a44592d2c012045b00055b018435a584568234569b0408b6120
b080626a208a236120b003258b65b0042523448cb00325234421211b2121
b0192b592d2c018a8a45642345646164422d2cb00425b00425b0192bb018
4358b00425b00425b00325b01b2b01b0022543b04054b0022543b000545a
58b003252045b040614459b0022543b00054b0022543b040545a58b00425
2045b04060445959212121212d2c014b525843b00225452361441b212159
2d2c014b525843b00225452360441b2121592d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4b505845441b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325465258b002
2546206861b00325b003253f2321381b2111592d2c2045b00325465058b0
022546206861b00325b003253f2321381b2111592d2c8a10ec2d2cb00c43
58211b2046b0005258b8fff0381bb0103859592d2c20b0005558b8100063
b003254564b00325456461b0005358b0021bb04061b00359254569535845
441b2121591b21b0022545b00225456164b028515845441b212159592d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2c4b5358b00425b004254964
234564696120b080626ab00225b00225618cb0462344218a10b046f6211b
218a11231220392f592d2c2121212121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b53234b515a58381b2121592d2c4b53234b515a58
20458a60441b2121592d2c4b53234b515a58b0024358381b2121591b2121
592d2c4b53234b515a58b002435820458a60441b2121591b2121592d2c4b
53234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d
2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb00225b002
254964b0c05458b8ffeb38b015381b2121592d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d00010000000507aeb1b0afba5f0f3cf5081b
080000000000ad324dc800000000d60bd739fea4fdab0b5b086600000009
00020000000000000001000005dbfdba02aa0b2dfea4fea40b5b00010000
00000000000000000000000000100449003f07910026040000520364004a
02000000047b004f04d3001003d500330254002b0710002604cf00290254
002c04000052029c002e038d005002aa00ab000000520254028404da04da
06c408380a280b100d820fd0107813fc151e16f2172c0000000100000010
00b4001000a6000900020010002f00550000094f117d0003000100000001
001200020002000000060016000050616c6174696e6f4c696e6f74797065
2d526f6d616e401254dfe016171cd4d516171c7b7c161b7b7c19b80261b2
6f1d1fb80260b26c1d1fb80248b26f221fb80247b26c221fb80105b26e21
1fb8010440556b211fd1d216171c767716171c6d7016171c6c6f16171c1f
6c010f6f016b6e161b4f6e01af6ebf6e022f6ea06ecf6e033f6b6f6b7f6b
03ef6bff6b021f6b2f6b3f6b5f6b6f6b053f6b8f6bbf6bdf6b046b6e7f72
1ab801e2b268221fb801e1b265221fb8ffc0b3e64e4e39b8ffc0400ee54e
4e3997e6a7e60297e5a7e502b80244b268221fb80243b266201fb8024240
7369221fe6852b1fe5852b1ffb85211ff466271f747514151c676a14151c
2f693f69022066306602666914151c6568141baf68df68022f683f68028f
689f68bf68033f68ef68ff6803406537373900654f655f659f65a06505af
65010f65017065a06502656885711a1973167a43192179431921b80275b3
03361f2f41270274006f02740002002f0274003f02740002002f0273004f
02730002004f02730001001f0273003f0273005f02730003002f0272006f
02720002002f0272003f027200ef027200ff02720004021eb3af361f6f41
330270008f027000af027000cf02700004000f027000010040026e005002
6e0060026e0070026e00040000026e0010026e0020026e0030026e000400
0f026d004f026d00c0026d00030090026d00b0026d00ef026d0003001f02
6d003f026d005f026d0003026cb303211f0f410f026b008f026b0002001f
026b003f026b006f026b00ef026b000400400250b2292a39b8025cb20426
1fb9ffc0022cb2262939b9ffc0022cb2171b39b9ffc0022cb2091239410a
0171015e002b001f013101300057001fffc00138b2494a39b9ffc00135b2
484939b9ffc00130b2484839b9ffc00130b2434339b9ffc00130b23c3c39
b901480147b2571fef4118013b0001005f014700cf014700f00147000300
4001300001001001300080013000b0013000c0013000f001300005fff0b3
a75c5c39b8ffdeb3a75a5b39b8ffc0b3a77e8539b8ffc0b3a7363a39b8ff
e8b3a6303239b8ffd4b3a6535339b8ffc0b3a6707539b8ffc0b4a6505239
00410a01c5000100a001ed00b001ed00c001ed000301d4b27d361fb801d3
b2911c1fb801d1b27f2e1fb901b001adb21e1f40b801abb2575b39b9ffc0
01abb343433940b801abb2404239b9ffc001abb33a3a396f411801ab007f
01ab00cf01ab00df01ab0004005f01ab0001004f01ab00d001ab00e001ab
00f001ab000400a001aa0001ffc0b3b0747539b8ffc0402daf74753970b0
80b090b00370af80af90af035fb06fb07fb08fb004e0b0f0b002e0aff0af
02b0af181faf85181fb8019fb2be411fb8019db2be411fb8019ab2bd211f
b80199b7bd461fbdbe461f40ba017c0050017c40100250bf0130be40be02
80bfd0bfe0bf03bc019501940041001f0194b3cf271f9f410e018e00af01
8e00bf018e0003006f018e007f018e008f018e0003ffc04023b53a3a3940
b580b5dfb60320b53fb60270b6bfb6e0b6ffb60420b630b660b6a0b50440
410a018b0070018b00a0018b00d0018b00040040018bb23b3b39b9ffc001
8bb2424239b8018f400bd0371fd0cf371fcdcc371fb8ffc0b3cc3f3f39b8
ffc0b3cc101139b8ffc04014cc13183910cc40cc0230cc40cccfccffcc04
127041100137008001370090013700030020013700300137004001370050
013700600137b5059f9aaf9a02b80172b310131f0f41230254001f025400
0200ef025400ff0254000200af025400bf025400cf025400df0254000402
5401b30046001f016e015e004d001f0162015e003c001f016f013a003400
1f0170b207341fb9016b015eb21a1f40b8015eb23b3b394146015d015000
1a001f01420135002c001f01360140002b001f013e0133003d001f015601
33001d001f01540133002c001f014501330014001f014401330014001f01
4901330036001f014b0133001e001f014d01340046001f013b013a005700
1f013a012f0057001f013201300057001f013101300057001f0145013400
3f001f01440134003f001f01330134b3591f1270bc022d0080022d009002
2db403f0980190410b01c400a001c400b001c400c001c400d001c4000501
c4b37f1c1f004113023a0010023a0020023a0090023a0004000002390010
023900200239009002390004023a0239400d1e1fb091c091d0910397951f
1fb80110b6a3211f9e91201fb8011d402c91121ffd952f1f4f3c01203cdf
3c02b03cd03c023c0f121f9493001f9293211f9193001f9395001f96951e
1fb9ffc001ffb23d3f39b9ffc001ffb2535439b801ffb285361fb80269b2
7d361fb80268b28b331fb80267b28b331fb80266b38b331f40b801e9b264
6439b9ffc001e9b25c5c39b9ffc001e9b2585839b9ffc001e9b34f4f3940
b801e9b24d4d39b9ffc001e9b2444439b9ffc001e9b342423940b801e9b3
3f3f3900411501e900a001e900d001e90003004f01e9006001e900ef01e9
00f001e90004000001e9007f01e9009001e9400a03008801e088f08802e0
412501a200f001a2000200af01a200bf01a200cf01a200df01a200040000
01a2004001a2007001a2008001a2009001a20005006001a200a001a20002
00af01a100bf01a100cf01a10003025fb3833e1f00411201ee0001006001
ee000100d001ee0001003001ee009001ee00a001ee00b001ee00040232b2
85181fb9ffc001ccb343433940b801ccb342423940b801ccb33a3a39df41
2c01cc0001003f01cc007f01cc0002007f01cc00ff01cc000200c0018700
01009f018700af01870002006f0186007f0186008f01860003009f018600
af0186000200bf018600cf01860002009f018600af0186000201de01e340
0b361f10c501b0c50190c401b8ffc04009c4404139c4851d1f30ba025600
400256400d0230e740e750e760e770e7055f410a0182006f0182007f0182
0003009f018200af0182b5025fa46fa402b801a5b285211fb9ffc00240b2
1c2339b9ffc0023fb31c2339bfbd023f0001000001b200010222b27d301f
b80221b27d301fb80220b37d301fa0bd01fb00b001fb0002004001f6b375
763940b801f6b2505439b8021bb285261fb8020fb285261fb80217b28526
1fb80204b2834c1fb80215b285261fbc021202110026001f020cb285261f
b8020ab285261fb80208b285261fb80211b283331fb801f6b27f421fb902
40023fb2241f60411f023f0070023f0080023f0003002f023f003f023f00
02000f023f001f023f0002001001b900b001b900c001b900d001b9000400
3001b9004001b9000201b9b2851c1fb801f0b283481fb801ebb283481fb8
01dab67f331fa985191fb8ffc0400f5c3f3f39d05c01d87f321f8c89181f
b80123b2892c1fb8012ab2891b1fb8012bb2891b1fb80122b689321f8a89
321fb80128b38b121f00412b011200300112007f0112000300af011200f0
0112000200d0011700010000011700100117002001170030011700400117
000500c0011700f00117000200600117007001170080011700a001170004
00a0011700010113b2a3211fb9ffc0010fb343433900410a010f0050010f
008f010f00d0010f000400400118b2646439b9ffc00118b25c5c39b9ffc0
0118b353533900412101180030011800b0011800c0011800d00118000500
90011800a0011800020000011800100118004f0118005001180060011800
05006f011800c0011800020040010fb3646439504111010f00f0010f0002
0020010f005f010f006f010f00b0010f00f0010f0005ffc00100b2757539
b80100b2a3361fb9ffc00196b2757539b9ffc00196b2434339b9ffc00196
b35a5a3940b80196b34d4f3940b80196b34a4b3940b80196b34040397f41
1d01960001003f019600df019600f001960003000f0196004f0196005001
9600600196000400000196006f0196000200d001e300e001e30002ffc0b3
a2757539b8ffc0b3a3757539b8ffc0b3a2535339b8ffc0b3a3535339b8ff
c0b3a2434339b8ffc04063a3434339dfa30160a260a370a270a380a280a3
06a0a3b0a3c0a3d0a30400a2a0a2b0a2c0a2d0a20530f340f30220a130a1
40a10320a030a040a00310a1b0a1c0a10370a180a190a1a0a10410a0b0a0
c0a00370a080a090a0a0a004fa852d1fe483361fb801e6b2852d1fb80230
b2851a1fb80249400b851a1fe9851a1ff67f361fb8012c408a89221f8d85
361f8b85361f8985361f6c817c818d819a81ab81bb8106817f371f7d7f37
1f407f505039407d3f3f39407f4345396f7f7f7f02cf7fdf7fef7f039b87
ab87026b877b878b87b987047f85301f8785361f8483371f83853e1f4085
6868394085585b3940854f4f394085424339af85bf85cf85df85ef85050f
851f85025f85ff85029f850110b80246b235210fbc024500350021ffc002
46b2414139b9ffc00246b33f3f3940b8024540264c4c39114319211b3715
1836151535151234150f33150c3215093115063015032f15002e1520ba02
5900010259b211181fb8024bb211141fb8024ab3110f1f904122024e00b0
024e00020020024e0040024e0050024e0070024e0004000f024c002f024c
000200ef024c00ff024c0002002f024c003f024c006f024c00af024c0004
ffc0024ab2181839b9ffc0024ab2161639b9ffc0024bb2181839b9ffc002
4b4009161639401119193900bd023e0010023e0002ffc0023eb3272b3940
b8023bb30f113940b8023db31e1e3940b8023db2101139b80241b205281f
b8023db205121fb8023cb205181fb8023bb305181f40b8023cb318183940
b8023c408c2e2e394005161f3926270f28270f2a2b0f2c2b0f22230e2423
0f1e1f0e201f0f0f10110c0c0d0e0c090a0b0c0607080c0001020c060327
1f2000016f00010003131fd01301df04010304050cd003013f039f03cf03
ff0304900f010f0f013f0f5f0fef0f030f191f192f193f194f195f1906ef
19ff19021b011d0d18071a0d0704321f1510170d1204140d16b8015cb232
1f10b8015bb2321f13b8015ab2321f04b801594014321f1b3b321f0f3a32
1f0339321f0038321f5033b1020042b21711018820b022518a2378b04052
78b10a2088b810005578b1020142b0031c212101b0124b004b5442b01301
4b004b5342b0332b4bb8032052b0322b4bb009505b58b101018e59b0332b
b00288b8010054b00488b8020054b012435a5b58b80119b101018e851bb1
0501b80100b04b60858d8d592b1db0644b5358b0801d59b0324b5358b090
1d59002b2b2b2b2b2b2b2b2b2b2b2b2b747573747573742b74742b73742b
2b2b2b2b2b2b2b2b2b2b2bb1282645b02a4561b02c4560442b2b2b2b2b2b
2b2b2b2b2b2b2b742b2b2b2b2b73737473732b2b2b742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b01737475752b2b2b2b2b2b2b2b747474752b2b2b2b2b
742b2b2b2b2b2b2b2b2b2b2b73747374747474737374752b2b2b2b2b2b73
737474752b2b2b2b2b2b2b2b73742b737474752b2b2b752b2b7374747575
73742b2b2b2b2b2b2b2b742b2b2b2b2b2b74757373752b2b2b2b2b2b2b2b
2b2b2b2b2b2b732b2b2b73742b2b2b75737474742b2b7573742b73737475
73747374752b2b2b2b737374752b747374747374757374752b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b7374752b2b2b2b2b742b73732b75
74754358b900400134b35f603940b80134b2494f39b9ffc00134b31b1d39
40b80134b33b3d392fb901340001752b2b2b2b592b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373742b7373744358b90040014cb3
70713940b8014cb346483940b8014cb34b4b3940b8014cb353533940b801
4cb2393a39b9ffc0014cb33c3c390f411d014c001f014c0030014c000300
30014c0001000f014c001f014c002f014c003f014c00040030014c004001
4c00af014c00ef014c00ff014c0005737474752b2b2b2b2b2b5973742b2b
2b2b2b2b2b2b74737374752b74742b2b737475732b2b2b2b2b2b2b747473
75752b2b737374752b2b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b74747374
2b2b2b2b2b2b2b2b2b2b2b2b2b73742b737374737373732b737473747573
742b012b2bb018b0384b53422b2b737474752b737475752b2b75752b2b2b
2b2b2b2b2b2b75752b2b2b2b2b737474757374752b73732b2b2b2b2b2b2b
2b2b2b2b2b2b2bb109322b4bb03152424bb03c524bb00f505bb01a23424b
b0c8524bb036505bb00c23422b00000000>
[11865 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 4 <> PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 164 1 <00010026ffe4076205820051030db90025fff0b314143a25b8fff0b31c1c
3a25b8ffc0b3191d3a25b8ffe0400e17183a4b10191d3a4b20151d3a4bb8
ffc0406325273a254025273af94b01d64b011425d4250224254425842503
0925192502094a194ad94a0309cc25015c1e01651e014a0813133a490813
133a480813133a210814143a4a10181d3a4910181d3a480c181d3a4a2215
173a492215173a482215173a4cb8fff0b312143a4db8fff0b312143a4cb8
ffe8b3151d3a4db8ffe8b3151d3a4eb8ffe8b31d1d3a22b8fff0b3171d3a
23b8fff0b3171d3a24b8ffe840d8181d3a464e564e664e036b4d01544d01
664c01fb4b01b94a01c84a01274a01491014143a964901064816482648f6
4804394901394a01354c554c022622362202b622d622f62203fa21012824
013b2401252401c724013922011922f922021921018821013b2301ab2301
77238723020722017722872202882001fa2001881f01571f671f02371e57
1e02641e01bf53010f534f530200530160539053024b251e03483121af22
bf2202220e18a61115e1132b36a62e33e13141a64403a600004ee1504844
e14650034603131231124b4b093b161014153a16b8ffe8b712133a16a01e
0110b8fff0400c14153a101812133a10a1092db8fff0401214153a2d1812
133a2da02543341014153a34b8ffe8401912133a34a14822214e041e2580
3b1e2025273a1e202f303a1eb8fff0b318193a1eb8ffe840151a1d3a1e7f
401f09010f091f094f09030b03095309b80105400f02003b503b803bf03b
040c033b523bb9010400022b01182f5f5e5d2b01182f5f5e5d711a4ded2b
2b2b2b10ed111739f42b2b3c10e42b2b10f42b2b3c10e42b2b111239192f
00183f3f3f3f10f63c10f63c10ed10ed10f63cfd3c10f63cfd3c2f713c11
121739b02d4b5358401b4e4b4e504b82211e14214b4a211e254b484b8122
2514224b4c222587082e2b87047dc487082e182b087d10c4593130015d71
5d715d5d5d5d715d5d715d71725d7171725d717271715d715d7272715d2b
715d71715d5d715d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00715d5d
5e5d5d717271712b2b2b2b2b2b2b2b011715070e030711141e0217171507
262322072735373e0337110102072326270111141e021717150727262322
072735373e03371134022626272735371633323716170101123716333207
5909086e35160304061332750809a37952c509086e35160403fea7826127
3824fe2205143275080940634720cf08086e341703030513327508094575
6e52544d017b01568b30605d5405820831070310256cfbfe3364fc291303
07310809090830080310256ef902defd2efef1ef814d03e1fd4562ff2814
0208300903050808300902102668ff01ca5b01052914020830090505c29d
fcf602c901217f05>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 8432 12 <00040052ffc403cf03f8002a0032003300340661b90019ffe0401826263a
221014143a312c1a1c3a312c1e1f3a312c32323a1eb8ffe0b31e1e3a1eb8
ffe8401d1b1b3a08401d1d3a31101b1b3a312017193a03181a1c3a030813
143a02b8fff8b313133a01b8fff8400e13133a07181b1c3a071815183a1e
b8ffe8400918183a221818183a1ab8fff0b312183a19b8ffe8b316163a19
b8fff0b318183a32b8ffe8b318183a22b8ffd4b318183a2cb8fff0b31818
3a03b8fff040ff20203a0a0301128b0301c91b01062c011ec82b01682b01
a52d01091d01300f030153de3201da31015a3101d032019f19019f3201d0
3201d01901541964197419035a2c010c32ac32bc32cc32040db63101092f
01170b2d01466b2d010b2d4b2dbb2deb2d040c062c0153362c01192c492c
d92c03092c192c692cc92c040d3b2c4b2c8b2cbb2c040a2c1a2c2a2c5a2c
6a2c9a2cca2c0715792801062816282628031729243924020d244d245d24
8d24042e0a241a2402434a24ba24020a241a242a244a245a24da24ea2407
0f24182f32480922015319222922022922b922f922030922a922020f0522
1522d5220346252275228522033522010522a522c5224031e522f5220514
0b221b223b22031d2220161a480622d622025a5a21014a21010321011e06
2101679621a621020621011221b8fff840b11012362c1f4c1f02091e011e
d31e01031ec31e023f031ec31e02461e561e02361e461e021e200b10364b
1b5b1b02e91901071a010d198d1902041914192419b419040a091a012a07
183a3c3607182e32360a0701536a07010a074a079a07031d040701600407
010b040814089408a408041f0a080153ea08011008012903010320131948
3d034d03023a037a03022a034a036a03030a031a032a03031c0a19012e28
18151d3a2918151d3a2a18171d3a04b8ffd0b31a1d3a04b8ffd0409a1212
3a2a2012153a000401062a01062901538604b604020625011b062f014b09
2f01189622010922011d291a01091a012e061a013a891d01060726073607
4607d607e607060a590699060205060145068506f5060393040103048304
c304031900040143e004010f362f36020a00360153203650368036030036
20366036a03604096a2001ea20011520012e2005341c33321930032a0102
0300b8ffc0b315163a00b8ffc0403a1d1d3a6f0001df00010f001f00020c
00401a1d480040131648000510a7131317e1150b2b015c4c2b01de2b010d
2b01062ba62bb62bc62b04262bb8ffe8404c2b2b3a052b0153072b01072b
c72b02222befa8230101230124022301534a23017223e223026023012323
0509300117c6300102301230021e30101c1d3a300817173a30961c151509
1c012a1cb8fff8402c17173a1c160726012e002601586026012626012626
3626024d260128263826020c261c26021e261620203a26b8fff8b3191a3a
26b8fff040261c1d3a269c051034340a333320090a1718320f120140c012
d01202121814143a121815183a12b80102402f0a2a6f027f02af02030f02
1f02020b0002400202219002010002015c100201d002e002020002300240
025002042202b8ffc0b70e11480220192332b8ffe8b31d1d3a32b8fff040
381b1c3a3285000a0140600a01000a010f0f0a014f0f0a2f0a3f0a8f0abf
0a05ff0a010f0a010c0a132e01602e01e02e01192e01092e01322eb8ffec
40381e203a2e141c1d3a2e141a1b3a2e1019193a2e0615153a2e840f201f
202f20033c6f20af20bf20cf20041f203f20022020019020a0200220b8ff
c0b40d104820048d2f2b5d725d715e5ded2b2b2b2b2b5e5d725d7271d45e
5d71725e5d5e5d715e5dfd2b2b3c3c10c42b5e5d71725e5d715e5d5e5d71
3210e42b2b5d5e5d10c43210c512392f11392f003fed2b2b2b5e5d5d7171
72725e5d5e5d3f2b5e5d3f10ed2b2b5e5d5d5e5d12392f5d5d5d5e5d5e5d
5ded5e5d715e5d2b5e5d715d715e5d10f63c10ed10c42b2b5e5d71722b2b
173233113333ce10ce1239397171723130015e5d715e5d5e5d715e5d5e5d
715d71715e5d725e5d5e5d715e5d715e5d5e5d5e5d5d5e5d5d5d2b2b2b2b
2b2b005e5d5e5d71725d2b5d5d715e5d5e5d5e5d5e5d5e5d725e5d2b2b5e
5d5e5d72725d722b7172725e5d715e5d712b5e5d725e5d5e5d71725e5d2b
5e5d5e5d71725e5d5e5d71725e5d2b5e5d715e5d5e5d5d5e5d5d5e5d5d5e
5d71715e5d5e5d725e5d5e5d715e5d5d5d71717171715d71715e5d5e5d5d
5d725e5d5d5d5e5d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b1327273536333216161507111416161f0215072623220727370706
23222626353436253426232206060705040615143332370303d42708b2a8
7398440511161e390808493f3c540f04da374150733db8019a846f3a5f0e
2f01c9fee88a9b8582aa1502a60a0a7c84568156c9fed63d1a0903050928
0806060ea1aa173a684a93a53a9479221570a32f6c719c9a02fefbcc0000
>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 10812 14 <00010050ffe1036403c20024033840100e2015153a20101f1f3a1e2c1f1f
3a23b8ffe8b318183a1ab8ffe8b315153a1ab8fff0402c18183a081c1313
3a091c13133a0a1c13133a001c12143a0f2015163a0f0814143a0f101818
3a231818183a05b8ffe8b31c1d3a05b8ffe8b313133a05b8ffd440961718
3a290b010b0f01291701661e01162001190599050219049904028904018f
05018a20018901019901a901b90103a90901750a01a50a01a62301e61b01
f40501550901f31e01141e641e02641e741e02172201c616d61602161b01
f61b01d40e01c40e01020952096209c209d20905020932097209f20904a2
0901730801a30801550801f50801500501c605016b057b05fb050301b8ff
d8b30d114816b8ffe8400e18183a192c191d3a1a2c1a1d3a04b8fff0400f
17173a191818183af61d0199010124b8ffd0b312174823b8ffe8402e1219
48aa01ba0102aa1aea1afa1a03e30bf30b02561e01d61ee61ef61e03a61e
b61ee61ef61e04e51f01351f011fb8ffc6406c1d1d3a4e1f017909010905
013905010905c905d9050309cd04010a041a046a04033a044a045a040310
26010026f02602120f2601400f261f263f264f266f26df26062f26010f26
1f262f26bf26df26ff260601030070240124210f1813401b1b3613401d1f
36134011193613b8ffc0401519193ab013c013020f130113bd18cd1802f6
180118b8fff0b330344818b8fff040271c1f4818970d7621010921015f21
6f217f210321141b1b3a21101c1d3a219c03160d1086140114b8fff04034
262a4814ea801101110f01240f0f003f006f00039f00ef00024000700090
00c000d000e000060000200070008000a000050a001cb8ffe840331e1e3a
1c181c1d3a1c141a1b3a1c1018193a1c0615153a131c01931c01391c011c
e440cf06df0602030f06011f0606250666022b01182f5f5e5d5f5d1a4ded
715d722b2b2b2b2bd45e5d7171723c323210d671ed2b72003f3fed2b2b72
727110ed2b2b5d72c45d5d2b2b2b2b123910c65d3912393130015d71725e
5d5e5d715d71715e5d71725d712b5d715d71725d5d5d2b2b5d712b2b2b2b
2b002b5d5d7271725d715d71725d715d725d727172715d715d715d715d5d
71717171727272717171712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2507
0623220235343e0433321706070723272e022322060615141e0233323637
036428819fdcf0293f4cb55c519b63130a092909040e915252804134558c
563667436b43470106cf5e936038641f3b718b0809543a42459d6d5caf73
461c20000000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 4208 7 <00040033ffc4039103f8001f002c002d002e034c401510101b1b3a101817
173a1b1017173a1a1017173a02b8fff04014191d3a0c1018183a000c171d
3a352c018a2c0106b8ffd4400917183a0b1e1b1e0202b8fff840be121548
29003900490003451f013a2b01261e361e461e03251f351f451f03090129
0139014901040a1d1a1d021206060113070601150a1b011d861101041a14
1a022009060160090601250601240a01092c01062c0106020118f6100109
101910a910031f040b140b640b840b042a060b0160460b560bc60b038a01
018a1f01861b011c2801da28ea28028a28013a078a07026a077a07ca07da
07042606010a06012a06010a066a067a06ca06ea06fa060609741a01041a
141a241a030c1eb8ffe8400917173a0118171d3a1fb8ffd04053171d3a59
0101f91a01261a01861a01280601060c01050b01590501a92b01ce2b01a6
0db60d020811010a2901a60f01703001003020304030d030040e0f30015c
bf30013040090c482e042d0e2520141523181fb8ffc0404b0c1036901fb0
1fc01f031f1c4023012395001810184018501860189018a018d018e01809
0a18180e1c08191b3a1c101c1d3a031c015c1c182b2f48691c01cf1cdf1c
021c9c0416f92a012ab8fff8400b1d253aac2a01072a01242ab8fff04029
252a48052a152a252a032b2a95070e01530e102e2e082d2d120820192527
011fbf00cf00ef00030027b8ffe8b31c1d3a27b8ffecb31a1b3a27b8fff0
b318193a27b8fffa400e15153a27835f127f1202df120112b8ffc0b3191c
3612b8ffc040651012365012c012d01203001220125012e0120409121219
181c1d3a19141a1b3a191018193a190615153a19102e32480719011e2919
0108191819022419830808012a08403436363f087f08bf0803af08010f08
1f0802399f08ef08028f08010840090c48082f2b5d725e5d71722b5e5ded
5e5d5d5e5d2b2b2b2b2b332f5e5d712b2b7172ed2b2b2b2bc47132321133
103c1112392f11392f003f5e5ded5e5d2b5e5d5d2b723fed5d5d2b5e5d2b
2b12392f5e5ded7210c6712b11123939323210ce10ce3130012b5d5e5d5e
5d7171727271715d7171717271725d5d2b2b2b005e5d715e5d7172715d71
5d7172717171715e5d5e5d5e5d5d5e5d5d717171715e5d5e5d5d5e5d5e5d
015e5d5e5d5d5d5d5d5d005d2b5d2b715d2b2b2b2b2b2b2b250706062322
262635343e03333216161514070706062321161633323637011616333237
36353426232206010303742068a34078d787343988985878b74a030b44e6
25febf02cc94468148fd8f12f13a8b1e017e6d778501170c934843285ee0
9e69a952643c71b0631f1d0b0f0acfc4302b0188030805180d9b97aa0125
fbcc>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 5200 8 <0003002bffc402220578000b003100320137b50d08121d4831b8ffe84009
121d480228121d4804b8ffd84009121d480a28121d4808b8ffd8400e121d
480210121d480410121d480ab8fff0b3121d4808b8fff0401a121d480f34
012404340164fb3401e0340102321b00e660060106b80111b50c0d0c2da7
30b8010140120c1620a7191de11b150c10323210260c0d18b8ffe8401117
183a181814163a18a3102e1817183a2eb8ffe8400b14163a2ea31e181718
3a1eb8ffe8400914163a1ea32609e503b8ffe8b31d1d3a03b8fff0b31b1c
3a03b8ffc040243344360310181d1d3a10101b1c3a1085400f2601240026
013203262634688508332665022b2b01182f5f5e5d5e5d1a4dfd2b2bd42b
2b2bed10e42b2be62b2b10e42b2bd6cd1112392f003f3ff63cfd3c10f6ed
123910f65ded10ce3130015f5d725e5d5e5d2b2b2b2b002b2b2b2b2b2b01
32161514062322263534361317061515141e031717150726232207273537
3e043535342e022327273537361301202f42422f2e434383130b0809121a
5f09087d74737d0909611913070908051a27540908bf350578422f2e4241
2f2f42fe410d83cae216ef28120506082a090808092a0806061327db38c5
288a200f01082b0817fc3f000000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 8096 11 <0001002cfff8022305c9002500da40300525152525250313030108131d48
1725010725472502190f27012400270132020f270153010021a70f24010e
6f240124b801014014000a14a70d11e10f150000000104221817183a22b8
ffe8b614163a22a31a0cb8ffe8401117183a0c1814163a0ca30412181718
3a12b8ffe8402a14163a12a304181d1d3a04101b1c3a0485406f1a010f1a
0124001a801a022a031a1a27688508261a65022b2b01182f5f5e5d5e5d5d
1a4ded2b2be42b2b10e42b2b10e62b2b10d6cd003f3ff63cfd3c10f65d5e
5ded12393130015e5d5f5e5d5e5d005e5d712b5f5e5d0117061111141e03
17171507262322072735373e043511272e0323273537360176130b080912
1a5f09087d74737d090961191307090403070c1e6a0908bf05c90c73fea6
fd8d16ef28120506082a090808092a0806061327db380206d46f56100809
2a0916000000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 5664 9 <00010026fff806e203bb007103b440ff032021213a042021213a03201818
3a0571157125710312060b0106030153352b452b023a0b4a0b023a054a05
023a044a04023a034a0302374c474c02060c160c02044b144b02094c194c
02370a01690d010d101216485712671202a92b010c20121648042b142b24
2b036609016610016612010511151102050a150a020b201215480108121d
4806101216480a051a052a05030c041c042c04030a031a032a0303044c14
4c244c03120b0a0126190a01090a01320c1101536c1101ac1101167101e9
4c01e60c01e30b01110b01160d01130c01162c01140601e6050113035303
e3030314045404e40403d50b01c92b01c90c01c40301144d01c44d01042b
1440a72b242b030c0612161202200a2701437a278a27026a278a279a2703
7948894802694889489948030311131123110309090b0112050b750b850b
0319040a013aa40ab40a02040a140a020a3f738f73021f733f73af73cf73
df73ff73060f732f735f738f739f73050d0073013f50736073029073b073
d073f07304107330730200732073f07303090b083a034a1aa71d1d21e11f
15353fa7383ce13a155660a7595de15b156da770b8010140180100100c29
014b29101b1b362929010f2901180229012829b8ffe0401a17183a29980f
100c4a014b4a101b1b36194a01ff4a01f24a014ab8ffe0b717183a4a9808
101cb8ffe8400917183a1c1814163a1cb80100b5150037010937b8ffe840
1117183a371814163a37a32f3d1817183a3db8fff0b614163a3da24558b8
ffe8401117183a581814163a58a2506e1817183a6eb8ffe8400b14163a6e
a35e1817183a5eb8ffe8401314163a5ea36615181d1d3a15101b1c3a1585
24b8ffd0b31d1d3a24b8ffe0b31b1c3a24b80196400d2f181d1d3a2f101b
1c3a2f8545b8ffe8b31d1d3a45b8fff0b31b1c3a45b80196403a50035000
0150181d1d3a50101b1c3a50854000664066d066034b1066906602406650
66906603006610663066a066d066f06606190366726665022b01182f5f5e
5d71725e5d1a4dfd2b2bd4cd123910f62b2bfd2b2bf62b2bed2b2b10e42b
2be62b2b10e42b2b10e42b2b10e42b2b5e5d10e42b2bb0844b5358b12224
7d10c65900183fed2b715d722b5e5d3fed2b5e5d5e5d712b5e5d3f33f6ed
3ff63cfd3c3ff63cfd3c3ff63c10ed11331112393130015e5d7171725e5d
5e5d71725e5d715e5d5e5d5e5d005e5d5d715d715e5d5e5d5e5d5d715d5d
5d5d71717171717171717171717171725e5d5e5d725e5d5e5d5d5d5d2b2b
2b71717171715d2b5d5d2b715d015d5d5d005d5d5d5d5d5d5e5d5d5e5d2b
2b2b01170607373e02333216173e0233321e021515141716163317150726
2322072736353534262623220e021515141e031717150726232207273537
3e04353534262623220e021515141e0317171507262322072735373e0435
35342e0223272735373601701306025f281a6035649624872d62314f844e
0d0602266808087f2d19780d0d1e6e4c365e4b08080913195f09087d746b
85090961191307091f664d3c633f0f080913195f09087d74737d09096119
13070908051a27540908bf03b90d425c5725151c6357801c1d446e807069
11e85f24082b0808080b82d1789f7f512b5549627d2cf228110506082a09
0808092a0806061327db3872717a542f453c64942cf228110506082a0908
08092a0806061327db38c5288a200f01082b08170000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 6916 10 <00020029fdc0047c03c5003a004c03c3b90010ffe8400912123a04181212
3a3cb8ffe8b312123a18b8ffe8b312123a12b8fff0402013133a76100176
1101780101e918f918020c401c40021c3f0196110196100100b8ffd0401b
121d488c49010108141d4803281215480a1018183a081017173a11b8ffe8
b317173a44b8fff0b316163a48b8ffe84018171a3a032016163a40202d2d
3a40201a1b3a402015173a13b8fff0b315163a14b8fff0b315163a18b8ff
f0400e15173a042c1b1b3a041014173a18b8ffe040ff17193a7a4a01ec49
01b349016c447c449c44bc4404c64101044001243c343ce43c034a3c0139
3c01163a01763ad63a0218101e21486d18010d181d18023d184d185d1803
183013194804110104115411020c0a1001120510451002182b0f010b0f1b
0f6b0fdb0f04320a0f5a0f6a0f034baa0fba0f02060f01180b0e01446b0e
cb0edb0e03c90e01040e010c050d450d550d650d0415060a160a02200609
0142560901ca09da09023409015409640974090346080166087608020908
011908c908d9080304081408540864087408050a26073607460703c607d6
07f607031604018b04ab04bb0403491818183a8c49018c3c01e905010608
f60802a94001fa402d05019a44fa4402764501a64501004e01af4eff4e02
404e604e804e904ea04ed04ee04e07004e504e704e030b4eb8ffc0401b19
1d4818163b03463e0818193a0f3e012e083e013f3e08171d483eb8ffd840
131e2148e03ef03e023ed3161636a70f39010e39b8010140100100101f29
a72226e1241b0646012646b8fff0401517193a4630181b366c4601469806
10371817183a37b8ffe8b614163a37a32f21b8ffe8401117183a21181416
3a21a33b271817183a27b8ffe8401814163a27a32f0003013b0642013206
42013a764286420242b8ffe8b31c1d3a42b8ffecb31a1b3a42b8fff0b318
193a42b8fffa405515153a42841f0baf0bcf0b03100b200b300bc00be00b
05000b100b200b800b04090b0b183b181d1d3a3b101b1c3a3b85400f2f01
33002f902f0253102f01402f902f02002f202f402fa02ff02f0519032f4d
2f65022b01182f5f5e5d71725e5d5e5d1a4dfd2b2b3c332f5e5d7172ed2b
2b2b2b725e5d5e5d10c43c3210e42b2b10e42b2b10e62b2b003fed5d2b2b
5e5d3ff63cfd3c3f33f65e5ded3fed5d2b2b5e5d5e5d2b11393911393130
012b5e5d7171715d7171715d71725d5d2b005d7171725e5d717271725d72
71725e5d5e5d5e5d5e5d71725e5d5e5d5d5e5d5e5d715e5d5e5d5e5d712b
5d71722b5d715d5d715d71715d715d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b015d2b005d5d71715d5d5d5d2b2b2b2b2b01170607363633321e0215
140e020706070e0223222715141e0317171507262322072735373e043511
342e02232727353736131616333236363534262623220e03150172130a01
886b83528672422e4b2d463f3e2b22502d68670809121a5f09087d73737d
0909601a13070909061728540908bf8a2e88526195524999563564572602
03c50c72587c502d679b6648947e2929262c1f121235d516ef2812050608
2a090808092a080606132ae23902fe3489160e01082b0817fd352f4562bd
735da05c2548412b1a00>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 2484 5 <0002004ffdc0047603bb002f003f031b4019c93401ba2f01b100013c2021
2e3a3b20212e3a3b2014153a1db8fff0b314163a3cb8ffc0b318183a1db8
fff0b31b1f3a1db8ffc0400918183a011618183a34b8ffe8400916183a01
1612153a1eb8fff0400e13133a3c1812133a29181b1b3a1eb8fff0b31818
3a3bb8fff0400918183a3b2c191b3a24b8ffd4b31b1d3a1db8ffe8400e12
133a3b1618183a3c1817183a24b8ffe0403e17183af42401752e01763101
6a1d016a3c0106281628023627013924011a2a017a2401ac1d011d28181b
483c30181b4836380106372637022f1015153a00b8fff0b315153a23b8ff
d840091c1d3a021618183a00b8ffc0400912133a1e1813133a23b8ffd840
9d17183ad42401d424010523d523023a23da23020d2301ed23fd23022330
1c1f48c43801352b952b021939011041204130417041a041c04106ff4101
6f41df4102a92a01a629b6290223290103281328832803662e762e862e03
0524a52402e524010024010b246b24db24eb24fb240509242e442e022631
4631020627162702052f010a2f010d0525011c1d3c30033a2f01332d0f3a
01533a201d1d3a3ab8ffe840181c1d3a3a10171b3a333a733a023ad30f22
01221609330133b8ffe8400c1d253a063316332633031a33b8fff0401c22
25485033010033013e33e3162d012d1000100c16a70f13e1111b0eb8ffe8
401117183a0e1014163a0ea306141817183a14b8fff0401314163a14a31c
2f2f1c00b001010106303e3c1cb8ffe8b31d1d3a1cb8fff0404f1b1c3a1c
8520063006d0060300062006f00603090f0601537f06017f06010f069f06
ef0603130606360615153636181c1d3a36141a1b3a360818193a36061515
3a36e4400f250129032540256602048d2b01182f5f5e5d1a4ded2b2b2b2b
2bc42f5e5d71725e5d5e5d71fd2b2b3cd4c610c65d391239192f1810e42b
2b10e42b2b003ff63cfd3c3f3f72ed5e5d712b5e5d2b713f71ed5d2b2b2b
5e5d111239391117395e5d31305e5d715d5d5d5e5d715d715d71715d5d01
5d7171725d5d2b5d7171715d712b2b2b2b2b2b2b00715d2b2b715d727171
7171715d5d5d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b015d5d
5d01170e021511141e0317171507262322072735373e043511070e022322
0235343736373637363332170726262322061514161633323736353403e0
251d0f08080913195f09087d746b8508086119130709d618093622b7d52f
24501899606f7f884f228c4e85a6538f54866b0303b6164f58bf7dfd8816
ef28120506082a090808092a080606132ae2390129860f0406010db77a6e
523a11553446742246d0a86fcb5a84fa24a60000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 1288 3 <0001004affdd032203c2003c03fbb5262018183a18b8fff0b313133a18b8
fff0b318183a22b8ffe8401d18183a2c1613133a2c1018183a2d1018183a
2f1818183a2d0c15153a18b8fff040091d1d3a261017173a0db8fff440ff
17173a2c0c17183a2d0817173a2d1420203a2e181d1d3a2c181d1d3ab932
c932d93203d20901060901072e01d42f01142f010430143002150615012a
062a0153092a0116a91001090b01290a0c011a22010a220153842f942f02
c40d01b41401861201863601193301192b292b025a320132181c1f48490c
590c021909014909590902272e01672e01052f152fb52fc52f04242eb42e
c42ee42e04152d01a62701562d862d962d03452c552c852c952ce52c0546
2b562bb62bc62b04452a552a02360e01062a162a762a030f042634264426
031409260164062f010e0d1101022f01114b225b220218181120368933e9
3302ef09010214321402130414014340497614961402391101450d550d65
0d03860801e90501d5050185149514a51403b514c51402c92e01dc260119
33293302043214322432030b141b142b1403f03e01003e703e903e03093e
b8ffc0401c1e21480f3e013c6f3e01af3ecf3e020f3e2f3e7f3eaf3ecf3e
050a31b8ffe8b31d1d3a31b8ffe8401c1b1b3ad031010a31132804240740
005000a000037000800090000300b8ffc04011191d489a000100401c1d3a
0f00010c0007b8ffe0401f30303a9a07010307014b630701e30701071022
293607402a2d3607fd34161eb8ffd4b31d1d3a1eb8ffd4403721213a1e20
17183a6f1e011f1e5f1e8f1e9f1eaf1e05af1e01951e01001e101e201e03
0c1e242030303a062401645c24014c24cc240224b8fff0b322293624b8ff
c040402a2d3624fd1610061f0126031f0153d31f011fea901c011cb01a01
0a1a01150f1a01534f1a010f1a1f1a02111a316a02012f020102ea3c3838
130a1823253a0ab8ffe8b720203a060a01200ab8024940210f3101321031
01003101534031a031c031f0310400315031020b31282c40403a28b8fff4
b318183a28b8ffe0b330303a28b8ffe0402e23253a281820223a0f28df28
ef28ff2804230a28015c79280128e91f130100130180139013f013039013
a0130213b8ffc0b30d1036132f2b5d71725ded715e5d5e5d2b2b2b2b2bdd
5e5d715e5d715e5ded5e5d2b2b11332fd6ed715d10d45e5d725e5d5e5d71
d671ed715e5d5e5d003fed2b2b5d725e5d2b7dc45e5d5d5d71722b2b2b18
3fed2b2b71725e5d712b7dc45e5d2b5d2b5d71111217395d2b2b3130015e
5d71725e5d2b5e5d715d5d715d005d5d715d5d717171725e5d5e5d5d5d2b
5d5e5d5d5e5d5e5d5e5d5e5d5d5d5d5d5d5d715d5d5d715d715d2b5d7171
7171715d5d5e5d715d5e5d725e5d5e5d5e5d5e5d5d715d5d71712b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b1333171617161633323635342626272e03
353436333216171706070723272e03232206061514161617171e02151406
232226272737363637652b0902081f984a6a7f2e5d7867524c28d59f439e
29090802092809040e3a6a3b3d53331f40236d8c7942e4b33fbb42050a05
0201012609543c2f3b724f2b3f291c181b405d3886a125110e28aa09093d
313927244934263c25081c223265488ac61c110d431f3f650000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 10232 13 <0001002effe9028c04f3002c01b940290910121d481e18152c4806231623
024a89230199230178238823024f235f236f23039720013920011fb8ffe0
b3141d4820b8fff4b312133a1fb8ffe0b312133a1eb8ffe0b312133a1fb8
ffe0401f1b1b3ae019f0190250196019701903562366230206201620021f
18132c481db8ffd0406c152c48891d991d02302e01002e010b0f2e01602f
2e5f2e020f2e2f2e3f2e9f2e040f2e9f2e020d1f1e1d20220a1d01531d40
151c481d1b0f1411100d0416040b022c1216292c16970b3c09d006010620
0801d008011f08011f083f0802081b0c1a1d3a1b0818183a521b011bb8ff
c040632a2d481b9622162428171604160600101b1b3a0040141948002812
0f1110101b1b3aa51001c510d51002101d5f1e01801e01101e201e02801e
011e2808090b0b16181d1d3a16101b1c3a1685002801b028c028f0280310
2850280270289028a02803282f5d717172fd2b2b3c7d10d618cd10d45d71
727132d65d712bc5333210c62b2b3c123910c610c4003fed2b722b2b2f5d
725d71c671393ffdd4c6103c10cd10c5121739c610c62b5e5d1239113333
3130015e5d71725e5d5e5d715d2b2b72720071722b2b2b2b2b715d5d5d5d
715e5d2b2b13353736371027363717060316333237170707262322070314
16163332371706070623223534373635112322072e075e3a066742180a0e
323a7633071308333e3858060d3b3a433918185b3436e10401292d3a0311
1a0a231e01052b2429143ffed101060754090101fe698d57312324115318
da50381112019f040000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 3464 6 <00030010ffc4049a03f80044004500460217b90036ffd8401326293a042f
142f242f03043014302430031930b8ffe0b31216482fb8ffe04073121648
0c18121648050b01750b181218480a0a1a0a2a0a031f0a181218480a2f01
756606760602b619f61902b644f64402873601bb36cb36db3603c60a01b6
0a01ce3701e93701362826294836280a10480f48010e0048013200480153
90480100481048c048d04804463445002f000815a718b80101b51b1a1040
a743b80101400c01001025a728e12ce12a1508b8fff040241b1b36160801
f00801fd0801082617183a0898193401341646461e454539271814163a27
b8ffe8401017183a27a31e0f160109161817183a16b8fff0400c14163a16
a30e411817183a41b8fff0400f14163a41a3391a1b1e0d2f2c032d0eb8ff
e8b31d1d3a0eb8fff040621b1c3a0e8540ff1e010f1e010e031e481e6802
0f482f4802104801b048c048e048038048b0480210484048604870489048
0500485048f048030b000104181d1d3a04101b1c3a04854038903901e039
01003910393039a039c039d039f03907190339b8ffc0b72d324839473965
022b01182f2b5f5e5d7171c51a4dfd2b2bd6cd5e5d71727172712b01182f
5f5e5d711a4dfd2b2b7dc417391810d6cd10e62b2b10e62b2b5e5d10e42b
2b12392f11392f003f72ed2b715d722b3fe6f6ed3f33f6ed3f33f6ed1112
3910ce10ce31300171725e5d5e5d5e5d2b2b005d715d5d5d715d5d715e5d
2b5e5d2b5e5d2b2b2b5e5d5d2b011706151514161633323e02373735342e
02232727353736371706151514171e023333171507262322072736370607
060623222626353735342e022327273537362513015a130b276042497851
0c020308051a27540908bf83130b0502111e4a1c09088d303d500906033f
511f744a707d340108051a27540908bf01720a03b90d83cae98064353968
2453706c288a200f01082b0817340d83cab00fe655250f08280908070866
4731521f2a477d994fc3288a200f01082b081773fbcc0000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 11748 15 <000100ab044101fe05d700070047b90000ffe8401613133aa60001a80701
01030405070006400650060206b801b5400e02030201050607060f006f00
0200b901b600042fed5d1739002fed5d17393130015d005d2b0101072727
13371701fefeda0d1d03999c0d05bbfe8a040f0d015d1d030000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 1192 2 <ffff0052ffc403cf05d70236000c00000117000f010e000000464035044f
370137110437403f3f3637402629363740151d3637400f12363740090c36
8f37a03702af37011f377f378f37030037371e1e25012b71715d2b2b2b2b
2b35003f7135>PAAAAA+PalatinoLinotype-Roman AddT42Char 
1 0 0 <0001003f0043040b0437003a000001273635342322061514163332363534
262322061514163332363534262737161215140023220035343633321615
1406232226353436333216151401e31a3f4b373f624b5e799c6f7aaddea4
ade1b7a327b7defee0d2d1fef7e39d92d3b37e72876c58414d01db2b162d
4d54424367805d759eb47ea7dcffbaa6d9254928fef9b7d9fecb0104ca9f
e8bf9883b28c6f557c4e3a600000>PAAAAA+PalatinoLinotype-Roman AddT42Char 
PAAAAA+PalatinoLinotype-Roman /CharStrings get begin
/g4 4 def
/g1 1 def
/g12 12 def
/g14 14 def
/g7 7 def
/g8 8 def
/g11 11 def
/g9 9 def
/g10 10 def
/g5 5 def
/g3 3 def
/g13 13 def
/g6 6 def
/g2 2 def
end
PAAAAA+PalatinoLinotype-Roman /Encoding get
dup 32 /g4 put
dup 77 /g1 put
dup 97 /g12 put
dup 99 /g14 put
dup 101 /g7 put
dup 105 /g8 put
dup 108 /g11 put
dup 109 /g9 put
dup 112 /g10 put
dup 113 /g5 put
dup 115 /g3 put
dup 116 /g13 put
dup 117 /g6 put
dup 225 /g2 put
pop
end
%ADOEndSubsetFont
/FLKTBT+PalatinoLinotype-Roman /PAAAAA+PalatinoLinotype-Roman findfont ct_VMDictPut
/FLKTBT+PalatinoLinotype-Roman*1 
[32{/.notdef}rp /g4 44{/.notdef}rp /g1 19{/.notdef}rp /g12 /.notdef /g14 
/.notdef /g7 3{/.notdef}rp /g8 2{/.notdef}rp /g11 /g9 2{/.notdef}rp 
/g10 /g5 /.notdef /g3 /g13 /g6 107{/.notdef}rp /g2 
30{/.notdef}rp]
FLKTBT+PalatinoLinotype-Roman nf
FLKTBT+PalatinoLinotype-Roman*1 [6.11554 0 0 -6.11554 0 0 ]msf
65.0684 86.202 mo
(M\341s que simple matem\341tica)
[5.78529 3.05777 2.59296 1.52888 3.42469 3.68765 2.92937 1.52888 2.59296 1.77962 5.39999 3.67542 
1.77963 2.92937 1.52888 5.39999 3.05777 1.99368 2.92937 5.4 3.05777 1.99368 1.77963 2.7153 
0 ]xsh
78.95 69.589 mo
78.95 67.691 77.8801 65.917 75.8023 65.917 cv
73.243 65.917 70.6828 68.708 70.6828 71.488 cv
70.6828 73.187 71.7426 74.73 73.7359 74.73 cv
74.9426 74.73 76.3902 74.258 77.7855 73.094 cv
78.0582 74.184 78.6668 74.73 79.5063 74.73 cv
80.5656 74.73 81.0902 73.639 81.0902 73.377 cv
81.0902 73.198 80.9543 73.198 80.891 73.198 cv
80.7336 73.198 80.7129 73.261 80.6605 73.419 cv
80.482 73.912 80.0309 74.341 79.5691 74.341 cv
78.9609 74.341 78.9609 73.094 78.9609 71.897 cv
80.9543 69.515 81.4266 67.05 81.4266 67.029 cv
81.4266 66.851 81.2691 66.851 81.2164 66.851 cv
81.0379 66.851 81.0172 66.914 80.9434 67.26 cv
80.6918 68.12 80.1777 69.642 78.9711 71.246 cv
78.9711 69.589 li
cp
77.7227 72.621 mo
76.002 74.164 74.4598 74.341 73.7777 74.341 cv
72.3926 74.341 71.9941 73.114 71.9941 72.191 cv
71.9941 71.352 72.4246 69.358 73.0332 68.278 cv
73.8305 66.914 74.932 66.305 75.8023 66.305 cv
77.702 66.305 77.702 68.792 77.702 70.429 cv
77.702 70.921 77.6805 71.425 77.6805 71.918 cv
77.6805 72.3069 77.702 72.4009 77.7227 72.621 cv
83.9969 71.205 mo
82.7691 72.412 82.4543 72.705 82.4543 72.789 cv
82.4543 72.862 82.5281 73.009 82.6746 73.009 cv
82.7691 73.009 83.8809 71.939 84.0383 71.761 cv
84.1543 73.072 84.6473 74.772 86.1684 74.772 cv
86.9555 74.772 87.6582 74.279 87.9625 74.048 cv
88.2145 73.849 89.1586 73.052 89.1586 72.873 cv
89.1586 72.779 89.0641 72.663 88.959 72.663 cv
88.8859 72.663 88.5918 72.957 88.5082 73.03 cv
87.8262 73.691 86.9656 74.384 86.1789 74.384 cv
85.1191 74.384 84.9828 72.862 84.9828 71.803 cv
84.9828 71.604 84.9828 70.7859 85.1191 70.628 cv
86.2734 69.4319 89.8824 65.707 89.8824 62.245 cv
89.8824 61.458 89.5887 60.7759 88.7492 60.7759 cv
86.9344 60.7759 85.35 64.805 85.0773 65.539 cv
85.0039 65.738 83.8707 68.75 83.9969 71.205 cv
85.1613 69.998 mo
85.182 69.883 86.0637 64.763 87.7 62.025 cv
88.0363 61.5 88.3613 61.164 88.7598 61.164 cv
89.4207 61.164 89.4629 61.794 89.4629 62.224 cv
89.4629 62.906 89.2637 64.669 87.5641 67.134 cv
87.0602 67.848 86.2836 68.823 85.1613 69.998 cv
92.9461 70.072 mo
93.5754 70.324 94.2367 70.324 94.6039 70.324 cv
95.107 70.324 96.125 70.324 96.125 69.757 cv
96.125 69.4 95.7578 69.264 94.7613 69.264 cv
94.2676 69.264 93.6906 69.327 92.9984 69.62 cv
92.3902 69.327 92.159 68.875 92.159 68.446 cv
92.159 67.229 94.0793 66.525 95.8102 66.525 cv
96.1461 66.525 96.8492 66.525 97.6672 67.134 cv
97.7824 67.207 97.8457 67.271 97.982 67.271 cv
98.2129 67.271 98.4754 67.019 98.4754 66.777 cv
98.4754 66.42 97.3422 65.686 95.9887 65.686 cv
93.7957 65.686 91.7289 66.997 91.7289 68.446 cv
91.7289 69.17 92.2012 69.62 92.5262 69.852 cv
91.3934 70.502 90.7324 71.551 90.7324 72.5049 cv
90.7324 73.8589 91.9492 74.93 93.8168 74.93 cv
96.3977 74.93 97.4363 73.209 97.4363 72.936 cv
97.4363 72.842 97.3629 72.757 97.2578 72.757 cv
97.1641 72.757 97.1219 72.82 97.0379 72.936 cv
96.8277 73.304 96.3137 74.09 93.9848 74.09 cv
92.7676 74.09 91.1727 73.7759 91.1727 72.39 cv
91.1836 71.74 91.6766 70.743 92.9461 70.072 cv
93.5547 69.841 mo
94.0793 69.662 94.5934 69.662 94.7297 69.662 cv
95.2754 69.662 95.3695 69.705 95.684 69.778 cv
95.3488 69.935 95.3168 69.935 94.6145 69.935 cv
94.2574 69.935 93.9426 69.935 93.5547 69.841 cv
101.654 72.17 mo
102.871 69.39 105.148 66.935 107.75 66.935 cv
108.725 66.935 109.155 67.753 109.155 68.834 cv
109.155 69.673 108.768 71.488 108.138 72.621 cv
107.645 73.502 106.785 74.341 105.872 74.341 cv
105.484 74.341 104.581 74.164 104.581 73.094 cv
104.854 73.03 104.969 72.842 104.969 72.663 cv
104.969 72.443 104.812 72.327 104.634 72.327 cv
104.141 72.327 104.141 72.936 104.141 73.125 cv
104.141 74.195 104.98 74.73 105.861 74.73 cv
108.012 74.73 110.257 72.097 110.257 69.4319 cv
110.257 67.963 109.439 66.5359 107.771 66.5359 cv
106.575 66.5359 105.253 66.987 103.879 68.256 cv
103.133 68.918 102.315 69.883 101.339 71.771 cv
100.867 71.246 100.867 70.617 100.867 70.345 cv
100.867 68.875 101.801 66.357 103.154 66.085 cv
103.27 66.064 103.385 66.043 103.385 65.854 cv
103.385 65.833 103.385 65.697 103.165 65.697 cv
101.78 65.697 100.018 68.393 100.018 70.89 cv
100.018 71.908 100.238 72.202 100.836 72.999 cv
100.154 74.95 99.8809 76.619 99.8809 77.216 cv
99.8809 78.014 100.196 78.717 101.109 78.717 cv
102.399 78.717 103.647 77.038 103.647 75.527 cv
103.647 74.825 103.469 74.593 102.808 73.691 cv
102.577 73.377 101.906 72.516 101.654 72.17 cv
101.381 73.419 mo
102.808 75.275 li
103.028 75.59 103.039 75.821 103.039 76.094 cv
103.039 77.227 102.179 78.339 101.361 78.339 cv
100.815 78.339 100.563 77.951 100.563 77.206 cv
100.552 76.314 101.109 74.195 101.381 73.419 cv
f
.419666 lw
78.95 69.589 mo
78.95 67.691 77.8801 65.917 75.8023 65.917 cv
73.243 65.917 70.6828 68.708 70.6828 71.488 cv
70.6828 73.187 71.7426 74.73 73.7359 74.73 cv
74.9426 74.73 76.3902 74.258 77.7855 73.094 cv
78.0582 74.184 78.6668 74.73 79.5063 74.73 cv
80.5656 74.73 81.0902 73.639 81.0902 73.377 cv
81.0902 73.198 80.9543 73.198 80.891 73.198 cv
80.7336 73.198 80.7129 73.261 80.6605 73.419 cv
80.482 73.912 80.0309 74.341 79.5691 74.341 cv
78.9609 74.341 78.9609 73.094 78.9609 71.897 cv
80.9543 69.515 81.4266 67.05 81.4266 67.029 cv
81.4266 66.851 81.2691 66.851 81.2164 66.851 cv
81.0379 66.851 81.0172 66.914 80.9434 67.26 cv
80.6918 68.12 80.1777 69.642 78.9711 71.246 cv
78.9711 69.589 li
cp
77.7227 72.621 mo
76.002 74.164 74.4598 74.341 73.7777 74.341 cv
72.3926 74.341 71.9941 73.114 71.9941 72.191 cv
71.9941 71.352 72.4246 69.358 73.0332 68.278 cv
73.8305 66.914 74.932 66.305 75.8023 66.305 cv
77.702 66.305 77.702 68.792 77.702 70.429 cv
77.702 70.921 77.6805 71.425 77.6805 71.918 cv
77.6805 72.3069 77.702 72.4009 77.7227 72.621 cv
83.9969 71.205 mo
82.7691 72.412 82.4543 72.705 82.4543 72.789 cv
82.4543 72.862 82.5281 73.009 82.6746 73.009 cv
82.7691 73.009 83.8809 71.939 84.0383 71.761 cv
84.1543 73.072 84.6473 74.772 86.1684 74.772 cv
86.9555 74.772 87.6582 74.279 87.9625 74.048 cv
88.2145 73.849 89.1586 73.052 89.1586 72.873 cv
89.1586 72.779 89.0641 72.663 88.959 72.663 cv
88.8859 72.663 88.5918 72.957 88.5082 73.03 cv
87.8262 73.691 86.9656 74.384 86.1789 74.384 cv
85.1191 74.384 84.9828 72.862 84.9828 71.803 cv
84.9828 71.604 84.9828 70.7859 85.1191 70.628 cv
86.2734 69.4319 89.8824 65.707 89.8824 62.245 cv
89.8824 61.458 89.5887 60.7759 88.7492 60.7759 cv
86.9344 60.7759 85.35 64.805 85.0773 65.539 cv
85.0039 65.738 83.8707 68.75 83.9969 71.205 cv
85.1613 69.998 mo
85.182 69.883 86.0637 64.763 87.7 62.025 cv
88.0363 61.5 88.3613 61.164 88.7598 61.164 cv
89.4207 61.164 89.4629 61.794 89.4629 62.224 cv
89.4629 62.906 89.2637 64.669 87.5641 67.134 cv
87.0602 67.848 86.2836 68.823 85.1613 69.998 cv
92.9461 70.072 mo
93.5754 70.324 94.2367 70.324 94.6039 70.324 cv
95.107 70.324 96.125 70.324 96.125 69.757 cv
96.125 69.4 95.7578 69.264 94.7613 69.264 cv
94.2676 69.264 93.6906 69.327 92.9984 69.62 cv
92.3902 69.327 92.159 68.875 92.159 68.446 cv
92.159 67.229 94.0793 66.525 95.8102 66.525 cv
96.1461 66.525 96.8492 66.525 97.6672 67.134 cv
97.7824 67.207 97.8457 67.271 97.982 67.271 cv
98.2129 67.271 98.4754 67.019 98.4754 66.777 cv
98.4754 66.42 97.3422 65.686 95.9887 65.686 cv
93.7957 65.686 91.7289 66.997 91.7289 68.446 cv
91.7289 69.17 92.2012 69.62 92.5262 69.852 cv
91.3934 70.502 90.7324 71.551 90.7324 72.5049 cv
90.7324 73.8589 91.9492 74.93 93.8168 74.93 cv
96.3977 74.93 97.4363 73.209 97.4363 72.936 cv
97.4363 72.842 97.3629 72.757 97.2578 72.757 cv
97.1641 72.757 97.1219 72.82 97.0379 72.936 cv
96.8277 73.304 96.3137 74.09 93.9848 74.09 cv
92.7676 74.09 91.1727 73.7759 91.1727 72.39 cv
91.1836 71.74 91.6766 70.743 92.9461 70.072 cv
93.5547 69.841 mo
94.0793 69.662 94.5934 69.662 94.7297 69.662 cv
95.2754 69.662 95.3695 69.705 95.684 69.778 cv
95.3488 69.935 95.3168 69.935 94.6145 69.935 cv
94.2574 69.935 93.9426 69.935 93.5547 69.841 cv
101.654 72.17 mo
102.871 69.39 105.148 66.935 107.75 66.935 cv
108.725 66.935 109.155 67.753 109.155 68.834 cv
109.155 69.673 108.768 71.488 108.138 72.621 cv
107.645 73.502 106.785 74.341 105.872 74.341 cv
105.484 74.341 104.581 74.164 104.581 73.094 cv
104.854 73.03 104.969 72.842 104.969 72.663 cv
104.969 72.443 104.812 72.327 104.634 72.327 cv
104.141 72.327 104.141 72.936 104.141 73.125 cv
104.141 74.195 104.98 74.73 105.861 74.73 cv
108.012 74.73 110.257 72.097 110.257 69.4319 cv
110.257 67.963 109.439 66.5359 107.771 66.5359 cv
106.575 66.5359 105.253 66.987 103.879 68.256 cv
103.133 68.918 102.315 69.883 101.339 71.771 cv
100.867 71.246 100.867 70.617 100.867 70.345 cv
100.867 68.875 101.801 66.357 103.154 66.085 cv
103.27 66.064 103.385 66.043 103.385 65.854 cv
103.385 65.833 103.385 65.697 103.165 65.697 cv
101.78 65.697 100.018 68.393 100.018 70.89 cv
100.018 71.908 100.238 72.202 100.836 72.999 cv
100.154 74.95 99.8809 76.619 99.8809 77.216 cv
99.8809 78.014 100.196 78.717 101.109 78.717 cv
102.399 78.717 103.647 77.038 103.647 75.527 cv
103.647 74.825 103.469 74.593 102.808 73.691 cv
102.577 73.377 101.906 72.516 101.654 72.17 cv
101.381 73.419 mo
102.808 75.275 li
103.028 75.59 103.039 75.821 103.039 76.094 cv
103.039 77.227 102.179 78.339 101.361 78.339 cv
100.815 78.339 100.563 77.951 100.563 77.206 cv
100.552 76.314 101.109 74.195 101.381 73.419 cv
@
115.293 78.119 mo
115.618 78.402 li
116.867 77.437 118.011 76.367 118.913 75.045 cv
119.416 73.356 119.459 71.341 119.459 69.474 cv
119.459 68.33 119.395 67.187 119.322 66.032 cv
118.483 65.77 117.654 65.413 116.993 64.805 cv
115.986 65.508 114.685 66.431 114.013 66.956 cv
114.034 64.742 li
114.034 63.64 114.161 62.329 115.839 60.787 cv
115.493 60.566 li
115.472 60.566 113.866 61.731 113.059 62.34 cv
112.576 60.8069 li
112.335 60.85 li
112.439 62.476 112.461 64.123 112.461 65.75 cv
112.461 68.204 112.377 70.659 112.24 73.104 cv
113.342 74.93 li
114.989 73.419 li
113.898 71.887 li
114.003 67.564 li
114.506 67.166 115.272 66.5779 115.891 66.5779 cv
116.552 66.5779 117.139 66.924 117.664 67.302 cv
117.748 68.383 117.864 69.977 117.864 70.534 cv
117.864 72.621 117.948 76.02 116.573 77.007 cv
cp
f
.104917 lw
115.293 78.119 mo
115.618 78.402 li
116.867 77.437 118.011 76.367 118.913 75.045 cv
119.416 73.356 119.459 71.341 119.459 69.474 cv
119.459 68.33 119.395 67.187 119.322 66.032 cv
118.483 65.77 117.654 65.413 116.993 64.805 cv
115.986 65.508 114.685 66.431 114.013 66.956 cv
114.034 64.742 li
114.034 63.64 114.161 62.329 115.839 60.787 cv
115.493 60.566 li
115.472 60.566 113.866 61.731 113.059 62.34 cv
112.576 60.8069 li
112.335 60.85 li
112.439 62.476 112.461 64.123 112.461 65.75 cv
112.461 68.204 112.377 70.659 112.24 73.104 cv
113.342 74.93 li
114.989 73.419 li
113.898 71.887 li
114.003 67.564 li
114.506 67.166 115.272 66.5779 115.891 66.5779 cv
116.552 66.5779 117.139 66.924 117.664 67.302 cv
117.748 68.383 117.864 69.977 117.864 70.534 cv
117.864 72.621 117.948 76.02 116.573 77.007 cv
cp
@
120.823 74.531 mo
126.205 74.531 li
126.205 74.2161 li
120.823 74.2161 li
cp
f
.419666 lw
120.823 74.216 mo
126.205 74.216 li
126.205 74.531 li
120.823 74.531 li
@
135.122 67.743 mo
135.122 66.452 135.102 64.259 134.22 62.58 cv
133.444 61.102 132.195 60.577 131.104 60.577 cv
130.097 60.577 128.807 61.039 128.009 62.56 cv
127.17 64.144 127.086 66.105 127.086 67.743 cv
127.086 68.938 127.107 70.775 127.757 72.3799 cv
128.66 74.552 130.286 74.845 131.104 74.845 cv
132.07 74.845 133.549 74.446 134.409 72.443 cv
135.039 70.9839 135.122 69.275 135.122 67.743 cv
131.093 74.51 mo
129.741 74.51 128.943 73.356 128.649 71.75 cv
128.418 70.502 128.418 68.698 128.418 67.512 cv
128.418 65.886 128.418 64.543 128.691 63.252 cv
129.09 61.458 130.275 60.912 131.093 60.912 cv
131.954 60.912 133.077 61.479 133.475 63.21 cv
133.748 64.417 133.769 65.823 133.769 67.512 cv
133.769 68.886 133.769 70.564 133.518 71.813 cv
133.077 74.111 131.828 74.51 131.093 74.51 cv
f
.209833 lw
135.122 67.743 mo
135.122 66.452 135.102 64.259 134.22 62.58 cv
133.444 61.102 132.195 60.577 131.104 60.577 cv
130.097 60.577 128.807 61.039 128.009 62.56 cv
127.17 64.144 127.086 66.105 127.086 67.743 cv
127.086 68.938 127.107 70.775 127.757 72.3799 cv
128.66 74.552 130.286 74.845 131.104 74.845 cv
132.07 74.845 133.549 74.446 134.409 72.443 cv
135.039 70.9839 135.122 69.275 135.122 67.743 cv
131.093 74.51 mo
129.741 74.51 128.943 73.356 128.649 71.75 cv
128.418 70.502 128.418 68.698 128.418 67.512 cv
128.418 65.886 128.418 64.543 128.691 63.252 cv
129.09 61.458 130.275 60.912 131.093 60.912 cv
131.954 60.912 133.077 61.479 133.475 63.21 cv
133.748 64.417 133.769 65.823 133.769 67.512 cv
133.769 68.886 133.769 70.564 133.518 71.813 cv
133.077 74.111 131.828 74.51 131.093 74.51 cv
@
grestore
%ADOBeginSubsetFont: RAAAAA+URWPalladioL-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RAAAAA+URWPalladioL-Bold def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 89 /Y put
dup 193 /Aacute put
def
/FontBBox {-11 -258 968 915} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 681 701 643 663] def
/StdHW [49] def
/StdVW [123] def
/StemSnapH [49 57] def
/StemSnapV [123 143] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/period <1C60D8A8C9B8707C54B62D1E06BC8793AC1C64C96C063C62AC0EFB4
5DBB48B58B82D0CCC07A8> |-
/zero <1C60D8A8C9B7A73D345A42D46CD632BFB3A75FDC38598F090EAD3C86D
8955731984433A97361E52C78C552EA167A536BCA08183C5A2BA44347515B645
D46C4C76F885987B4DF86A2314A133AB6DDA87DB1ED63E86FD62FB455EC016D3
A631CC92AA6AB635B95FC2B30FA3F8DBBDE99DBB1ABF62BFCF2285712579AF83
8AD4082C8AE895F> |-
/one <1C60D8A8C9B7A73DC6117777DCDCF36CA7A6BD9869060AC148F7B185FA
C84E21D1ECA0C297AD9CD7655E32B4729A5AF4802049A5F2BDADC497150711CC
65B5A2E3D50EA8EFD6D5BDF1EF5E09151DA4ECE5455FF051F83A69DA5534E31E
75A500779FF31A7D0130A08F15D18C0F85CFE6461CD6B41503AF20C1B93F0E48
06ECEC9FFCF15FC660B0148BF6CF98CE7A> |-
/A <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD68258
0B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89517A9
319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35D95AB
9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0DA704A
687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D1515F0F5
9F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27DE4FF
9AE445115E014D4ED41CB80743> |-
/B <1C60D8A8C9B64EDF88209F749FBB7CF914B726B8537BF3459BD6DFCC544D
C9506BE69CB9C3DBDBCA5D4105A4C9DBD2CD8701D2FED0104D191EB117E64027
094403941E1A0489975E0EE98E441D803114693727301939E11AD38C8519E65D
CE3B1CC3AB43EE21C3C015EC0278960A35242924400E5CE086D7B79D2DBCCC0F
24BBF758D25B96DF6FA931795D54DD9CFF7C15A0981CAA2CF5903B4A513954A0
69DCBAF039A15EBFBF7C0DD06A7661BE5B527B09E752535B7731EEDBA7A21AB9
82C49FFA80152F9BE4634078D217876806A98A41C6A36607C57655B8CADA8958
FA7AB8376E4B40FBB306AFB87EBDA4436FF58D8625853B11AE8CE8F08E8D1AEB
4B198B2601C5E24C67C449C04B6644782C199D64E4FE2827E9C6> |-
/C <1C60D8A8C9B6079FEF90A25C2549229ED4A4AF7A54F7E9D59BB4C8D8FC96
DBA56C79A5853EB9311DB64D8FECB6F1CA43BFAE4BAFEBA0027201DC19E686FA
26EB8B6BF707EAC7144E5DAA6226572786430AB6CE9A2DDE983162A9115B589F
B7EC3B1CFC593A423BD346> |-
/E <1C60D8A8C9B7D8BE18C4074182FF407C3B3F63D87F08A9FAD785394C7856
6893D41D48BC5303A8BC04F72392BB0DF3984E423AE9C2832DBE2CEC35E1BCA0
67E2DD8953F5F5FAF37DEE687B2BC8EAB38446771B54813412F781BCC0329241
A81ADCAFCB2FC03D54928349EAF4DE1B0069AB0029A8C981BE573E45BB8D1FCD
28075C68F8CA0105D05FFD72E7D272F56B98A0FD88BA7EBB2EF9B9E1D7B8C5A2
81EFF191EDC8F6D3FE2F1DAE5C59393C67725A84AC27C62A7C11E482A71CB4C2
2141DDD97C12066285411B8A5EDE7E5BA08453CEC2D5F0F4FAC3A390EA4AEC32
E103EA9134EDA95F1ED32B2BE9AAA80D35AF13C52359D714E2264E0A4F0D73AF
A7612DF73DED2F31CD752045> |-
/H <1C60D8A8C9B6B41CC400654A73243301397CB31B008817F93CDDDE56F3E7
0F6F52B73F7B7A9FAAA96EEE4C0073B7AEB458963F1D6F3914FA1F4AED46B956
4B40BC6D962DF5F9734A269F5B1EACEA636573DBA3CCD18AADC853FF1EBE31D4
3F4B4D38FB6B873345E0DF5CA601FB2C9E81B49EAC097B681ACD201ABB005C97
7C9C76CF6C9FB6B8087664C2E145B56D2CB0823004A573D52350A60893073BFC
49CBDD3DDD0A76D797BF7BEA9D97723FFD148ED1A340F07DA12879857D1CD495
C42E10E1209ED492F0EA818FDD4827A7CEAA45AC749E161FFE2774708735BDF9
0E5484E7783D7CA55D58B74EC5D7B9518EA2D04DC4925F388660E1A0D81FC4CE
BE2E71A17F43EC0C71558CDA8120ABFFFFD5744F7AD20DE36FEC74352AFCF629
29FF51A087EC066917ECBE5507EAFEBC4FF1A240410F8169B92F33> |-
/I <1C60D8A8C9B7361F7D5373874D775BE5A20C9AD314BA4947F0A394C13587
DCD01B248966BC2F7A9A06DB830EA13E4A5611B9B0CFE9A99CFAA1457725871F
E1F53D030CB522629BD3B7EA0A0DB5A4C7E24623450BF282C7269731E75DA943
57BBF0535E08B4DBE0CC6218E23405A20D4D8D28B77871F5C0616430BB52D7EC
E50EAF9C> |-
/L <1C60D8A8C9B7D8BE6A40C97BB1C2DA5F58BC93A3F4581AE10A061F2B9C24
AB4F2769701A26C97EB463F316BD61493AA4C6AE0F8BDE275EB9BC8015179699
E99C616560DF8798F2A7FA19FA205D4AE08B89B38C77C0CD5AC9355FD8ADC9D6
3DC846E1C6880A0D53F75531A4E6CA7410D2934A9A627F739405A72FF73EEF0F
455A95720A322BDD901BC44BD67DC979D06266D96BC5F0CC69933E9010106A66
108610> |-
/M <1C60D8A8C9B5EE3172330AE13B8548D56C78038F2E01CED56DBB47257B2E
B483B326FC1B45BA83A50ACDD9B82618008A76EB7F13DCE608CA5C3DC5AF3AEB
660026BC2BA0B522C92F6BABB7D9A390FA416D6E2E723B720449AA2CDC2E4DD5
B449193DB0794D633E9E0DD573F0A713805DCE67B904A0E42CA6AB4E3B5FF7CC
C2FF5DE6091E1CE2DC76F1FFD9A6B7F084896EB050204EBABEC0B43D4F24160D
B49B9A6C00B38AF76898847300DA6F42DF329B560540624333F7E0BD62BD90FF
18BA519A5DBCC2FBE10FED0A824F7DA6E0C9A64FD7969F9802558CFDCBCAA5DC
A91542EB060CD2D35DB15757B0D4A0F094796717D9F64A8C73D36414396EE57A
6D9D14B72DD9924E8AFC909C5E535E997BEBB2BE6225C2D2BB4ACBBE9238D9AA
BD628874D70D1CC5599C6307E0DAA7382579C43863064788715840832CDA5F07
DB30419EF5DB6B22E61CFDA632475EDD6E5302776E420E3C00EBBD479847> |-
/N <1C60D8A8C9B6B41CC403CED4A03035D36742206997EAD79E013BC1433415
09AA815BBA408E4E724F5DF35DD62B254B44B9A53A9820C7E522A06E3EB67028
0D554C6EDB19F526B0B19B366AF27D66099C8F85A8626DC61F4CEB6A9B2165A4
90491F29132B93B25CDC1E9D75E77CEEF57FA4942B365F01DC3A88F82AB340A4
B1510569EE74AC00C8A9E42BE8A86C22A99D23090A1AE888081C23A52DC6CFDD
3EFEC820D760A660C52020D1AE899A6FB2359A64BE7AED1485A34A7C406F2AD2
5250D6793996805CDB8FF9183979A0BF4E0FB740A7960DC334B1> |-
/O <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798EE579C4DC1736BCE1C6BA
7AC6AB2CC5A1F381B64874DE62FFC0973E5F31FAB583FC619545405CA9061148
51C84A987A828E3C8BED94B3A2F7D2041B1459BAF9FA42147194A3FE6C8AD15D
7041D063247534B0E27C55CEE7673EABEEEBF1E58301FA4EAA34E151> |-
/P <1C60D8A8C9B7D8BE16F71404CE4A717FFC987A752E9EEA9BCB1FD166D543
77DE66C9C427BD1161C071897044AEF3E7FF591881D420AB04130DC37FE6599D
5F6425F719B439416ECCDB241F95CCEEC1039D4ED2F8D3DC6C9322990B7E06C1
3F3E96E9BDB35E874613D9A79C2F59158B518587C489B33784B4E1DE2E57D204
3D54ADB15E37399650F837111CAD4E5D7C218DD7B0EC8E33754F0D436488EA0D
4F6B5CCE4145113F7D2F4E72FBC2F3D4B80553CE8B692A1A09274AA9C426D5D0
65843FD29FE0A1D5C033851A53A584BF7CAC93E6F67F3D421B1C270FDCF3F77A
37D9B09DAB> |-
/R <1C60D8A8C9B6079F6CB0D0F8A7D977EE9E3417B33E9E6E0D8C8EB389CB51
69CAD5AD7DE55E0895922419D9366AFCA66AA5AA6534BC3B36411238FF4AE45A
74AF0132D6092DCDD742A070E1F851DC4189BD77D8B962964F0CD35193B06786
DC55DBAABA94F99BC004B134C25F5C49EDD242499DB3C3E0CA4E297E2B06DE48
DB5541B4E2E3E827FEC1A0C9BF5EA677F6BBC02B5D73EC1528CD70B90BCB36A2
D587F245C33D5CDBED61595429B744AF202FC0CD6756B7EDD8B6485AF4FBA08B
966B1DCB786A044F1024801E1671FBC97E7ADC2A0180924C06D64F707EC8892E
E12A3E8F0D6A4BBA2E9D40AC925324D30095D294FE74C3FBEE3645C797BA1A25
53364980AC04CC2F4150B2> |-
/S <1C60D8A8C9B7D8BE9BA32B89753E6710ED4027395DB43B504FA2418D4954
4C98D93E8BB15D547BA70E392EE57F93DC2F05EAE690A9D216062C75C077C8C2
B08DF5486ABDE9E40CF4D5EC43347B3FE0D14719CF187B4596C18B7CEA5D81B0
02E4C815F90A518AED62CA54B3F7569CA209B85AED306B0F08ABBD28740CAF9D
81722D18F38D39504691360D041E2C8119F5> |-
/T <1C60D8A8C9B64EDF8B99FE206E53FA0E4D0C4E2D152EE4F5331BE883E1CC
5457969E08FAFD8C94E6D576570B8AFC7C1A7430E32DA486E7294407DD2BF943
1180CF24AF9C07E55D8461B897CCEB8E5A80F6355DFDFE15A9BA1F92C1CE6C08
C25B42957922DB09EDE6AE2F91505EC4B0D93B717874D8EBF9A2FC5A89BF0967
89411F8C493E910EEEB76336EBD448D721900ADCA678B14D711DCCD01464EA18
C7262C26557F92CC> |-
/U <1C60D8A8C9B6FF8678FEBB7897131874101873C91E415D2265358F251B81
A2EFD95F132D4CE3BDE00089A758FFE4BD19D0A64E3EDC709FA9ACAD536144BE
66E4FC0010FB2125C6D70D615C9D954797424A0B6F1573781ED67E388F2C1DA3
01D05F5BDEF7AECC6F5DA23AB7761BDFC2151D057FCF8D4661CD54E690A15F9F
497913847D0776CE02869A8E3D712C1C9B60A9657634C540576B257350B9A63F> |-
/V <1C60D8A8C9B6FF868A38EC2503389F738062AAE1A2DEB7FAA222DB5672DF
40FAC8BA83D517C6998754150F181A6D377013AEBFBFEF7DF2B067CB0124C132
924DD03965E8DB07FB1949A86BC112BF7108EB65FF5021C0B605A5D940E802FB
C39FF3299C4CEE4FDC0F27AC48CC333B9B7417AE6DBCBD5EED1E18F5AA0E74A2
3184294B9893ECA295B721542D46E94194466422A217D9A6462F698A5928ED33
1EF4ECAEBBA9C695FE> |-
/Y <1C60D8A8C9B64EDF8B99FE2070F6A10841FA902E216884491EB5342B576E
24A38E569CDB49FA58678B3CBE6DAEDC151FFBC6DD229E9B6D242FA6864FD69E
A8E3E3140AE21EB137D3A33FA9B984B30304DD30392C317069021B66D575D531
5E3A3918DA1E0547897D4D033E41DECF0F6EAD72281626A1A8A542BEEACC89BC
E3E2F3EC2E685BA3C21D9EBEAA3E23C0684C> |-
/Aacute <1C60D8A8C9B6FF868A38EC2B636CE12F67FB590C0FC6273739094AD
682580B2AFAAB8D5CB1F501DE6161051E1552026119BCE98A2D5595DC48D8B89
517A9319EADF4E7FDF54CE64F154F67EBC650557613D89E06952E7979EE7CD35
D95AB9A75A5DAE3956577381560C4002B92998C14FA5C55B3C893EF922932B0D
A704A687F956F458AAAA1B460A4A4C715659329A39338B874916E18B2A03D151
5F0F59F3D0B857AE1753C5AE0467E22EBFE4CEEB276B22DA5CEB4D1FB45C6A27
DE4FF9AE445115E014D4ED41CB8078BA1612BFBE53C156003CCFB4E1F2F5AC19
E54C62DC69D1FB77F95949230264FA141> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBU+URWPalladioL-Bold /RAAAAA+URWPalladioL-Bold findfont ct_VMDictPut
/FLKTBU+URWPalladioL-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one 15{/.notdef}rp /A /B 
/C /.notdef /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 
/M /N /O /P /.notdef /R /S /T 
/U /V 2{/.notdef}rp /Y 103{/.notdef}rp /Aacute 62{/.notdef}rp]
FLKTBU+URWPalladioL-Bold nf
FLKTBU+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
257.274 61.687 mo
(P)sh
FLKTBU+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
265.176 61.687 mo
(ROYECTO)
[7.49689 8.5589 6.97507 6.43509 7.49686 6.97507 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
320.652 61.687 mo
(A)sh
FLKTBU+URWPalladioL-Bold*1 [9.56412 0 0 -9.56412 0 0 ]msf
330.543 61.687 mo
(LEPHSUB)
[6.43509 6.43509 6.43509 8.5589 6.43509 8.03708 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [11.9551 0 0 -11.9551 0 0 ]msf
379.854 61.687 mo
(0)sh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
216.945 78.4268 mo
(C)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
225.36 78.4268 mo
(\301LCULO)
[7.32616 5.8679 6.83986 7.32616 5.8679 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
269.146 78.4268 mo
(V)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
278.172 78.4268 mo
(ECTORIAL)
[5.86792 6.83984 6.36295 7.81204 6.83984 3.93289 7.32617 0 ]xsh
%ADOBeginSubsetFont: TAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TAAAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/FontBBox {0 -250 943 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416666 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBV+CMSY10 /TAAAAA+CMSY10 findfont ct_VMDictPut
/FLKTBV+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
FLKTBV+CMSY10 nf
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
334.359 78.4268 mo
(\017)sh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
345.897 78.4268 mo
(R)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
354.312 78.4268 mo
(ESUMENNO)
[5.86792 5.86789 7.32617 9.2699 5.86792 10.557 7.81204 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
414.693 78.4268 mo
(.1)
[6.00342 0 ]xsh
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VAAAAA+URWPalladioL-Roma def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
def
/FontBBox {-15 -283 926 728} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 692 712] def
/StdHW [35] def
/StdVW [84] def
/StemSnapH [35 43] def
/StemSnapV [84 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/A <1C60D8A8C9B6FF868A38EC2516662D2F0B109DC41AC2A59E7180AB83A030
1E5DC37495F95EC1C302354011F6C316C9F143870691C53EBE0C7DB82C05DDF6
A3F036FE884047B5BE2FC2E6B11444908F01030DB29EDA26429507E8564F5F9B
AEEC1F0660535273F93F4A2CFAF79C00ABF5432DAA19732799D35D3FBD7965F2
51960F686DB30D3338ED7D695922759BB475E2BD6A717ED2506B82668DE98A01
23F0D9418BB6A74D341162335B51C59789967C75AD4E927144845E4151E136E6
2D> |-
/B <1C60D8A8C9B7D8BE69B3E9892B111FF6A70734F3B3B85F4CEAF4795256EE
2165C716760A95A3952EB2334DC532791ADB86EE950F88C18C6A2918F3525DC0
FEBDDCC4563609D6357E3AACE18574E70D5D1DB9227C3B5ABABE7D78235D326C
0E92D9A6914B1B0E1A3B82EE1B25A5BD7F0EA520D262D4A65CB740A11441C40D
C56DCF924AB92FAB32659DC0AC8E122C255789C4DB38DF6F6478C191BAE72558
3FCC63820A286FDC0C1911E3C651C985E29E265F7EF41CC98D740C36158035FE
CDC87EE9A97F2DF40F5C24B251B01FAEF75D69ECF7135FF0527F102D793C7ED9
8213A0576C769D3C759A4D211D4320CCAE5477E217E844DFF01B095CF65E699B
7D376FF80C24F1D96062CBA2498CDEB4CAB8F87BF966D850E8F20577F0C8A809
A91CE3> |-
/C <1C60D8A8C9B638183F62B3C8A86C65B9BB6F51B2808F316B8FC41E5A4A7B
6D94D0DF7F1D9128B79C6B69A59B04143943ED9FBB2BE7CA2932390A2F474016
1C8990139D910D26B1E47CA4846BD1291536CE63739D44E3435B057259D20518
A69883C1587D20EB1E4426B726> |-
/D <1C60D8A8C9B6FB5FADF89E6183639612061E1E33578B6D08DD3A43DC57E9
A6C21374285723D2B52E5D9B14BF9C925FD47C25B5E59C71EFD655B9E53B5CDC
E9D5B394A01724764A4B5E7953BC9AFA6303BBDC39E2B41E72E0878E3F5546BD
41002B79C1F450FF58AF266AAEA64006F484779BA93DFCB15F44D47DAFF4EAC9
ED575470E787B81C2391EA1DC841F77DC0B7CF1DC4F2EC0D27E485BBA587ECDA
034ECD0F17CE25191D9A376C68693E31CD5EA4C36A465794D7182377A6B5D927
26E4F784CBE4C198832E29913D669FB3697A66C6335975A6E77665708A6B2FC4
92FD2D82C90940A89BE87F348FD14726D0> |-
/E <1C60D8A8C9B7D8BE69B8F1116BFA0730853BDE4DE0BE01C56D090D86C6BE
01FF716F63284BC570C79981AD3C21BBB7EC8C0B965D0A76B7860234A736EFF2
693267E555A2281D95F1EC4925BCA484C86AA01306028048B7C3DDD68F8F49F4
0EC9FD686ECE2077D71ECD34C13B4DE67ED88FD1D7922453C68F5670A927EAA6
97AD896874DF4801E38BB174FC37D73F8374816E0FE5C7277D706EB7EA7BD890
9A9E6FA179EB14A796F1ED9027190C8D0761A576ACCD7CAEEC6D4B76A61BF01B
AE16243217C27427A94E75B7133E7286443CC1EDFFCD6591AC32090944A7AA4D
8F99F73F2EE0FAA10EEAB999D500236938D57167AD45E6B4B51386BD061A3D7F
282B718D5C64CAA2C6A24DAAEED8A8CE268359C15F76562FE44A5634909EB7E0
D625797C15A504362B34AB0480> |-
/I <1C60D8A8C9B81BEA11FA7D507053387E4946BC04815488DD4A7DB4A52237
F95D61CB4DBEA706FFD0AF46BF49346F1B94EB0664962B0AC2A78F217E1B560B
2B680C1D43032DB69F98675C938B94565871232959AB7C444500EB145CFC7F52
9E5F02D11C9299B4CFE8E0C87AE056B1D917AA602BF5016F43A1997069> |-
/M <1C60D8A8C9B5D4485F4AACDE92B5ED3069D22305405D54DE5A7BCA132926
C2632E3B939A2B60E7BBD1940782CAE96DE4F0BAF4081AFAD5C4ACD1C7ECF9D9
7A4C115DA1EA4169C9145CAE97BE0EB518CE73C321D3F437FD1E95EEE5FBB82F
D7758B10DCB3DE3849EEC6C4FE189116B0BBCA803C77AB6205508F6526DDDB84
A548D3724BA3576784BA6A31A0FA8417F8A1808AB203B21E6F45122BB8E1233D
190FA3E5BE160E08DB442033E88D4FAD513C407CECC94875E02C3AF9B77D55E8
F9785D8645C16D33DE36DDF976692B1167C2F09E8EA542DBB1D9DCFE3E7727E8
D19778B386148D9AF880CBCDF3974BDCD92A02A3F5631EA03EBD0D766BE986B2
09A762BFC5F1AD3E0F897F1775C0C3FC751DB792D2> |-
/N <1C60D8A8C9B6B278CF3FA7580133C2535AB697BB9E77BCAC1D303687C742
7AB4A5723F2ED40DE3B7E795F68AD6E24C276BC65AA75E5B2AFDD56815216C0D
D5D0CB8DB5C3B75272385461D74AA70750F463D177757F983CFD19B046000EC5
9D7DF1D1548888A76FBCD57586A0750BAF6136E2BACB539BF40FD4E65CBCAF1E
0140885EC8EA631E690959B70AF329E6454F25B75C20643BB9D776FAD74283AB
0ADB3937537EBCAE6A1E602B449A308DEA5FEE5663734A9C83396B0ED48C604A
E502FE60> |-
/O <1C60D8A8C9B6C769AE5DCC4E8B6EA0E84C6505BC78AF7BCC8AEFA323342C
5E6E8A8B46061FDC469DD90497F2371E62E22F70958F6E575E843E16DE00982A
CC0DA4E51B0A46A7A10DE3DF67C12C1B7BD1779E8018A2A5DFFE8D8001A1DF6D
AB15A40213DE31> |-
/R <1C60D8A8C9B651303E9550A2019C5784A3830712207C4D892D7CC4E71AFA
0C79DE963778C1C0269F0412361A9BD1114328F632F582B2FCC7C07CC153F7DF
E39A85C717DC1AB0D04082E97B930F7B0168BA712EACFDA6BBDFD39BCCEA89B3
5AF46ED015E2CF22C8A9EB1EEB9E526B641C91E025EFF4477AE4354AF6A8EF44
C6F1C077B4AFBAF6D79D525AA1391AC1130D534BF2DB73371AE60F69B6C6A45D
A7EA8A312AB1E39829D665A2A6EA8D9111B4C8ABFDF048BA1D7650EA332E93F7
C147F62ACE3B0E67B6718A8CDD770AE99F21AB6EF19602C73C247D4C764B579F
54F490F05E92D3401F32FF0C136F07C8BD4B34BCC0F8F9F7D3D6F7CC718EA178
A3E176F53B4C3DB3E3C0583ABBEE5AB3B09A418F2A224ED763FF61CC85> |-
/S <1C60D8A8C9B78E0565022D97E17C5CB11E466287FE5A907377A202899DB5
6FD2D91D0D044DA67C4C8BDD02C56808EC7283169FCAE9CAA686C84D3E7EDD43
A1E543B9A314F32591FB764918F3EBF7BD2DAF10F7F07F4173D295EEEB1BFF7C
20A2B69638EDD79A9DE8087EB91F6D9BC271BF567685D1796D930608F00EE298
FF21EC73F7C92BA943846A8337DCFC747484B5F174BB238A775FE5F68F9705F4
0658462C65CD8FBFFD280A94> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma /VAAAAA+URWPalladioL-Roma findfont ct_VMDictPut
/FLKTBW+URWPalladioL-Roma*1 
[65{/.notdef}rp /A /B /C /D /E 3{/.notdef}rp /I 
3{/.notdef}rp /M /N /O 2{/.notdef}rp /R /S 172{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
255.33 94.6897 mo
(C)sh
FLKTBW+URWPalladioL-Roma*1 [8.72726 0 0 -8.72726 0 0 ]msf
263.601 94.6897 mo
(AMBIODECOORDENADAS)
[7.32617 8.79297 5.86789 3.48288 10.1339 7.29883 8.59485 6.73206 7.39801 7.39801 6.37186 7.29886 
5.86789 7.7941 7.32617 7.29883 7.32614 0 ]xsh
520.382 79.436 mo
522.148 81.445 522.263 82.704 522.301 83.403 cv
522.339 83.6819 522.543 83.797 522.695 83.797 cv
522.886 83.797 523.713 83.326 523.713 81.28 cv
523.713 80.529 523.713 79.741 521.742 77.351 cv
519.428 74.681 li
520.966 64.459 li
521.081 64.574 522.187 65.795 522.301 67.206 cv
522.301 67.358 522.339 67.714 522.695 67.714 cv
522.886 67.714 523.713 67.244 523.713 65.197 cv
523.713 63.862 523.395 63.315 521.589 61.662 cv
520.648 60.836 518.843 57.696 518.563 56.9839 cv
518.487 56.793 518.411 56.59 518.169 56.59 cv
517.979 56.59 517.152 57.061 517.152 59.107 cv
517.152 60.3279 517.546 61.154 519.784 63.315 cv
519.707 64.459 519.631 65.515 519.161 68.146 cv
518.538 71.643 518.487 71.961 518.334 73.41 cv
507.414 60.951 li
505.646 58.942 505.532 57.696 505.481 56.9839 cv
505.443 56.704 505.252 56.59 505.087 56.59 cv
504.896 56.59 504.07 57.061 504.07 59.107 cv
504.07 59.857 504.07 60.633 506.041 63.0359 cv
508.354 65.705 li
506.308 68.922 505.176 71.757 505.176 74.351 cv
505.176 75.647 505.532 76.55 506.549 78.482 cv
507.172 79.627 507.528 80.605 507.528 81.4319 cv
507.528 81.864 507.528 82.881 504.731 82.957 cv
504.337 82.957 504.057 82.957 504.057 83.39 cv
504.057 83.822 504.413 83.822 505.113 83.822 cv
507.312 83.822 li
508.367 83.822 511.317 83.746 511.317 81.509 cv
511.317 80.021 510.414 78.915 509.511 77.821 cv
507.897 75.902 507.782 75.342 507.782 74.135 cv
507.782 72.596 507.973 69.418 509.232 66.748 cv
cp
.902098 .747311 .142947 .0211185 cmyk
f
530.807 84.407 mo
530.807 83.046 530.781 80.72 529.84 78.928 cv
529.014 77.364 527.692 76.804 526.535 76.804 cv
525.467 76.804 524.094 77.3 523.255 78.902 cv
522.365 80.58 522.275 82.653 522.275 84.407 cv
522.275 85.678 522.301 87.623 522.988 89.327 cv
523.954 91.628 525.67 91.946 526.548 91.946 cv
527.577 91.946 529.141 91.527 530.056 89.391 cv
530.718 87.852 530.807 86.047 530.807 84.407 cv
526.535 91.59 mo
525.098 91.59 524.259 90.357 523.941 88.666 cv
523.7 87.344 523.7 85.424 523.7 84.178 cv
523.7 82.462 523.7 81.025 523.992 79.665 cv
524.412 77.77 525.67 77.186 526.535 77.186 cv
527.45 77.186 528.632 77.784 529.065 79.627 cv
529.357 80.898 529.383 82.398 529.383 84.191 cv
529.383 85.64 529.383 87.433 529.116 88.7549 cv
528.632 91.158 527.311 91.59 526.535 91.59 cv
f
.810547 .619141 0 .219971 cmyk
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBW+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D39411EB989D5C60161441F10B2E73393E84CF24C7
395BC5D34161DF9BA82B2D67AF54D4BB948B343005101B386FC316B139CD6D8B
4E5F5E4A1FE7F70EB0C6CDF8AFDAF572BF0505D552D6E2B9CA0927BE29A7875E
AF292> |-
/two <1C60D8A8C9B7A73DC63EBE13715B150044171139C9B84C967A7C446E70
6BD02668F4A8C23C866B43509D9B62B05B6888BA590DBFAB23A756C093B9B900
1B8DDCF0543C00F567ED55B8CB47B13F0DF5CB9DD5DA24CC17BC330BAB11105A
C900255685DBFA7F7FC8A04D40FA08B8CBFFBAE4662AB3C36C286A12A9395644
2743FA9AFC1892B8FCD33C8C1B3C> |-
/d <1C60D8A8C9B7D8BE9E0A9BD54295C2787BBC62BD6A326AF7CD237A27F0D7
1E5EF39D453BCA5464D71EE05AD905B77C7390543C4F5E10C19AB7E5E48B940A
482DEF4121928D0E8473132C0EF231567DEF3D7391FD2FF65C4323FD9A52F220
29CCF4FCC0D39447259A3E653FFFE8A9CCC1EF47C0104243CC72AF7CF07CE01B
1562A60F47FFED919C4952B7A43DCACF2DBAA35263169B3CA5670FE8A8BAD643
36CFF40606F6ECB748056198365687E867834AB95C52B50F21D6583C9457833F
DF9544E1963FCC56A50E80EE568340ABA6F40885C7654F4485551C563CCBC66D
D9D5728107195DCF05CD> |-
/e <1C60D8A8C9B75CBBDC5536C53A31CAE3790865F26AC145B3CA0AA9DF6992
DB1BF6A0AA0E1294DC48804C4FF1F6E58D2549C430A2F609624D6AB490E2740D
ECE523D0776C214C7FC15C2C1B547770AF5B560100BDA7D9D1EC8F361E38ED4A
9F345E6BF7AB93F12C0D5BD830F720114828317122AA48610C6A21C7B06A9B92
436BAF5A65DC392EA9399A4E08FC3F6BB10C59B2D5B0ABCABBA21E979F6CADAD
B442E4F8> |-
/g <1C60D8A8C9B7EF3227731FCCDA1C13D12B3260E6F2A2369EA3F930B2E6FB
31F9655C7735A33E5B5315EF56E2317A290379D54D2E44C8414BFF1042EB5F0E
894359AB980315ABBBB174050B098437BD38C610EB1F1D71464A8B55DEB3108B
FB8C6BEE9B9BD1D7E07BD616E74CEDBB4A717CCE556E51DF5E2B8276402F853C
3AF830E5763B42C3A33F5600FFBBB3F18660128202610539259AADFB9785E32A
7653B7F26F56146468DDF61FC3841CEAD04848B51A2AD92E2958F3DA108A7A13
F8EA36D925428E853571C7B9794D81BD5B6D39FE89E9242BAC06574736E8AE7A
8ACDC632A12922DF998F925B0189367F6F488F233C169E411CC6AA4228719728
D8DC49CE9C96D3A4648E05F0028C4AF2D1D8968D56E39B600B369797CB4D8732
AC27CFDB211F10B7F1E88F7AF2> |-
/i <1C60D8A8C9B849F243C9DC7C307B007BA0DB1C1C714770DCFA6C34B8ECF0
DCA7C5ED8A3CBE9061B92C8F3F843DBA5E480CB6A59BBA9D5EB3676D2A5694CE
515B0898B675FB5C6151953FEA993E7247A7A8D481C338811E83404DC55827F2
F39E99FC090716843C1A27ACB24C44AAA502A791120057732B2C265BD7A6A300
A15BF4CECE15A5E8D62B4D85DEB73554F91662> |-
/n <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E4052D1347C2B2BC5DB6B5DE156A
6C24C720093F9EBE811E5355CFFD0F0CF8B4B5891201B8B062B2FEC5BAF11D9B
A5A610D052F44A3EC06ACA6EED3CA254C695201057E003D177A7F84C86409566
7793578B9207F9FB4A8ADECCBB7061EC357B62003F8B25D2336C0A40A851EB08
48A18A6DEAEADEB0457DD0D1F8EEB4667E651D9415BE975073F355BF0E31EF54
9D71791D4A1BD110A83ADC570EA9CA3F08EC0721ECC18C391C5E524A74455483
DA129504617E92F2C501B77359D05C778ED743452D95523E82409C> |-
/o <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13894CE
1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F810491605E
64299605D3E134B52C2A005E09947C124BCF6EF08AC0319E> |-
/r <1C60D8A8C9B73031520AF1E8338C42139CC91801B73BAFBCAA66E81D50A7
D70B3E3026F09FD1E5E3CBF9D99983215B1E045C2A5FDE9430A1BCF2935C777B
483D0CCFE4515DF42149E3DE9D285D13811B63E5AF855BF87EA1784DFCF78CE5
C7CCF8403A17AC05B097987C21FDD283C8DDACE4B4E251F198A1DE8B82270E04
3C2252D4A4BA24B30FF90F59DF6D7B54F3FC3422FEDB> |-
/s <1C60D8A8C9B713D4BC3C72C059606B1E1A89540595DA1BDB2E552548D4C9
E6CAB8BF5549E576AF4CB29F18CB1D4A64AF50E374F0210160BD1E8A1806360D
E6F914BB8B2824D689490EFF08A4E254AE8F33A92383569A48414E33C2557DA0
94271F726C6471A7C7EF58EACB43FD9ECCB2F87AAEDF91BADE135D849EDD1983
3451EE63BDE395255DBEA8B381A82FC8C9FEB58CCBDD0419CC1FACB7B05B16C7
EE7DECB9AFDCEE8197D1305AF6F39F59E883EAE2> |-
/t <1C60D8A8C9B824242125E7DAE84BE946E6D0B1D5F9023570BEFCBF91285E
4E2A998FD0C62627834E824A52AF119B03A46C3C80D768617639A04B5D26460C
5C062BEC1CF25FD8F0BAF39F209C2B1D91B3F5F34410ACC6D82989B2C027C2A4
E0E61681BE> |-
/eacute <1C60D8A8C9B75CBBDC5536C53A31CAE3790865F26AC145B3CA0AA9D
F6992DB1BF6A0AA0E1294DC48804C4FF1F6E58D2549C430A2F609624D6AB490E
2740DECE523D0776C214C7FC15C2C1B547770AF5B560100BDA7D9D1EC8F361E3
8ED4A9F345E6BF7AB93F12C0D5BD830F720114828317122AA48610C6A21C7B06
A9B92436BAF5A65DC392EA9399A4E08FC3F6BB10C59B2D5B0ABCABBA21E979F6
CADADB442E40D1318F1617BC8E35C355B93867A6A71DA429B58E2426A30F6A3D
EF8FED1DA7A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBW+URWPalladioL-Roma /Encoding get
dup 48 /zero put
dup 50 /two put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 233 /eacute put
pop
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma*1 
[48{/.notdef}rp /zero /.notdef /two 14{/.notdef}rp /A /B /C 
/D /E 3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 
2{/.notdef}rp /R /S 16{/.notdef}rp /d /e /.notdef /g 
/.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s 
/t 116{/.notdef}rp /eacute 22{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
62.3609 115.696 mo
(Agostode2020)
[8.48727 6.06601 5.95807 4.62596 3.55505 8.68501 6.66893 7.94707 5.45402 5.45399 5.45401 0 
]xsh
458.721 115.696 mo
(Andr\351sMerino)
[8.48727 6.345 6.66895 4.3111 5.22906 7.34412 10.323 5.2291 4.31104 3.177 6.34503 0 
]xsh
62.3609 123.638 mo
532.44 123.638 li
@
62.3609 290.953 mo
532.918 290.953 li
532.918 147.976 li
62.3609 147.976 li
cp
f
64.3535 290.953 mo
532.919 290.953 li
532.919 147.976 li
64.3535 147.976 li
cp
.0404968 .0310059 0 .0109863 cmyk
f
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+URWPalladioL-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBU+URWPalladioL-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B8707C54DE5DBFA06F4D3805DC417576A09E93F70EDD69
9B8205AE5E906600387F401C14BD7BC20C41236281FC4C4ACE3D45BFE73A6C8A
A8B650ED5283218C> |-
/D <1C60D8A8C9B6B41CC78139492EBC21ABBD2A52235B5CE34016F4B8293D00
3754D5AB0430F539F625BC37A189809692A6670EB14A002A5EE307E63CD7D4FE
3B1ABD574BB359B25DB4472CD8C7577C8A8A47001538810F60B42EC3E4A9C520
14136AA8C30F08C2DDD794C67EA29B41C6D3921445F47A249AB0AF9F6580823F
350CE0CABB5F93673E5136147D67BB20317167552D361DD29CBF38D4AA3F8FF2
D85A1868F997CF5D6A65F24B4DD69F1FC247FD36830B9A4EE955C2DD8582768D
3E7CF237D8E71947583D769C56F630E8DF60B07550289076408B56B126EC35F5> |-
/F <1C60D8A8C9B7EF3225152A81707F9A23E24FF4B51224078A24D8A90AA0F1
8774B8B90875A49C3D231E2C4F271E907DC40E11ED5CED7E2F81FA7296445252
7ACB042A74CAFCD589E6F6BE8805E5FF4B63AAF7E1B860E498C4F7A07B6E2059
237CA46CB6FF05DE824E94ADEA22021FCE0E60AD218C3A6CC15CBA542772B956
C7A332133F0E16A7913AFD81DC8867495B973CA17FAB43E8FAD0B15C3BCC8AB7
D20A1A0B6147750D140DF037DBC1BB4D44A005112AC9E0D2C017AACD765DD2EC
1561E8E85FE866EC66AFAB3CCA61B5714FA3FFFA4F46EDE61E2B3987D668D38B
54845618AA0C> |-
/a <1C60D8A8C9B7A73DC63EBE579ADCF57413FA938FA6C45399D8D2D254CBBA
67DC6441595129AF11DF598226F58DC312D897F1DA8CA6E75BCEC2157D59974A
96E19FB35724551F9F1371D0E74DC9677D64C85A7B7D076F0F4E5E460D92151A
861513AB489A478D5637479F591654E533A72DE5BA97ECCB9970EA5C66CDC37B
2D33860AD80A4FC7AC734A6AFAB54C8201B58580AAF37B339AACD52A84CF455B
A6A9AAAD0DB7B69C33830F9194236137F6095F170498D21925FFEF1684C01915
4292F682B2E460A914D60DD669091F25BCB96F9E31AA620F> |-
/d <1C60D8A8C9B7D8BE9B886514813DC019F9D465410057134F3DF1C99A9B0C
50003926A3A7BD3B791DD1D36B61196B817489851AAA720896A56A3E1EFF199E
32F7B44AD72F85FD0BEA1E145202C25DC246341DCD072A65DB8772790719E968
A6C46FC94B77C28E0D4AF3044F3F5C40653E61F0C83A3A7E19A850961AE2E348
D4F692A865D4DE5EA74E2BDEC641EEE0FFD6594850CFEAE96B85D60E769FA241
3E06F0F5269861770BDD9D592E2662CB4D60C6D09300CCE74600B094F5A3F1A0
F1D6D03B38A2630364F7EB158762979347EE4D133D0A1624590F3D0CC62A0BBF
2369369F640B1347ABECF877> |-
/e <1C60D8A8C9B7A73D34356C4F99A96DB5686DD7243255F35E100C238ACF38
E0282B2C205CBA03B0F70158CC7CF4E30545B4667A78CBE037437E8E6E4A8DB5
FCB94C48E4189D01511F3C5224C9649DC31B259C62BF529C80E3C53F9EE1A8AE
8BC5A78C64DFB0982C6EF52016027A4E53E9C2EAE524A3E511D0D48E6336EC75
0BB77E2CC6> |-
/l <1C60D8A8C9B81F2C452A0E20E4027044D6C9A3F9D4FCBF01DABDBCE1D872
10434B6ABD9BB14DD5D877A4FDF02A305EB8655A7CC651A13A47C3150096DB1D
DF5D48D7CB2AB007A80178E5DBA140FEFB1560375ABE1CD7299DDE> |-
/n <1C60D8A8C9B7D8BE69A164BC541F20EB43E9100B2D4A336E288582237C53
0998171D6DC148F6DE371232FC0E4A71155B490EF00FA74219434ADE90644B8C
FF1F23D73BBBCC4236800B303C1091E56946DEACC143626BAECD25D568697BAD
D26F35AF5D31D35A00A00FFF29C9D32F310FFAC0BAE7FFE07580A6BD6D885489
0B7F94D6B66453C1DEA307C94C1B0C2B83929852C1D106006C3B016DC041BAB6
F664885FC83DF651285BF262D6FE2134E506B046D33D5A3A31BEC19FF595104C
58D3A07EAD23271E4CF3FD5FCCA94E08253037789B5609900C47AA24608B94C2
8FE2AA8BC6927A5CA0653B09> |-
/o <1C60D8A8C9B7EF32A6FF32573A372DB86884A4CC5AA390B50E08EE8D1C2A
7D93CFC37C22E91D722073C778467066CA01B30C43D67672639DE2EBE7BE71F0
3FFAB41C4BC081A51A969EAC10EEF9C27B881A2A774BF00C1B> |-
/p <1C60D8A8C9B7D8BE1ACB2CC96D17C0D13D4BE3E526162788A7476E8F5541
50C97CAA596B020AEE889E0C14C721CC7D14F8A09DFB9F7BB613B2E43D5938AB
B9F062B626A13F710A902632BC8381F5E4D36F832D44AB2E83E93FD40CA4FEED
A77555ADF7C08024173CA486A10868D7ACAE887E5DC38B2DA4F00596135F9227
9F65EB9CA5D5A671B48A09D9F33573B0981C243E2B3D38A321BCB810AF38BEC2
342309C3503661592D2E02A2DB4C7B624D8A34C21F619B7C76AFF21872AF4823
E7040F9E400E978B07033DF5C7B664B57EC083885D26> |-
/r <1C60D8A8C9B7361F7D5006333BEFE2F6EFE286C90F1DE638957ECBF614F1
3DA29E68548982ACF70AE163B7274CD58993B66C9C44E4D87F5660D133B16F98
8D3899639C66FFF5B72CA4C94989C57CE680BFA61DD875ADEC8A75210D56B692
E85520E9B23BD590449BC402545C72613EF9C0B47834EDE45F49473B0798B2B5
DA17FA26EB5A2B000E72B4E29E675BE5DF> |-
/s <1C60D8A8C9B77FE243B28A82B2251ECBBA25F935D7E7AE8FE1A7F5D21FE4
804FF87271027A97AD4972BD88810839B630A4DA42AE35842A4B2C9D1B62C269
5711627CD44C08F7E2DA17821EDFAAECD055115315ACEC134BE778404B920AD6
673153A97427E9A145C0B886259A802C1177D9BA801E54DA595D8E56B2A81F69
771DC1C0> |-
/Oacute <1C60D8A8C9B6B41C36F1128EC55BA5A1B008798EE579C4DC1736BCE
1C6BA7AC6AB2CC5A1F381B64874DE62FFC0973E5F31FAB583FC619545405CA90
6114851C84A987A828E3C8BED94B3A2F7D2041B1459BAF9FA42147194A3FE6C8
AD15D7041D063247534B0E27C55CEE7673EABEEEBF1E58301FA4EAA34E170657
1C21B64257393138D5FA2B7D7BB58A9D5CC391005BF597E7D62BAF592D8C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBU+URWPalladioL-Bold /Encoding get
dup 58 /colon put
dup 68 /D put
dup 70 /F put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 211 /Oacute put
pop
%ADOEndSubsetFont
/FLKTBU+URWPalladioL-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp /colon 6{/.notdef}rp 
/A /B /C /D /E /F /.notdef /H 
/I 2{/.notdef}rp /L /M /N /O /P /.notdef 
/R /S /T /U /V 2{/.notdef}rp /Y 7{/.notdef}rp 
/a 2{/.notdef}rp /d /e 6{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s 77{/.notdef}rp /Aacute 17{/.notdef}rp 
/Oacute 44{/.notdef}rp]
FLKTBU+URWPalladioL-Bold nf
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
79.6172 155.066 mo
(D)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
89.2473 155.066 mo
(EFINICI\323N)
[5.8679 4.851 3.93304 7.81204 3.93287 6.83984 3.93288 7.81203 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
144.777 155.066 mo
(1:Coordenadaspolares)
[5.99416 5.73308 7.87503 6.06599 6.06599 4.24809 6.66895 5.45399 6.66895 5.45401 6.66891 5.45401 
7.56001 6.66891 6.06602 3.63591 5.45401 4.24809 5.45401 0 ]xsh
74.8008 148.604 mo
74.8008 146.06 72.7395 143.999 70.1961 143.999 cv
67.6531 143.999 65.5914 146.06 65.5914 148.604 cv
265.596 148.604 mo
265.596 146.06 267.657 143.999 270.2 143.999 cv
272.744 143.999 274.805 146.06 274.805 148.604 cv
.486084 .37207 0 .53125 cmyk
f
70.7078 143.999 mo
269.689 143.999 li
270.642 143.808 li
268.703 144.196 266.932 146.102 266.687 148.064 cv
265.528 157.354 li
265.283 159.317 263.48 160.908 261.503 160.908 cv
78.8941 160.908 li
76.916 160.908 75.1141 159.317 74.8691 157.354 cv
73.7094 148.064 li
73.4645 146.102 71.6938 144.196 69.7543 143.808 cv
.162109 .124023 0 .0440063 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
79.6172 155.321 mo
(D)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
89.2473 155.321 mo
(EFINICI\323N)
[5.8679 4.851 3.93304 7.81204 3.93287 6.83984 3.93288 7.81203 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
144.777 155.321 mo
(1:Coordenadaspolares)
[5.99416 5.73308 7.87503 6.06599 6.06599 4.24809 6.66895 5.45399 6.66895 5.45401 6.66891 5.45401 
7.56001 6.66891 6.06602 3.63591 5.45401 4.24809 5.45401 0 ]xsh
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBW+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDCB20DFD3393D1FCE7DAC15545EF017CF3DC9EE0
33E03C671A6E43BD0C4568824DEB> |-
/period <1C60D8A8C9B8707CAD73D5E53952ADC2EA204BA5FB352F28ED07F0E
ED3343393FADFF48C0BE3> |-
/colon <1C60D8A8C9B8707CAD1BD6CC4A3D4A8A5F95B4121A9E986E4C549FE3
4AF8523B1CB11E0E108AE17AB2776162A50C612EDDC8B7107065454D6A5DBC2D
002416833F2942F6> |-
/a <1C60D8A8C9B7A73DC608357115F4F2E08468E7D6965AAA50D2897860D0E3
401ECF294E34BEDF18F9AE067406B7F6529CF2A931CCF776220813698C577E3B
3A4A1D7B36A77EBDD465CEFBC4A0E9DE9DDB4E0E7B88989457D89182AA037846
DB6C0C50EBC669830A7833745E71EF637C18738F4CC120458158D73ADCE9DFE2
8EA11FDBE53A84A7FAFE0228206306A74000348B4532924C04B3C442E9BB8609
C0BE2FE2F2335746004B00E82E7D91889106FFBEFA6B1D258F823C2CBA810DCB> |-
/b <1C60D8A8C9B7924CC4AB90EFB641B4101544BD5C13FB0F8DE19A675B37D1
E1A5E97903497BD9FF012EF91795AAE9843DCEC4CD3A73988660134412CFA317
7E9663F39C17D19CB790F57D7FBBB2C02286607DC419B8E74743B18616B66CD4
1A56468BA4260B2ACC80038EA691523126761AA2A49EF8CEC1A43CBA2AA07FCF
555EA482B5DF244CD033B7> |-
/c <1C60D8A8C9B77FE24E589A4BC1FB0315B0D97F24CEE396AC4FFDB471B1C7
698F503058A7AB8D5AA1EBE4C4360355E365C13A2AD27BF180D78680661CEDDD
0A111127678C41C7A9FDBD391D5E314D69070C73F944997EB04198D29374582C
E00AC7ECA078C723> |-
/f <1C60D8A8C9B81F2C453350860B9A1DAF4FC9A35A5D72BF2EB5A9B3FB01D5
2982B935AAB23737F31026ADC0C73AEF61FF3684E5DD92F78C1FC2332A8F4874
18382174B89BF9EF69114432D870B2328135E647D57AAE0FE9B95BB533CE2192
BE953304DE3CD89930B08405D3F8974132DFED03F3105DE2CCC30D2C9991598D
3B72844A1AB18A8C3514F639D7B83116A30C5F20AE53B1EFE3> |-
/l <1C60D8A8C9B849F243C9DC7783CDA3590841B22A78B6C0214A9ECAD49C50
8588E8D13BA1DCBC79A0ABAD711FEB8747165715E839B378E58EBFBFC9ABBD08
1888662E60FD05C77F9B280C5819A0D244504BA687E8BFF52E79607667035E1B
48FF6E> |-
/m <1C60D8A8C9B59575A96A8571DA6AA916F4C34689E621659B29E23932D5F9
1226059550D30959EFD5C7359CD84F64D6570359C716C17A152E1923F3293C50
8C9A0CF82E64B965CFE89FF0E4ED632580AFEFA00129A01EC1C2FA4369A7E7F1
F99F3C5402A1B426A69E693815A0033731A06D235BBC7B04A818D30BEE85D2A5
BED37DE7CC45DEDB63C30223B147C38006D6DFD2326FAC935E4573F472E66899
99C04861FFC561725F07E82DD223641EB8A033FC0458BD654BA673E4D0E22998
9A6C273007DA97136D20E406DD70C2ADE3F59F7D68E61EF6931976626E4F232B
416CC1581321D5E235C2D7D7B8EA095D7C201E6000A7556A2C48CF8A999C20BC
576085C71609B7DD579B1DE30CC9728ED15860F57AE4DF6FEE36E4EDDB042FD4
97D01AFD04BD117BC72BC1311F12D50BA3B9C0738596F667906536711AC871FC
8685C4A148E01032BE67C56E36793BFB5B93259C944E0BAAD472> |-
/p <1C60D8A8C9B7C2FB37FE6C191452A5183F05D11648C3753FC14D2771D744
24A3A8B7DD5A28EC83F3D1051C56F2D820C1A4A2A43CA3F4834FA036C9C743C0
98638936C326998A48301281BAE8FF9320DC77A3B46FE5B7EBB9AA51B398B66D
3DE749B9566ED0DF0079C3D0654A6B488FE415A479CEEF97845CEB13F0BFAFCC
B2F727D7A43777473E945BB997FE029C1E18D1D6E653C10AB0BA713D9CBBB8A4
000695782782140114B7FE35EF5E53127C1AFD3AE6211AF8ED705ED3C16A7ADB
694338F62A340C43B19D8245420F> |-
/u <1C60D8A8C9B7C054917A0714D350335B7AC24DE9CD2D3F8FFEB843BFD66E
B253E1DFAAE408E665D82FB861B09BD14E3E7F20FA5AEDC0E5771A10C4801F47
190B737653495898555CEE0BD331F4F0884CDAE8CC57BE55DB597BEB8A46CFA5
767F675155BD5EA130D4E846A20F300186B668CC44559325C60BEC31D264B873
AF1A7AFB3AB79D07FCB23D11037B4416D050799382A1D608F1B49DD2E1CA4954
9B792F80D5B0F7AD371164C1EE5770844EBDB94E53D65006B02350ECF3DFA98C
3041F3BD852F84> |-
/y <1C60D8A8C9B7EF3227737BFD5F437C615F098ED87F538F0E436BB066A363
6EECBA83B2F3B36B48BC45FE9133A62E466D39B7732876CCCA55073ACBAA1A33
466BA9D5AFC3721E98A88E402187FD5031470E0008676E577E066A8DFA63367A
14693BAE36DD75A63695C4252EB22F091E8B3828668A9D4D7A01B5107E0E1673
D3DB9D5DCA74AC8A4A7BA25BA65B620DAB69FED7B0DE62E2B67AB82C731D144A
AE8A7522A05CCF0EE4D244DEDE71> |-
/oacute <1C60D8A8C9B799EB5D34ABF6B2172F0AF3B604D9C5F8C6AEDA7EA13
894CE1E7EE8BC479839FCA9C7B5DEBDA476F63B13BE69E63A1B3ACEA07F81049
1605E64299605D3E134B52C2A005E09947C124BCF6EF08AC031A97932FA66D82
9D0F4AAB61A0C1A59EF7DA6AD3888A8D93653667A605BE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBW+URWPalladioL-Roma /Encoding get
dup 44 /comma put
dup 46 /period put
dup 58 /colon put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 112 /p put
dup 117 /u put
dup 121 /y put
dup 243 /oacute put
pop
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /.notdef /two 
7{/.notdef}rp /colon 6{/.notdef}rp /A /B /C /D /E 
3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
111{/.notdef}rp /eacute 9{/.notdef}rp /oacute 12{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
72.8575 171.556 mo
(En)
[6.66893 0 ]xsh
%ADOBeginSubsetFont: XAAAAA+PazoMathBlackboardBold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XAAAAA+PazoMathBlackboardBold def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {0 -3 786 692} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 692 709] def
/OtherBlues [330 330] def
/BlueScale 0.0396299 def
/StdHW [20] def
/StdVW [95] def
/StemSnapH [20 30 42] def
/StemSnapV [95 107] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6C4F5656E30FB7BE07F763CE279B77A98215089BFBDCEE861
2C7252BD3F97E64B3FD8D94C5691358549FDC2B08935C090C21C7FC8F9D6A988
62F40A7208A0D32D12997B13ECC625C464F757A5D1A3E91FBDC9DF26DB57A66A
1DBB36D7D252CC24EC9073D6F673BC53B45AE992B7348CDA86F453BA20773F61
F68AFD564DE057E97B51844C9E9987334CA03EC0EC73222CDB5E92285A954526
49E707CFEA5BE65BE49DB2AFDED6EEED1FFD3C8CD16B7FC49B494F3EADC146BA
23C10443DA386ECE0FA1D767A518217203EFFE65998BF236954723EC0ABAF893
8493DD2F02A7B57584DD91B0BB7F4BF5D8F204F0A12559758A8359A1A8DAB4D1
95084BBD13D144EF5A3D15EE1B7B2A20CA0575DC796AADAE0AC5F5AC867485FF
08C9E1E18AE536838CD4BC65190EC52998738C29DCF41A29D67475407367FE64
FB4C2E084909E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBX+PazoMathBlackboardBold /XAAAAA+PazoMathBlackboardBold findfont ct_VMDictPut
/FLKTBX+PazoMathBlackboardBold*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
FLKTBX+PazoMathBlackboardBold nf
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
88.5985 171.556 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
97.4368 167.596 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
101.919 171.556 mo
(,elcambioacoordenadaspolareseslafunci\363n)
[5.45418 5.22906 5.90383 4.84202 5.45401 9.62997 6.02992 3.17702 8.68506 8.18088 4.84201 5.95807 
5.95804 4.11316 6.66893 5.22905 6.34502 5.45401 6.66891 5.45401 7.34404 6.552 5.9581 3.17697 
5.45401 4.11298 5.2291 7.353 5.22906 7.34402 3.17703 8.18082 3.63596 6.57895 6.34506 4.84198 
3.17703 5.95807 0 ]xsh
%ADOBeginSubsetFont: ZAAAAA+URWPalladioL-Ital Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ZAAAAA+URWPalladioL-Ital def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
dup 114 /r put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-35 -276 741 733} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 471 491 692 712] def
/StdHW [38] def
/StdVW [78] def
/StemSnapH [38 43] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/P <1C60D8A8C9B7D8BE698E12398553FD67613C99187B997D79DCEE275AB082
8068A5F643FE79549A62E85E7C96D2376CD41D683F6C21675E79C56343D768E6
2188A5E0F0C977A7DC541BB702DF183F35B91B938795A4920E580A912433A42D
ADF6EEE89266F0B3D1723BB395852F09AC59B6FCF118357F743628243629E875
D0AEDD9658EE06DA5C9FC567FECD3AC69EA0819EDCC4AE0D08FC8764DD388DAE
549F9AAFA3726DC7E92F06F464BBFE5EDC6CD52530F185AD7127CEB732F1FF97
3BBC89A1C18934AEC3C15169> |-
/r <1C60D8A8C9B7361F7796DBA02526C7A45F3ECC7C64247FA29CC37839C155
B4D7AEF7AF35E3616F076DEBD47DA05DC96C516C458C808A7A94C42AD50B50E1
0570C26C214231AA35BF3164E11ED1F2A562B5B7201472038089F44D12F5C021
082D5B0A4F8A2A1BC79E1E3054032231B6844F9DEBE6C73A24E51E0F5BFC78C5
EACD76D2C1474926638A70AD4FBC66AB0206DAC7336E3B5948845B41> |-
/x <1C60D8A8C9B7A73DCED8C1E018DE595692F8F08FE1303C45A5C61B6D171E
628D8E57B17D9245E9E30360A8F24C1AF9B1F56D54D2BA982EB5CA1968214AF3
D6BCDCCD28ABFBBE1F9534C2941FD2DA273ADAD81031AED20A371327BAE05961
CF79667FF076BF8E7866D313DEECB8E9201716005EDE6595178FA4B73292F6FC
A27572E3912A5D41994B347B23E5889766A76432494F1077A901BAC111229F61
D9578EE79E560C99D655483C3091B54790A87005AEE2AEE4226B2437B3C26024
384D708418D1FCE33E2D5C9347F3260D4590> |-
/y <1C60D8A8C9B7A73DB544E0E41D4E3B269A2A65316789C846A19D0DBED79C
19020D8DF43C8448FE746CD985993650892FFCBC1818ECAEA5A84AA7B849E5C5
81AC2EBCEF080E6DED02A5D7C0F0C5C23021186B810A92ABE5BCE6A162F8F82A
5CA3B54421A3E297C627259BE61CC32603D3D15301C3061E2E87D8502EE5F38B
CC7D506B1F95FC55E4625E370843B559B430AE83EE729A74E5A761CDFDDAEB9D
311B14F783DEDE368079DEE40794F55AE93371115801053D5C979E2843A8F726
8ED750F36EA8F8B7> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBY+URWPalladioL-Ital /ZAAAAA+URWPalladioL-Ital findfont ct_VMDictPut
/FLKTBY+URWPalladioL-Ital*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
FLKTBY+URWPalladioL-Ital nf
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
227.901 200.167 mo
(P)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
236.055 200.167 mo
(:)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
249.654 200.167 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
258.492 196.207 mo
(2)sh
%ADOBeginSubsetFont: TAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBV+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
/element <1C60D8A8C9B64FAD2EF24E721610468584A112D0923431BA3EC693
BE35580F450CD295B0B0546AE9D4648D0638ADEAC6CCFCFF08E550ED15AFA5BE
13F6EB886728BD44B34633DDA2169D23411E4F2E5F9C670981218D25C9FB960B
A4919A64F279A2A368FC7CC64FB53080809AFCCE9B> |-
/mapsto <1C60D8A8C9C4A6CECE728ED8254DC595D3E1F41AECEEF940033A745
96F549E5DE2C43E95B2C130E3D481B6076F74F0BA4BE16E4479E8F410> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBV+CMSY10 /Encoding get
dup 32 /minus put
dup 33 /arrowright put
dup 50 /element put
dup 55 /mapsto put
pop
%ADOEndSubsetFont
/FLKTBV+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 4{/.notdef}rp 
/mapsto 200{/.notdef}rp]
FLKTBV+CMSY10 nf
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
272.496 200.167 mo
( !)
[7.01984 0 ]xsh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
295.14 200.167 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
303.978 196.207 mo
(2)sh
%ADOBeginSubsetFont: BBAAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BBAAAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 61 /equal put
def
/FontBBox {0 -250 721 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164
F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02
A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598
A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A
0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF397
16A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB9
9C4AAA689F9E967FCE15709E3204C4D> |-
/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E59
93F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5
497F9A03CF7F30718A4F8E51FE4C555962B834> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTBZ+CMR10 /BBAAAA+CMR10 findfont ct_VMDictPut
/FLKTBZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 19{/.notdef}rp /equal 194{/.notdef}rp]
FLKTBZ+CMR10 nf
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
244.515 216.421 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
249.096 216.421 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
253.587 216.421 mo
(,)sh
%ADOBeginSubsetFont: DBAAAA+PazoMath-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DBAAAA+PazoMath-Italic def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) Diego Puga, 2000, 2002. Distributed under the GNU General Public License (http://www.gnu.org/copyleft/gpl.txt). As a special exception, permission is granted to include this font program in a PostScript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /theta put
def
/FontBBox {0 -11 703 711} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 0 482 482 692 711] def
/OtherBlues [-276 -276 -226 -226 410 432 646 646] def
/BlueScale 0.0396299 def
/StdHW [20] def
/StdVW [65] def
/StemSnapH [20 38 42 50] def
/StemSnapV [65 76 88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B77FE2B99E96E5B05AFC1CA0DE795B2D75AFE033890F0B
BC9280FBAFDD6A8EC9B7A1C65A9C4F550860403C938C10AFDC2CFD6C0C9F5863
BAC9B753CD1E00FF94E9C247F42E32ED1A9EFA3750CC7D728DCF99135FFB3723
E486C733E45815B006BADF77C76565E5607994B6E4C8DB3C4B35D0A17B5E062D
A60507D033911D5A58006D0D06B0AF0C32915745EC30D20D0D9EFDEB30075E5C
1DF2C041FBFA1982584619931742E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTCA+PazoMath-Italic /DBAAAA+PazoMath-Italic findfont ct_VMDictPut
/FLKTCA+PazoMath-Italic*1 
[113{/.notdef}rp /theta 142{/.notdef}rp]
FLKTCA+PazoMath-Italic nf
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
258.267 216.421 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
263.703 216.421 mo
(\))sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
272.361 216.421 mo
(7 !)
[.269928 7.01984 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
295.49 216.421 mo
(P)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
302.429 216.421 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
307.01 216.421 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
311.501 216.421 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
316.181 216.421 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
321.617 216.421 mo
(\)=\()
[7.71292 12.141 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
346.349 216.421 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
352.046 216.421 mo
(,)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
356.726 216.421 mo
(y)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
362.45 216.421 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
367.004 216.421 mo
(,)sh
72.858 243.34 mo
(donde)
[6.66893 5.95806 6.34502 6.66893 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
216.111 259.594 mo
(x)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
224.976 259.594 mo
(=)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
237.009 259.594 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
243.318 259.594 mo
(cos)
[4.84201 5.95808 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
258.879 259.594 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
263.568 259.594 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
269.004 259.594 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
295.364 259.594 mo
(y)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
323.382 259.594 mo
(y)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
332.139 259.594 mo
(=)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
344.171 259.594 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
350.48 259.594 mo
(sen)
[4.62598 5.22906 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
366.807 259.594 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
371.496 259.594 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
376.932 259.594 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
72.8576 283.624 mo
(para)
[6.55199 5.45401 4.31105 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
97.4998 283.624 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
102.081 283.624 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
106.572 283.624 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
111.252 283.624 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
116.688 283.624 mo
(\))sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
124.392 283.624 mo
(2)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
135.129 283.624 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
143.967 279.664 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
148.449 283.624 mo
(.)sh
63.8352 381.863 mo
63.8352 301.087 li
537.114 301.087 li
537.114 371.498 li
526.749 381.863 li
1 /0 /CSD get_res sepcs
.5 sep
f
64.1754 381.523 mo
64.1754 301.427 li
536.773 301.427 li
536.773 371.357 li
526.608 381.523 li
f
64.5152 381.183 mo
64.5152 301.768 li
536.433 301.768 li
536.433 371.217 li
526.467 381.183 li
f
64.8555 380.843 mo
64.8555 302.108 li
536.093 302.108 li
536.093 371.076 li
526.326 380.843 li
f
65.1957 380.503 mo
65.1957 302.448 li
535.753 302.448 li
535.753 370.935 li
526.186 380.503 li
f
65.5359 380.162 mo
65.5359 302.788 li
535.413 302.788 li
535.413 370.794 li
526.045 380.162 li
f
65.8758 379.822 mo
65.8758 303.128 li
535.073 303.128 li
535.073 370.653 li
525.904 379.822 li
f
66.216 379.482 mo
66.216 303.468 li
534.733 303.468 li
534.733 370.512 li
525.763 379.482 li
f
66.5563 379.142 mo
66.5563 303.808 li
534.393 303.808 li
534.393 370.371 li
525.622 379.142 li
f
66.8965 378.802 mo
66.8965 304.148 li
534.052 304.148 li
534.052 370.23 li
525.481 378.802 li
f
62.3609 377.668 mo
62.3609 299.613 li
532.918 299.613 li
532.918 368.93 li
524.181 377.668 li
0 0 .199951 .800781 cmyk
f
62.7594 377.27 mo
62.7594 300.012 li
532.52 300.012 li
532.52 368.765 li
524.016 377.27 li
0 0 .5 0 cmyk
f
532.52 368.765 mo
521.181 371.6 li
524.016 377.27 li
0 0 .399902 .199951 cmyk
f
.3985 lw
532.657 368.731 mo
521.181 371.6 li
524.08 377.396 li
0 0 .199951 .800781 cmyk
@
62.7594 377.27 mo
78.3504 377.27 li
78.3504 300.012 li
62.7594 300.012 li
cp
0 0 .5 .5 cmyk
f
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: FBAAAA+FontAwesome Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FBAAAA+FontAwesome def
/FontInfo 6 dict dup begin
/Notice (Copyright Dave Gandy 2016. All rights reserved.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 111 /warning_sign put
def
/FontBBox {-3 -71 1003 857} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 750 765] def
/BlueShift 6 def
/StdHW [71] def
/StdVW [71] def
/StemSnapH [71 143] def
/StemSnapV [71 143] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/warning_sign <1C60D8A8C9B5EE31BE3EE2EB170F6E70993A42FBF7E3460D8
8C16138C72D2904F9D95C501FC0AAC60BD89B3618AAB381F8F994534C7C49DAB
00059E7855D48575DB5767E48643949D583F81819EE415C275FE131224D10C86
4B10A8DA77A55F52D97D05B6DC849725DE42DB606C54FC224299A0964FA60796
4E39A561207819F6A033AFBCE22776F5925488D6C569DAFD737D53A57816C2A0
EB4FF29DDD94D511124> |-
/.notdef <1C60D8A8C9B7A73DC51A1CA963140D476F7DF2D6FE929ED20EA713
298CDB281DDE84D86DC1A616536ADD2CF3DEA5EF7B8533AF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTCB+FontAwesome /FBAAAA+FontAwesome findfont ct_VMDictPut
/FLKTCB+FontAwesome*1 
[111{/.notdef}rp /warning_sign 144{/.notdef}rp]
FLKTCB+FontAwesome nf
FLKTCB+FontAwesome*1 [11.9551 0 0 -11.9551 0 0 ]msf
64.5773 343.339 mo
(o)sh
62.7594 377.27 mo
78.3504 377.27 li
78.3504 300.012 li
62.7594 300.012 li
cp
0 0 .5 .5 cmyk
f
1 /0 /CSD get_res sepcs
0 sep
FLKTCB+FontAwesome*1 [11.9551 0 0 -11.9551 0 0 ]msf
64.5773 343.339 mo
(o)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBW+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/q <1C60D8A8C9B7EB086E79C455D740F5D8BEBDE6A5D2BC31C8A2A749007453
4E0576A03DF683A355711C2FC1A34682E6CF7ADA2BD58C80CD42D92A1ADCEA4D
BA209568139CB416525FFB812CE332D7230D2E54DAA5DE294F194AEAB5912D18
F40AE71D12920E18EDDFA17C9D26B8773EE80B04D5FE6AF2D3C0C77B6F32048A
A53B05101923383BB670F81E6CA9A847924179824DAAF95BB742F5DB21985059
51F0BCF1BB3A005B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBW+URWPalladioL-Roma /Encoding get
dup 113 /q put
pop
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /.notdef /two 
7{/.notdef}rp /colon 6{/.notdef}rp /A /B /C /D /E 
3{/.notdef}rp /I 3{/.notdef}rp /M /N /O 2{/.notdef}rp /R 
/S 13{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
/p /q /r /s /t /u 3{/.notdef}rp /y 
111{/.notdef}rp /eacute 9{/.notdef}rp /oacute 12{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
82.6023 312.8 mo
(Notemosquesi)
[9.06294 5.95806 3.55505 5.22905 9.62998 5.95806 7.35307 6.11098 6.57898 7.94717 4.62595 0 
]xsh
%ADOBeginSubsetFont: BBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBZ+CMR10 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/FLKTBZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 17{/.notdef}rp /equal 194{/.notdef}rp]
FLKTBZ+CMR10 nf
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
160.65 312.8 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
165.528 312.8 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
171.225 312.8 mo
(,)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
175.905 312.8 mo
(y)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
181.629 312.8 mo
(\)=)
[7.70393 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
201.69 312.8 mo
(P)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
208.629 312.8 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
213.21 312.8 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
217.701 312.8 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
222.381 312.8 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
227.817 312.8 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
232.371 312.8 mo
(,entoncessetieneque)
[5.44521 5.22906 6.34502 3.55505 5.95805 6.34506 4.84201 5.22906 7.35281 4.62598 7.95609 3.55505 
3.177 5.22906 6.34503 7.9472 6.11099 6.57895 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
220.221 340.502 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
224.712 336.002 mo
(2)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
232.362 340.502 mo
(=)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
244.683 340.502 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
250.38 336.002 mo
(2)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
257.121 340.502 mo
(+)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
268.353 340.502 mo
(y)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
273.942 336.002 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
300.249 340.502 mo
(ytan)
[29.7 3.55505 5.45401 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
345.447 340.502 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
350.136 340.502 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
355.572 340.502 mo
(\)=)
[7.70392 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
376.758 333.122 mo
(y)sh
.441 lw
376.479 337.78 mo
382.509 337.78 li
@
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
376.803 347.99 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
383.697 340.502 mo
(,)sh
82.6021 369.941 mo
(paratodo)
[6.55199 5.45401 4.31105 8.19005 3.55505 5.95806 6.66893 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
132.102 369.941 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
136.683 369.941 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
141.174 369.941 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
145.854 369.941 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
151.29 369.941 mo
(\))sh
%ADOBeginSubsetFont: TAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBV+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/negationslash <1C60D8A8C9C4A6C26B10FB8D5BDE6CDBBEB886041A010C58
7BDBB6C6D81F15A730606F174AB3495E2650C76FA5AB4C017DE7B4889B1BFCC1
5958E3BD07C0EB458EBB4CF8D9C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBV+CMSY10 /Encoding get
dup 54 /negationslash put
pop
%ADOEndSubsetFont
/FLKTBV+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 3{/.notdef}rp 
/negationslash /mapsto 200{/.notdef}rp]
FLKTBV+CMSY10 nf
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
158.994 369.941 mo
(2)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
169.74 369.941 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
178.578 365.981 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
185.778 369.941 mo
(talque)
[3.55505 5.45401 5.9039 6.11099 6.57896 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
221.661 369.941 mo
(x)sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
230.526 369.941 mo
(6)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
230.795 369.941 mo
(=)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
242.801 369.941 mo
(0.)
[5.45401 0 ]xsh
62.3609 450.091 mo
532.918 450.091 li
532.918 387.632 li
62.3609 387.632 li
cp
.810547 .619141 0 .219971 cmyk
f
64.3535 450.091 mo
532.919 450.091 li
532.919 387.632 li
64.3535 387.632 li
cp
.0404968 .0310059 0 .0109863 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+URWPalladioL-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBU+URWPalladioL-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/J <1C60D8A8C9B7361F0E3727014E17B348D0505A5CCD842E6905F9CF438A44
3F5914D25D915317F950E5AACF87898005B14DD728D663235C6667E300238C10
DB0CECEF8B8B5989FBCAFFE4B24A384996F649B61B217E70BBE830EDB5D8A1F6
7193D7BBFCBEFBA3D0D2B713BB7181E8BD3A35BC8E67> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBU+URWPalladioL-Bold /Encoding get
dup 74 /J put
pop
%ADOEndSubsetFont
/FLKTBU+URWPalladioL-Bold*1 
[46{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp /colon 6{/.notdef}rp 
/A /B /C /D /E /F /.notdef /H 
/I /J /.notdef /L /M /N /O /P 
/.notdef /R /S /T /U /V 2{/.notdef}rp /Y 
7{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r /s 77{/.notdef}rp /Aacute 
17{/.notdef}rp /Oacute 44{/.notdef}rp]
FLKTBU+URWPalladioL-Bold nf
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
73.1277 399.776 mo
(E)sh
FLKTBU+URWPalladioL-Bold*1 [8.72726 0 0 -8.72726 0 0 ]msf
80.3367 399.776 mo
(JERCICIO)
[3.93288 5.8679 6.83984 6.83984 3.93287 6.83984 3.93288 0 ]xsh
FLKTBU+URWPalladioL-Bold*1 [10.9091 0 0 -10.9091 0 0 ]msf
128.81 399.776 mo
(1.)
[5.72383 0 ]xsh
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBW+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B7DE87AE5D1CFCD165D480E934895CD928286EF86E75FC4F9
84AED63336504833AF4669E60BA29816F971F829B63E5957EB1710B0A2FB8D1C
50B7E8143E9E587C759AB77EA2243E9FB81A5627795B32C656D5543200DE78F3
42CC87DA6D0AFEBCF1BC3E5444844B47D7FF6DFCB25A21EF3FE70F0FB541A9FE
EB1AA125FCA8F4D1099CF4780EA95C5859DA0E348958AF645409B98CC2F39938
442698FC37F1FB45365153BF08E774F01CF48749ED132A38215C957DD7C6D40C
9A8B87A8FA10E71C71FFF2FED3A7D8541DA6A7AA8EA7C461B7F3E944394A7660
12A6B1A8028D8E96B1CCFED2A86E9854D19BE0CDA5CBDA0EE0404915D7785CBF
4551DE27431AF887A429F6E66E109785E0EC4ACC457AC56F615051DD2C2FB139
272BF863F98F5F30BF8C8F1AF8318564A> |-
/hyphen <1C60D8A8C9B81F2C3AD0946AA0A266E6027A08EF4F8B383A753ADFE
E9E11FBA69CC7> |-
/four <1C60D8A8C9B7A73DC608352D56964CA2A5C9DBEC6341939115632E2B1
29C21398D198AED6C494B39A65D194C0EF974C0D828C645EBB3888CEF3ED0823
A9488F08E167127CE729EC573AE9BD67AEB5D90CB0358402DA996C9ACD2F078B
41337B31DD01C2E7D6A5A46F9FA78C7E795E1739F1CD4FA4D4909A680A625C60
1A2DA7FF36C84A57BB6711F65ED617B8CB37666670ED620F046F03672C9> |-
/P <1C60D8A8C9B7DF559893AC75E30219414C5E8C9E57A554F8421CF71DFE36
4AFCAF35471E70ABC50F2FCCBCEB6282AB886129DB39ABC8E763C367B9737DFB
4F7E2E1671DB96D6D93AF71EB45058C2583CB204FF7F4D0A80BB0755F8F227AD
CEC39A5426D519157FE011451B47AA9EF64675378BDE29F22D86A57E3BE3F8A5
47B88F5540921E516681255B09F9BE3D927BC7865BAC85FF042DECA975E71EDA
3061A5C6423B9997F7D3AF8274826177A36E97C118C84BDA0B6493C6C1054C1F
CF1044525731B8> |-
/h <1C60D8A8C9B7F51B67AD9A8FE0E4D5A1E40547CD5061B56D49C463DD8BD8
7EB5B101AE02D14F2B8464A23092DE5AA3A0E034C9CBD441CF670D2E9A8C3CB2
C2B61B455B24C9FFC4703AD66CFF3BD3AB47E21B44370F299F13CE44109B571A
1331660F0AA3CC72273DC5D9E0B2F3D4E20A28380B630DCF402711849C852A22
D850AA0B4223ED2A5A66F1CF15CE13AFD68971F6159D069D878E656F7250F01B
DE29BCB38FFF773035A5C92FD68B12C074DA015994CE23C4E19FBA7F2C88C023
5636AA5F99273D58F19DA9312C> |-
/v <1C60D8A8C9B7E6F02031DA9BFB2F7EDC34BFD027B4159458F019679FFBE9
59F2F653945AA34D6DFA3407D7CD4F9DADBD754ACD8E40604DFE495590DB5921
7368AC8AD289BF4C397483FBEAD2F0887012D28ABB5A34CADFDAD042DDD5F854
2395B6BED80BDE30F1CFBBD3D6B68B81225830834A35F4ECA45E00120F96F74E
BB64C3BB871C4AE5DFE689D21B7503498D983AE2> |-
/iacute <1C60D8A8C9B84D35461681CB9FCE2BE5FDF4E176A8C9AAA0B90FE01
EF392B37E0C1C0CE60BDAC1208A36DFCFA6E2BFC82A7C884B75F676780DEA08E
5CF87AAD5175A9101356C978D5BEB603053750ADE4E74AD2B53E019EB3D1BE86
AB5E01EFDF3CC00AF6AEDF113E3AE7649C5094472018354661862CCCA5F0AFB4
CC62DE4DE197CD6E0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBW+URWPalladioL-Roma /Encoding get
dup 2 /fi put
dup 45 /hyphen put
dup 52 /four put
dup 80 /P put
dup 104 /h put
dup 118 /v put
dup 237 /iacute put
pop
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma*1 
[2{/.notdef}rp /fi 41{/.notdef}rp /comma /hyphen /period /.notdef /zero 
/.notdef /two /.notdef /four 5{/.notdef}rp /colon 6{/.notdef}rp /A 
/B /C /D /E 3{/.notdef}rp /I 3{/.notdef}rp /M 
/N /O /P /.notdef /R /S 13{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/s /t /u /v 2{/.notdef}rp /y 111{/.notdef}rp /eacute 
3{/.notdef}rp /iacute 5{/.notdef}rp /oacute 12{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
140.266 399.776 mo
(Calcular)
[7.731 5.45401 3.17703 4.84201 6.57896 3.17702 5.45403 0 ]xsh
%ADOBeginSubsetFont: HBAAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HBAAAA+CMEX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMEX10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /integraldisplay put
def
/FontBBox {0 -2222 943 0} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.0479599 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/integraldisplay <1C60D8A8C9B790A849148EA2EFC9362E655F2F729E21E0
A96F71F3D2F04B836DA2CAB1BC2E58AAC1B3720846A3A712506815034EF8014E
5CC4E36AFB4EF97A795583E2CDE40F7505B18CA2823D600DD6A04177BD13E773
24C80508B6994BE0D1DDD9C625179C01C399B6C9AF8D4FB77A6303E4EADC5506
F23FD6438EF745921134B35265D4B35DE5210353A58F1EF75E6E90201E6EF7A9
701A1D5388E400C599167967EA94A83E86F315503BCBF05FD39D76AA> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTCC+CMEX10 /HBAAAA+CMEX10 findfont ct_VMDictPut
/FLKTCC+CMEX10*1 
[90{/.notdef}rp /integraldisplay 165{/.notdef}rp]
FLKTCC+CMEX10 nf
FLKTCC+CMEX10*1 [9.81819 0 0 -9.81819 0 0 ]msf
258.653 402.395 mo
(ZZ)
[6.45306 0 ]xsh
%ADOBeginSubsetFont: ZAAAAA+URWPalladioL-Ital AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBY+URWPalladioL-Ital dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CAD73D5E52CDEBFA23E98E0798755F8BAD6ACD01
D2444DAFD8864379E62AF> |-
/D <1C60D8A8C9B6FF868A10AD16A299A1260AEACE153450CF1D89F2CCE22D4E
9898FD15790AFC4AEC0CBAA04BCEBE8DFA4A75CA959F4AE08D28AF4C2F799500
C4FB05D6094B6FF04C4F42DB68CA1B994AE7E997C97BD1CE4B24F8AFD581CDD7
D8543CB3D2DE4AA19961FA17DE3F06392BDA62BEF16048B9A7450A76D274E11A
7C4787315463D3F9DB97B85FC11EC0DF86BA7AEDA46F79CB1BDF0DC32ACC68E5
5464EDCB1A186E944E2C1DC7AD19198FC1471502C1> |-
/J <1C60D8A8C9B81F2C36E06F48932CD52E5516EEB492630AE22D368A7FA440
E4A20A24FBC2BF3DEF374D4CAC6AEC6A6B90F5B26B940723611BCF866173E816
53A40ABDB6129B06ECB8068EB1D0B0F6A9EE377D7337E4BFC8B511CE93F6A792
BE58497B36775EAC8DE8781B967536D3AD851AA5> |-
/S <1C60D8A8C9B7EF32A5CE17E79E33571045E13295CB210A5EA41258E69E79
119343F259F998A51166ACE20B05B45C5D6052156E74BBEA7E128D87F7F3E6AD
A4DA2B38EB79F8FE8E0941CA7344C91B9616CBAA26C2272AAC596AD1464B2169
7452C5BE8B0397B89E1293B15399998F055A75962706A00BDE26F285F353EE58
56258EB93607AED499080F3601EAA757C0BA87> |-
/c <1C60D8A8C9B704CCCCAF7C44AC75C1A5378A8B597057F232ED2AF0223CF9
0FE99BE38D49B40A9F36C2163A8EB77297182865320197AC27DC6EA0B39C41D5
B5EDED62566BB849DA36BB889634B41C1D6867C83C186D23EF77AFA0A2A68DF6
D24BBC636E71315C0FC5D17E451D> |-
/d <1C60D8A8C9B7A73DCE8BA8860C516FBCC8331D0380F0654C91A07B867640
BD80F34181EF61F288AE2370727D6D037F71C0636E39D0523411E417B36DCC5C
86F123017356DC6D167D819C0540427AED15238AEE44DF40BA321FAF7D6AB793
45ED22F1C71DB996C1B5EB15FB6086A6DA410798D0922CFDE19C8232773C565C
5E40B6955B9655E8577E2F9FE238C007F356F03A8739B39DAB70599568F000E0
AE22EE5B7CBCC82F0BB3001BA0A4196121E190783E97CA3DBAF6EBF898BB0798
7516351B0013BBC1185DCE536C8C60> |-
/i <1C60D8A8C9B854D081E7D967DBB4F861AA90C6763196FA25E0974A0A50ED
974CD3377C24029821DBBEE0BA71957046B484BD03D289CBA21577FEDF4B4F46
F4EA4962803F02CD485C780B48B2BDADC270DCE99CF63B316B1C9E5E7F587768
B3D18137FF2C0373534A2E4DE447CAD3C09406A8B9B3CFD4A15028A35A356909
C24939664A03651FBCD9ECE206A19CA4B938DC8D1C> |-
/l <1C60D8A8C9B854D081E7D968072A76D477E98BA058FAED7DF2855EBCF785
C73C91BB8F353F9F5B591D6753250F86820155CDB69BE649F89847EEAEF7C7B7
28973627F3AFB4DB5882EA9B1753B8B2B2C7A4BEBE398DDB25A30D261C837C97
DCE376E81ADC732C082EEEE8> |-
/n <1C60D8A8C9B7EF325EAA3A327802CD836E30B5261FC73766AC12A7C6AFB0
B58F98EB8AE24233A31B020702C0CF567D5B6244B6E18CBC9084D90BAA20817F
6B20AD2B3E4147300EA8C26280ED7A4505938E2B16116527D6374BBED13436B1
F5E1420F68A9B16E8B7A1A6066655D52B73D8DAF8314CA9FC36A8C5A5B8EEB19
BB50400BE4AA0BC7BB89E9733FFD7C5274104111E9C2D8FB067A70E3BE56BD8D
0529911F5CCAC1CC23A4BFAA5F07E680ED36044C71D78E99944E5378> |-
/o <1C60D8A8C9B77FE2B99E96EA261DC1D487C7D9815EDAE18B8884D4316FA7
6EDFA8FAC01DEDA6D57247247CB98D4BF60191D0D75817123080DC66FB2FE4EC
E3BDBC10048C321DAB5C44655771B24FA703175A2E9A8EC6684BB58C3C8A9401
8E3600804197E01215F8E9F3B7EBA518E87F6E> |-
/u <1C60D8A8C9B7EF325EAA3A327802CDD7B39AB6050E51CEB44F1C5301EC4C
9333E92CCBA688C26CC4D7933AD1ED07EAE7E594E87934AD76E671D4F961DB13
BDAE45063C21BE598F22271C34DF44058EC0D23B7C2F3408A4127B88976BA8B8
72B1E9E52D181A264DDC22C466561F531AE9E53DFA95C199C8E7F1F5F4B5AFE2
158EE20CD32F4AF26FB2C140999807C7F7BABDB505758CDFCAFD9F51D4B2512B
75285C17C3B29FE845729E0258AD9D24C570E8014F31AF75DAABC1824047B98F
442966FE31> |-
/oacute <1C60D8A8C9B77FE2B99E96EA261DC1D487C7D9815EDAE18B8884D43
16FA76EDFA8FAC01DEDA6D57247247CB98D4BF60191D0D75817123080DC66FB2
FE4ECE3BDBC10048C321DAB5C44655771B24FA703175A2E9A8EC6684BB58C3C8
A94018E3600804197E01215F8E9F3B7EBA518E87F38F96086713EDF63517461F
26B9AEDB65B1B50C7D0FE3468208EEC729576> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBY+URWPalladioL-Ital /Encoding get
dup 46 /period put
dup 68 /D put
dup 74 /J put
dup 83 /S put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 117 /u put
dup 243 /oacute put
pop
%ADOEndSubsetFont
/FLKTBY+URWPalladioL-Ital*1 
[46{/.notdef}rp /period 21{/.notdef}rp /D 5{/.notdef}rp /J 5{/.notdef}rp /P 
2{/.notdef}rp /S 15{/.notdef}rp /c /d 4{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /o 2{/.notdef}rp /r 2{/.notdef}rp /u 
2{/.notdef}rp /x /y 121{/.notdef}rp /oacute 12{/.notdef}rp]
FLKTBY+URWPalladioL-Ital nf
FLKTBY+URWPalladioL-Ital*1 [7.97011 0 0 -7.97011 0 0 ]msf
270.965 424.616 mo
(D)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
279.983 416.039 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
285.68 411.53 mo
(2)sh
%ADOBeginSubsetFont: BBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleft <1C60D8A8C9B857441457F48D14F3F47B30BCEFA5B1BB16AB48
A411FDEDDBBCA4E8659FE72DCA596311382BB6> |-
/bracketright <1C60D8A8C9B857441457F48D14F3F47B30BD99EBE2CD4840C
E39569BE9FF8DDD4604DD868D11B34C9C90BD70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBZ+CMR10 /Encoding get
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/FLKTBZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 17{/.notdef}rp /equal 29{/.notdef}rp 
/bracketleft /.notdef /bracketright 162{/.notdef}rp]
FLKTBZ+CMR10 nf
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
292.421 416.039 mo
(+)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
303.653 416.039 mo
(y)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
309.242 411.53 mo
(2)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
315.677 416.039 mo
(dxdy)
[5.9129 5.83203 5.72385 0 ]xsh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
72.8575 442.823 mo
(donde)
[6.66893 5.95806 6.34502 6.66893 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
106.797 442.823 mo
(D)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
118.704 442.823 mo
(=)sh
%ADOBeginSubsetFont: TAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBV+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/multiply <1C60D8A8C9B6FC2DFBC0267A928374077F187731D1F55F0904A50
A9A1427588F3AE59D58029DFB1EB6D506B2B9F239B852BC50EFCEFB0B4481632
E42227D9C61DAA6494051D9F9E9821DE9F8C9C781F84E715DC390B6D21A1575B
C3B4F54E2C290296FBEBA6EA27F8C6EB49BA5DA4D88E3ACE7B113A16CD1AD510
73367AEEAE071AC8BCF259F3E12E32D5D9F51B202434CFFD4CE82> |-
/asteriskmath <1C60D8A8C9B7A73DE3A3AF60AAF70821FF4AD2E94C918348C
BCA8AEEF23022D8AA8DF6DF0AE38E6622D0A3A1CD179CD821E9291A6488142EA
BDD01DC6F036ED63BA374F078996C72B6E1A28ADB42EF534B8348B9F261E625C
F9485FF283EF9EEC8BC252098B852A73CB0A586A029F2D6602ADCE7AE7D46186
EC557D0B55E7D81AA5D29A7C0F3B0F143FF0E696EB5F2FFAEF3ED1B416A685A3
47A781FB6845F3BA6D4CF57672078A6D864A5AE04F001> |-
/lessequal <1C60D8A8C9B6FC2D944F5ADA1723A63EEFB5EFB5A4E3F88F7A8C
E8FA486CB3CC01EEA869AD308CC03B9D1111211DCD407425C635963FD7F9150F
1FBD1ACF38A1AE4207D9AF152444BD9DD8B01BDE5F620F6CD19263F98A2F18AD
CDAC42F6594BB6852F39DF6F7D1564BAE711AAF8D50C7841F847A8032B1E8699
602A6648> |-
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917
CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83
D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D
97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133
C46859EF9ACC558D046684C86AF46342> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E50297
25A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E4
8C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D
60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A70
95E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A7429856
03D0073C85F20BAEF47B61A9ECA7243ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBV+CMSY10 /Encoding get
dup 2 /multiply put
dup 3 /asteriskmath put
dup 20 /lessequal put
dup 102 /braceleft put
dup 103 /braceright put
pop
%ADOEndSubsetFont
/FLKTBV+CMSY10*1 
[2{/.notdef}rp /multiply /asteriskmath 11{/.notdef}rp /bullet 4{/.notdef}rp /lessequal 11{/.notdef}rp 
/minus /arrowright 16{/.notdef}rp /element 3{/.notdef}rp /negationslash /mapsto 46{/.notdef}rp 
/braceleft /braceright 152{/.notdef}rp]
FLKTBV+CMSY10 nf
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
130.836 442.823 mo
(f)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
136.793 442.823 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
141.671 442.823 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
147.368 442.823 mo
(,)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
152.048 442.823 mo
(y)sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
160.796 442.823 mo
(2)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
171.543 442.823 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
180.38 438.863 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
188.021 442.823 mo
(:)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
194.241 442.823 mo
(x)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
199.938 438.863 mo
(2)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
206.679 442.823 mo
(+)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
217.911 442.823 mo
(y)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
223.5 438.863 mo
(2)sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
231.15 442.823 mo
(\024)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
243.156 442.823 mo
(4,)
[5.45401 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
256.016 442.823 mo
(y)sh
%ADOBeginSubsetFont: JBAAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JBAAAA+CMMI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 62 /greater put
def
/FontBBox {0 -40 694 540} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.0437899 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/greater <1C60D8A8C9B6FC2D0B7AF226145EBD4699910182AA44364E214EF1
81E4EF11F09B1CDF639298183041F70F09788525763201782FEB13E6B9A6E060
7F78254829620D4125185763FF66F3C7816DADE29DCA0BAAC1CEA7127EAA9D5F
75E8> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLKTCD+CMMI10 /JBAAAA+CMMI10 findfont ct_VMDictPut
/FLKTCD+CMMI10*1 
[62{/.notdef}rp /greater 193{/.notdef}rp]
FLKTCD+CMMI10 nf
FLKTCD+CMMI10*1 [11.3673 0 0 -11.3673 0 0 ]msf
264.773 442.823 mo
(>)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
276.779 442.823 mo
(0)sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
282.368 442.823 mo
(g)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
288.191 442.823 mo
(.)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
62.3614 478.306 mo
(Soluci\363n.)
[6.06601 4.84201 3.03273 6.06601 4.43698 3.03273 4.84201 6.06601 0 ]xsh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
108.936 478.306 mo
(Pararesolverestaintegral,tomaremoselcambiodevariabl)
[6.58805 5.45402 4.31105 8.9099 4.11296 5.22905 4.62596 5.95807 3.17702 6.16502 5.22905 7.75826 
5.22906 4.62596 3.55504 8.90994 3.17702 6.34502 3.55505 5.22906 6.06601 4.31107 5.45398 3.17703 
6.18315 3.55505 5.95805 9.63 5.45398 4.11322 5.22906 9.62997 5.9581 8.08179 5.22906 6.62415 
4.84198 5.45404 9.62997 6.02994 3.17706 9.42291 6.66891 8.685 6.16504 5.45401 4.31107 3.177 
5.45398 6.02997 0 ]xsh
399.411 478.306 mo
(eacoordenadaspolares,es)
[8.67621 8.91916 4.84198 5.9581 5.95807 4.11316 6.66895 5.22906 6.34503 5.45404 6.66891 5.45401 
8.07294 6.552 5.9581 3.17697 5.45404 4.11292 5.22906 4.62598 6.18323 5.229 0 ]xsh
62.3615 494.56 mo
(decir,elcambiodevariable)
[6.66893 5.22905 4.842 3.17701 3.50102 5.44521 5.22905 5.90383 4.84202 5.45399 9.62997 6.02994 
3.177 8.68506 6.66891 7.94708 6.16502 5.45399 4.31107 3.17702 5.45399 6.02994 3.17702 0 
]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
213.75 522.271 mo
(x)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
222.615 522.271 mo
(=)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
234.648 522.271 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
240.957 522.271 mo
(cos)
[4.84201 5.95808 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
256.518 522.271 mo
(\()sh
%ADOBeginSubsetFont: DBAAAA+PazoMath-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTCA+PazoMath-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/pi <1C60D8A8C9B65B43908A61D8688CC3A669F39EA8A515F31CB8D0B2CE097
C7051442B2428241ABF2185148D3AE567C538DAAF31DF1B04D1A10B83B541F00
D266F6BC1C11FE49D0A366B98B62D779D5923775C0FEC42FC1F6C47D3701EDAB
C4B51B971028C8C8057984B68FDB38B436DF0DBC4BFE25F7CF3F8334A44ECA5E
69E690E6B0E762793C0582C0AAE0E1F66EC096C10B8199FA1877A970C1624EDA
25A8513A70C4270F6CFF859B545C8D067F8A162110B20F6F5894C1C25CEC7A53
6EE92F82C9F76D43D510951EB7B68A9B72586C78A0D337C60DD1FD0C532A5477
828A1486D8FC1842EDB02A4265E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTCA+PazoMath-Italic /Encoding get
dup 112 /pi put
pop
%ADOEndSubsetFont
/FLKTCA+PazoMath-Italic*1 
[112{/.notdef}rp /pi /theta 142{/.notdef}rp]
FLKTCA+PazoMath-Italic nf
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
261.207 522.271 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
266.643 522.271 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
293.004 522.271 mo
(y)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
321.021 522.271 mo
(y)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
329.778 522.271 mo
(=)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
341.811 522.271 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
348.12 522.271 mo
(sen)
[4.62598 5.22906 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
364.455 522.271 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
369.144 522.271 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
374.58 522.271 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
379.134 522.271 mo
(,)sh
62.361 549.982 mo
(esdecir,tendremoslafunci\363nde\002nidapor)
[5.22905 7.353 6.66893 5.22904 4.84201 3.17702 3.50102 5.4452 3.55505 5.22904 6.34503 6.66893 
4.11299 5.22906 9.62996 5.95807 7.34389 3.17703 8.18082 3.63591 6.57899 6.345 4.84203 3.17702 
5.95805 9.07201 6.66891 5.22906 6.59695 6.34503 3.17702 6.66891 8.18123 6.55197 5.95813 0 
]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
229.626 577.693 mo
(P)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
236.565 577.693 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
241.146 577.693 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
245.637 577.693 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
250.317 577.693 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
255.753 577.693 mo
(\)=\()
[7.71292 12.132 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
280.179 577.693 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
286.479 577.693 mo
(cos)
[4.84201 5.95807 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
302.04 577.693 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
306.729 577.693 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
312.165 577.693 mo
(\))sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
316.719 577.693 mo
(,)sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
321.29 577.693 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
327.59 577.693 mo
(sen)
[4.62598 5.22906 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
343.926 577.693 mo
(\()sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
348.615 577.693 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
354.051 577.693 mo
(\)\))
[4.68909 0 ]xsh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
363.294 577.693 mo
(,)sh
62.3607 605.395 mo
(para)
[6.55199 5.45401 4.31105 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
87.0029 605.395 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
91.5837 605.395 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
96.0747 605.395 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
100.755 605.395 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
106.191 605.395 mo
(\))sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
113.895 605.395 mo
(2)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
124.632 605.395 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
133.47 601.435 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
137.952 605.395 mo
(,conlocual)
[5.45418 4.84203 5.95805 9.08089 3.17702 8.67619 4.84203 6.57896 5.45401 0 ]xsh
258.453 621.658 mo
(det)
[6.66891 5.22906 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
274.032 621.658 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
279.378 621.658 mo
(J)sh
FLKTBY+URWPalladioL-Ital*1 [7.97011 0 0 -7.97011 0 0 ]msf
283.139 623.413 mo
(P)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
288.728 621.658 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
293.309 621.658 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
297.8 621.658 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
302.48 621.658 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
307.916 621.658 mo
(\)\)=)
[4.68909 7.69495 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
332.333 621.658 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
62.3602 645.688 mo
(para)
[6.55199 5.45401 4.31105 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
86.6692 645.688 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
91.25 645.688 mo
(r)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
95.7411 645.688 mo
(,)sh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
100.421 645.688 mo
(q)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
105.857 645.688 mo
(\))sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
113.57 645.688 mo
(2)sh
FLKTBX+PazoMathBlackboardBold*1 [10.9091 0 0 -10.9091 0 0 ]msf
124.307 645.688 mo
(R)sh
FLKTBW+URWPalladioL-Roma*1 [7.97011 0 0 -7.97011 0 0 ]msf
133.145 641.728 mo
(2)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
137.627 645.688 mo
(.Ahora,necesitamosencontrar)
[5.13036 8.48727 6.34502 5.95808 4.31105 5.45399 5.13045 6.34502 5.22905 4.84203 5.22903 4.62598 
3.177 3.55505 5.45401 9.62994 5.9581 7.01984 5.22906 6.34503 4.84201 5.95807 6.34503 3.55505 
4.31104 5.45404 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
288.611 645.688 mo
(D)sh
FLKTBV+CMSY10*1 [8.30486 0 0 -8.30486 0 0 ]msf
297.44 641.728 mo
(\003)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
304.595 645.688 mo
(talque)
[3.55505 5.45401 5.58008 6.11099 6.57895 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
339.848 645.688 mo
(P)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
346.788 645.688 mo
(\()sh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
351.693 645.688 mo
(D)sh
FLKTBV+CMSY10*1 [8.30486 0 0 -8.30486 0 0 ]msf
360.521 641.728 mo
(\003)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
365.408 645.688 mo
(\)=)
[7.71292 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
385.469 645.688 mo
(D)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
394.199 645.688 mo
(.Dadoque)
[5.13934 8.44202 5.45401 6.66895 8.36127 6.11096 6.57901 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
448.929 645.688 mo
(D)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
460.061 645.688 mo
(eselsemic\355rcu-)
[5.22906 7.01981 5.22906 5.57098 4.62595 5.22906 9.63 3.177 4.84198 3.13199 4.11292 4.84198 
6.57898 0 ]xsh
62.3604 661.951 mo
(lodecentroenelorigenyradio2,podemosverque)
[3.17701 8.68517 6.66893 7.94707 4.842 5.22906 6.34502 3.55505 4.11304 8.68523 5.22906 9.07218 
5.22906 5.89484 5.95807 4.31107 3.177 6.06601 5.22905 9.07191 8.79297 4.31107 5.45401 6.66895 
3.17699 8.67621 5.45401 5.4541 6.55199 5.9581 6.66891 5.22905 9.62999 5.95807 7.34381 6.16504 
5.22906 7.03812 6.11099 6.57898 0 ]xsh
FLKTBY+URWPalladioL-Ital*1 [10.9091 0 0 -10.9091 0 0 ]msf
251.846 689.653 mo
(D)sh
FLKTBV+CMSY10*1 [8.30486 0 0 -8.30486 0 0 ]msf
260.676 685.153 mo
(\003)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
268.596 689.653 mo
(=[)
[12.141 0 ]xsh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
284.031 689.653 mo
(0,2)
[5.45401 4.5451 0 ]xsh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
299.619 689.653 mo
(])sh
FLKTBV+CMSY10*1 [11.3673 0 0 -11.3673 0 0 ]msf
305.163 689.653 mo
(\002)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
316.395 689.653 mo
([)sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
319.689 689.653 mo
(0,)
[5.45401 0 ]xsh
FLKTCA+PazoMath-Italic*1 [10.9091 0 0 -10.9091 0 0 ]msf
329.823 689.653 mo
(p)sh
FLKTBZ+CMR10*1 [11.3673 0 0 -11.3673 0 0 ]msf
337.761 689.653 mo
(])sh
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
341.055 689.653 mo
(.)sh
62.36 717.364 mo
(As\355,tenemosque)
[8.48727 4.62597 3.13203 5.45411 3.55505 5.22904 6.34502 5.22906 9.62997 5.95806 7.3528 6.11098 
6.57898 0 ]xsh
.405 lw
525.2 717.364 mo
525.2 709.993 li
@
525.402 710.195 mo
531.954 710.195 li
@
525.402 717.161 mo
531.954 717.161 li
@
532.148 717.364 mo
532.148 709.993 li
@
%ADOBeginSubsetFont: VAAAAA+URWPalladioL-Roma AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FLKTBW+URWPalladioL-Roma dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC608352D722E57D2643C054EA4273C63B4EF228536
FDFD73233DFD497E80087B4F9BB3BAE019F7003F670BF3F1A3CEA49F4227D236
347C249C328781F9620B6BA609083D6BB1DA616EC119C6DA685475114200797C
88C86BDBE2EE17124CDC59218CCAF9317D62F35C5D884EA15A31BA784A2B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLKTBW+URWPalladioL-Roma /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/FLKTBW+URWPalladioL-Roma*1 
[2{/.notdef}rp /fi 41{/.notdef}rp /comma /hyphen /period /.notdef /zero 
/one /two /.notdef /four 5{/.notdef}rp /colon 6{/.notdef}rp /A 
/B /C /D /E 3{/.notdef}rp /I 3{/.notdef}rp /M 
/N /O /P /.notdef /R /S 13{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/s /t /u /v 2{/.notdef}rp /y 111{/.notdef}rp /eacute 
3{/.notdef}rp /iacute 5{/.notdef}rp /oacute 12{/.notdef}rp]
FLKTBW+URWPalladioL-Roma nf
FLKTBW+URWPalladioL-Roma*1 [10.9091 0 0 -10.9091 0 0 ]msf
294.912 808.201 mo
(1)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/FLKTBZ+CMR10*1 uf
/FLKTBZ+CMR10 uf
/BBAAAA+CMR10 uf
/FLKTBY+URWPalladioL-Ital*1 uf
/FLKTBY+URWPalladioL-Ital uf
/ZAAAAA+URWPalladioL-Ital uf
/FLKTBT+PalatinoLinotype-Roman*1 uf
/FLKTBT+PalatinoLinotype-Roman uf
/PAAAAA+PalatinoLinotype-Roman uf
/FLKTBU+URWPalladioL-Bold*1 uf
/FLKTBU+URWPalladioL-Bold uf
/RAAAAA+URWPalladioL-Bold uf
/FLKTBX+PazoMathBlackboardBold*1 uf
/FLKTBX+PazoMathBlackboardBold uf
/XAAAAA+PazoMathBlackboardBold uf
/FLKTBW+URWPalladioL-Roma*1 uf
/FLKTBW+URWPalladioL-Roma uf
/VAAAAA+URWPalladioL-Roma uf
/FLKTBV+CMSY10*1 uf
/FLKTBV+CMSY10 uf
/TAAAAA+CMSY10 uf
/FLKTCD+CMMI10*1 uf
/FLKTCD+CMMI10 uf
/JBAAAA+CMMI10 uf
/FLKTCA+PazoMath-Italic*1 uf
/FLKTCA+PazoMath-Italic uf
/DBAAAA+PazoMath-Italic uf
/FLKTCC+CMEX10*1 uf
/FLKTCC+CMEX10 uf
/HBAAAA+CMEX10 uf
/FLKTCB+FontAwesome*1 uf
/FLKTCB+FontAwesome uf
/FBAAAA+FontAwesome uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
