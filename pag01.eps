%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 01Notas.pdf
%%Creator: Adobe Acrobat 23.6.0
%%For: matda
%%CreationDate: 26/11/2023, 17:44:13
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2760 841.8900
%%CropBox: 0 0 595.2760 841.8900
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1293 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.2a0d8d9, 2023/03/14-11:19:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2023-11-26T17:42:46-05:00"
   xmp:CreatorTool="LaTeX with hyperref"
   xmp:ModifyDate="2023-11-26T17:43:40-05:00"
   xmp:MetadataDate="2023-11-26T17:43:40-05:00"
   pdf:Keywords=""
   pdf:Producer="MiKTeX pdfTeX-1.40.25"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is MiKTeX-pdfTeX 4.15.0 (1.40.25)"
   xmpMM:DocumentID="uuid:2a2ef57c-f274-42b2-906f-d87cf7d8ee98"
   xmpMM:InstanceID="uuid:2fa99f2e-93cd-481e-a325-ba0d5376e150">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.89 li
595.276 841.89 li
595.276 0 li
cp
clp
gsave
71.6711 82.0619 mo
189.308 82.0619 li
189.308 39.0667 li
71.6711 39.0667 li
71.6711 82.0619 li
clp
false sop
.903197 .747494 .142092 .0203555 cmyk
%ADOBeginSubsetFont: LBAAAA+PalatinoLinotype-Roman Initial
ct_T42Dict begin
-0.168 -0.289 1.418 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /LBAAAA+PalatinoLinotype-Roman
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
742002de08d300000124000004ee6670676d1f62e26c0000061400000628
676c79660000000000001ec400002e5868656164f47077be00000c3c0000
0036686865611287079c00000c7400000024686d74783fbb03b400000c98
000000406c6f63610000000000000cd8000000226d61787009e113090000
0cfc000000206e616d650000000000000d1c00000028707265709cd77718
00000d440000117d67646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005c900000000057d
002400620563001d0000039d001f000003b40018000003aa002000790000
ffdcffad0000ffe000000000ffdd0000fdc8000600000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000005ca057d03a502380375000000000000
000008000000080000000000000000000000000000000000000000000000
000000000000000000000000002800a700be00a700000000004300520043
000000000000000000000000000000b40044000aff4cffbcfff600fa0030
000aff06ffd0fff6025402b200000000000000000000000004b60392003e
ffc200d300ab00be005b00c0006600be00b000a7002b00a0005000ac00b5
00ae009e00a50000002d00b20055006b0053004a0043007a006100800046
00a0007f006800440081005a00c700c700a800a8004000000040003901f6
00950000000000000000000000ef00ef00e500b60213005400beff420000
000000000000000000000074007001a800e000a1009a0069009001660015
001000780088007f0069025d026c00320063005d00000000006e00000000
000002c100df00a803b0004c01cf03710095000000000007008a005200b4
00e100e1006e00ae008f003c00470054005f0097003d007b006d00b100b1
0052003300b20086008e01ef00ac009d00a00046008b0060009e004b0086
003800f2ff0e005a0045017c00540162002b005f0075004901db00b200de
01dc00cb01110083007101f201c901b500b60025008500c101f100520084
003f00bf00a60058008f0056007700d4008e009900a000ac005f004f021d
02580245023c00830074002b00550062002a0004021c023004610473007a
0030003f00300048003400960096007200da00d20079006c006601020069
00230077ff890022ffde019000720062006d005a002e001affe60018ffe8
ff7b0078003900340068008300740042005a004600450062021300560092
006c006f007e022a0570009203dd00b1008afe1500a8007d005f004c003d
005200fe00b000900088007e0074009c02a202a400320091024c00320292
002702a40002004c0053006a00330044003b00260050005601bf000002b9
004e00c60090005a00740021007e0204005202680068006b009d00850055
0043006d02d500e800730089003a00530066005905cd0072012101960153
00fa004100dc007e0057002d009a0069009a0049016301c2010800e1007f
0100013001c00079004d0055021e022a0064004b01b3009d0033008400e5
00b5005400b4003f003700b501fe00eaff16009b003fff0400bbff45008c
0038002e00a2016e004201b5037200c8005b00a501ad003b00b602ce0187
0140006e01b800b60049002101a800c300a60097011b005000b902920093
02fb003400af00660051003f00a300650090008c00950056007600b3007b
00b8009e008600a5009c006c00a9007b0084005e0090006601af01030043
00c800df00e70282004d003c019700470044013d003b004a008700410042
00b300a300af0090006600a0006c004f0085004100b300ce064406130681
ff8b019f018805f1ffa90054ff1003a003c20062ff9e0095048b04920607
05c904bfffec00480049003c009e0069004b006e0046007f046c0497ff70
05930866005000a90067ff990056ffaa01b9002b00b800af00c800cb005f
04f505d20438ffc3010803efff880602042b06030593ff1f00004030544a
494847463b3a3936333231302f2e2d2c2b2a2927262521201f1e1d1c1b1a
19181615141312110f0e0d0c0b0803022c01b01843584eb0032510f221b0
00124d1b2045b00425b00425234a6164b0285258212310d21bb0032510f2
21b0001259592d2cb01a435821211bb00225b0022549b00325b003254a61
2064b01050582121211bb00325b0032549b0005058b0005058b8ffe23821
1bb0103821591bb0005258b01e38211bb8fff03821595959592d2c01b018
435845646a23456469b01943646060b0462344231020b046f02fb000121b
2121208a208a525811331b212159592d2c00b0462370b101463e01b04623
70b10246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0
022523442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523
442121212d2cb000b0122b2121212d2cb000b0132b2121212d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb1
000325456854b01c4b505a58b0032545b0032545606820b004252344b004
2523441bb00325204568208a2344b00325456860b003252344592d2cb003
25204568208a2344b003254564686560b00425b0016023442d2cb0094358
8721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b047
23448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959
182d2c208a4523456860442d2c456a422d2c01b0184358b00425b0042549
64234564696120b080626ab00225b00225618cb0194360b0462344218a10
b046f6211b21212121592d2c01b0184358b0022545b002254564606ab003
25456a6120b00425456a208a8b65b0042523448cb00325234421211b2045
6a4420456a44592d2c012045b00055b018435a584568234569b0408b6120
b080626a208a236120b003258b65b0042523448cb00325234421211b2121
b0192b592d2c018a8a45642345646164422d2cb00425b00425b0192bb018
4358b00425b00425b00325b01b2b01b0022543b04054b0022543b000545a
58b003252045b040614459b0022543b00054b0022543b040545a58b00425
2045b04060445959212121212d2c014b525843b00225452361441b212159
2d2c014b525843b00225452360441b2121592d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4b505845441b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325465258b002
2546206861b00325b003253f2321381b2111592d2c2045b00325465058b0
022546206861b00325b003253f2321381b2111592d2c8a10ec2d2cb00c43
58211b2046b0005258b8fff0381bb0103859592d2c20b0005558b8100063
b003254564b00325456461b0005358b0021bb04061b00359254569535845
441b2121591b21b0022545b00225456164b028515845441b212159592d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2c4b5358b00425b004254964
234564696120b080626ab00225b00225618cb0462344218a10b046f6211b
218a11231220392f592d2c2121212121212d2cb0134358031b02592d2cb0
134358021b03592d2c4b53234b515a58381b2121592d2c4b53234b515a58
20458a60441b2121592d2c4b53234b515a58b0024358381b2121591b2121
592d2c4b53234b515a58b002435820458a60441b2121591b2121592d2c4b
53234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d
2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb00225b002
254964b0c05458b8ffeb38b015381b2121592d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d00010000000507aeb1b0afba5f0f3cf5081b
080000000000ad324dc800000000d60bd739fea4fdab0b5b086600000009
00020000000000000001000005dbfdba02aa0b2dfea4fea40b5b00010000
00000000000000000000000000100449003f07910026040000520364004a
02000000047b004f04d3001003d500330254002b0710002604cf00290254
002c04000052029c002e038d005002aa00ab000000520254028404da04da
06c408380a280b100d820fd0107813fc151e16f2172c0000000100000010
00b4001000a6000900020010002f00550000094f117d0003000100000001
001200020002000000060016000050616c6174696e6f4c696e6f74797065
2d526f6d616e401254dfe016171cd4d516171c7b7c161b7b7c19b80261b2
6f1d1fb80260b26c1d1fb80248b26f221fb80247b26c221fb80105b26e21
1fb8010440556b211fd1d216171c767716171c6d7016171c6c6f16171c1f
6c010f6f016b6e161b4f6e01af6ebf6e022f6ea06ecf6e033f6b6f6b7f6b
03ef6bff6b021f6b2f6b3f6b5f6b6f6b053f6b8f6bbf6bdf6b046b6e7f72
1ab801e2b268221fb801e1b265221fb8ffc0b3e64e4e39b8ffc0400ee54e
4e3997e6a7e60297e5a7e502b80244b268221fb80243b266201fb8024240
7369221fe6852b1fe5852b1ffb85211ff466271f747514151c676a14151c
2f693f69022066306602666914151c6568141baf68df68022f683f68028f
689f68bf68033f68ef68ff6803406537373900654f655f659f65a06505af
65010f65017065a06502656885711a1973167a43192179431921b80275b3
03361f2f41270274006f02740002002f0274003f02740002002f0273004f
02730002004f02730001001f0273003f0273005f02730003002f0272006f
02720002002f0272003f027200ef027200ff02720004021eb3af361f6f41
330270008f027000af027000cf02700004000f027000010040026e005002
6e0060026e0070026e00040000026e0010026e0020026e0030026e000400
0f026d004f026d00c0026d00030090026d00b0026d00ef026d0003001f02
6d003f026d005f026d0003026cb303211f0f410f026b008f026b0002001f
026b003f026b006f026b00ef026b000400400250b2292a39b8025cb20426
1fb9ffc0022cb2262939b9ffc0022cb2171b39b9ffc0022cb2091239410a
0171015e002b001f013101300057001fffc00138b2494a39b9ffc00135b2
484939b9ffc00130b2484839b9ffc00130b2434339b9ffc00130b23c3c39
b901480147b2571fef4118013b0001005f014700cf014700f00147000300
4001300001001001300080013000b0013000c0013000f001300005fff0b3
a75c5c39b8ffdeb3a75a5b39b8ffc0b3a77e8539b8ffc0b3a7363a39b8ff
e8b3a6303239b8ffd4b3a6535339b8ffc0b3a6707539b8ffc0b4a6505239
00410a01c5000100a001ed00b001ed00c001ed000301d4b27d361fb801d3
b2911c1fb801d1b27f2e1fb901b001adb21e1f40b801abb2575b39b9ffc0
01abb343433940b801abb2404239b9ffc001abb33a3a396f411801ab007f
01ab00cf01ab00df01ab0004005f01ab0001004f01ab00d001ab00e001ab
00f001ab000400a001aa0001ffc0b3b0747539b8ffc0402daf74753970b0
80b090b00370af80af90af035fb06fb07fb08fb004e0b0f0b002e0aff0af
02b0af181faf85181fb8019fb2be411fb8019db2be411fb8019ab2bd211f
b80199b7bd461fbdbe461f40ba017c0050017c40100250bf0130be40be02
80bfd0bfe0bf03bc019501940041001f0194b3cf271f9f410e018e00af01
8e00bf018e0003006f018e007f018e008f018e0003ffc04023b53a3a3940
b580b5dfb60320b53fb60270b6bfb6e0b6ffb60420b630b660b6a0b50440
410a018b0070018b00a0018b00d0018b00040040018bb23b3b39b9ffc001
8bb2424239b8018f400bd0371fd0cf371fcdcc371fb8ffc0b3cc3f3f39b8
ffc0b3cc101139b8ffc04014cc13183910cc40cc0230cc40cccfccffcc04
127041100137008001370090013700030020013700300137004001370050
013700600137b5059f9aaf9a02b80172b310131f0f41230254001f025400
0200ef025400ff0254000200af025400bf025400cf025400df0254000402
5401b30046001f016e015e004d001f0162015e003c001f016f013a003400
1f0170b207341fb9016b015eb21a1f40b8015eb23b3b394146015d015000
1a001f01420135002c001f01360140002b001f013e0133003d001f015601
33001d001f01540133002c001f014501330014001f014401330014001f01
4901330036001f014b0133001e001f014d01340046001f013b013a005700
1f013a012f0057001f013201300057001f013101300057001f0145013400
3f001f01440134003f001f01330134b3591f1270bc022d0080022d009002
2db403f0980190410b01c400a001c400b001c400c001c400d001c4000501
c4b37f1c1f004113023a0010023a0020023a0090023a0004000002390010
023900200239009002390004023a0239400d1e1fb091c091d0910397951f
1fb80110b6a3211f9e91201fb8011d402c91121ffd952f1f4f3c01203cdf
3c02b03cd03c023c0f121f9493001f9293211f9193001f9395001f96951e
1fb9ffc001ffb23d3f39b9ffc001ffb2535439b801ffb285361fb80269b2
7d361fb80268b28b331fb80267b28b331fb80266b38b331f40b801e9b264
6439b9ffc001e9b25c5c39b9ffc001e9b2585839b9ffc001e9b34f4f3940
b801e9b24d4d39b9ffc001e9b2444439b9ffc001e9b342423940b801e9b3
3f3f3900411501e900a001e900d001e90003004f01e9006001e900ef01e9
00f001e90004000001e9007f01e9009001e9400a03008801e088f08802e0
412501a200f001a2000200af01a200bf01a200cf01a200df01a200040000
01a2004001a2007001a2008001a2009001a20005006001a200a001a20002
00af01a100bf01a100cf01a10003025fb3833e1f00411201ee0001006001
ee000100d001ee0001003001ee009001ee00a001ee00b001ee00040232b2
85181fb9ffc001ccb343433940b801ccb342423940b801ccb33a3a39df41
2c01cc0001003f01cc007f01cc0002007f01cc00ff01cc000200c0018700
01009f018700af01870002006f0186007f0186008f01860003009f018600
af0186000200bf018600cf01860002009f018600af0186000201de01e340
0b361f10c501b0c50190c401b8ffc04009c4404139c4851d1f30ba025600
400256400d0230e740e750e760e770e7055f410a0182006f0182007f0182
0003009f018200af0182b5025fa46fa402b801a5b285211fb9ffc00240b2
1c2339b9ffc0023fb31c2339bfbd023f0001000001b200010222b27d301f
b80221b27d301fb80220b37d301fa0bd01fb00b001fb0002004001f6b375
763940b801f6b2505439b8021bb285261fb8020fb285261fb80217b28526
1fb80204b2834c1fb80215b285261fbc021202110026001f020cb285261f
b8020ab285261fb80208b285261fb80211b283331fb801f6b27f421fb902
40023fb2241f60411f023f0070023f0080023f0003002f023f003f023f00
02000f023f001f023f0002001001b900b001b900c001b900d001b9000400
3001b9004001b9000201b9b2851c1fb801f0b283481fb801ebb283481fb8
01dab67f331fa985191fb8ffc0400f5c3f3f39d05c01d87f321f8c89181f
b80123b2892c1fb8012ab2891b1fb8012bb2891b1fb80122b689321f8a89
321fb80128b38b121f00412b011200300112007f0112000300af011200f0
0112000200d0011700010000011700100117002001170030011700400117
000500c0011700f00117000200600117007001170080011700a001170004
00a0011700010113b2a3211fb9ffc0010fb343433900410a010f0050010f
008f010f00d0010f000400400118b2646439b9ffc00118b25c5c39b9ffc0
0118b353533900412101180030011800b0011800c0011800d00118000500
90011800a0011800020000011800100118004f0118005001180060011800
05006f011800c0011800020040010fb3646439504111010f00f0010f0002
0020010f005f010f006f010f00b0010f00f0010f0005ffc00100b2757539
b80100b2a3361fb9ffc00196b2757539b9ffc00196b2434339b9ffc00196
b35a5a3940b80196b34d4f3940b80196b34a4b3940b80196b34040397f41
1d01960001003f019600df019600f001960003000f0196004f0196005001
9600600196000400000196006f0196000200d001e300e001e30002ffc0b3
a2757539b8ffc0b3a3757539b8ffc0b3a2535339b8ffc0b3a3535339b8ff
c0b3a2434339b8ffc04063a3434339dfa30160a260a370a270a380a280a3
06a0a3b0a3c0a3d0a30400a2a0a2b0a2c0a2d0a20530f340f30220a130a1
40a10320a030a040a00310a1b0a1c0a10370a180a190a1a0a10410a0b0a0
c0a00370a080a090a0a0a004fa852d1fe483361fb801e6b2852d1fb80230
b2851a1fb80249400b851a1fe9851a1ff67f361fb8012c408a89221f8d85
361f8b85361f8985361f6c817c818d819a81ab81bb8106817f371f7d7f37
1f407f505039407d3f3f39407f4345396f7f7f7f02cf7fdf7fef7f039b87
ab87026b877b878b87b987047f85301f8785361f8483371f83853e1f4085
6868394085585b3940854f4f394085424339af85bf85cf85df85ef85050f
851f85025f85ff85029f850110b80246b235210fbc024500350021ffc002
46b2414139b9ffc00246b33f3f3940b8024540264c4c39114319211b3715
1836151535151234150f33150c3215093115063015032f15002e1520ba02
5900010259b211181fb8024bb211141fb8024ab3110f1f904122024e00b0
024e00020020024e0040024e0050024e0070024e0004000f024c002f024c
000200ef024c00ff024c0002002f024c003f024c006f024c00af024c0004
ffc0024ab2181839b9ffc0024ab2161639b9ffc0024bb2181839b9ffc002
4b4009161639401119193900bd023e0010023e0002ffc0023eb3272b3940
b8023bb30f113940b8023db31e1e3940b8023db2101139b80241b205281f
b8023db205121fb8023cb205181fb8023bb305181f40b8023cb318183940
b8023c408c2e2e394005161f3926270f28270f2a2b0f2c2b0f22230e2423
0f1e1f0e201f0f0f10110c0c0d0e0c090a0b0c0607080c0001020c060327
1f2000016f00010003131fd01301df04010304050cd003013f039f03cf03
ff0304900f010f0f013f0f5f0fef0f030f191f192f193f194f195f1906ef
19ff19021b011d0d18071a0d0704321f1510170d1204140d16b8015cb232
1f10b8015bb2321f13b8015ab2321f04b801594014321f1b3b321f0f3a32
1f0339321f0038321f5033b1020042b21711018820b022518a2378b04052
78b10a2088b810005578b1020142b0031c212101b0124b004b5442b01301
4b004b5342b0332b4bb8032052b0322b4bb009505b58b101018e59b0332b
b00288b8010054b00488b8020054b012435a5b58b80119b101018e851bb1
0501b80100b04b60858d8d592b1db0644b5358b0801d59b0324b5358b090
1d59002b2b2b2b2b2b2b2b2b2b2b2b2b747573747573742b74742b73742b
2b2b2b2b2b2b2b2b2b2b2bb1282645b02a4561b02c4560442b2b2b2b2b2b
2b2b2b2b2b2b2b742b2b2b2b2b73737473732b2b2b742b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b01737475752b2b2b2b2b2b2b2b747474752b2b2b2b2b
742b2b2b2b2b2b2b2b2b2b2b73747374747474737374752b2b2b2b2b2b73
737474752b2b2b2b2b2b2b2b73742b737474752b2b2b752b2b7374747575
73742b2b2b2b2b2b2b2b742b2b2b2b2b2b74757373752b2b2b2b2b2b2b2b
2b2b2b2b2b2b732b2b2b73742b2b2b75737474742b2b7573742b73737475
73747374752b2b2b2b737374752b747374747374757374752b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b7374752b2b2b2b2b742b73732b75
74754358b900400134b35f603940b80134b2494f39b9ffc00134b31b1d39
40b80134b33b3d392fb901340001752b2b2b2b592b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373742b7373744358b90040014cb3
70713940b8014cb346483940b8014cb34b4b3940b8014cb353533940b801
4cb2393a39b9ffc0014cb33c3c390f411d014c001f014c0030014c000300
30014c0001000f014c001f014c002f014c003f014c00040030014c004001
4c00af014c00ef014c00ff014c0005737474752b2b2b2b2b2b5973742b2b
2b2b2b2b2b2b74737374752b74742b2b737475732b2b2b2b2b2b2b747473
75752b2b737374752b2b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b74747374
2b2b2b2b2b2b2b2b2b2b2b2b2b73742b737374737373732b737473747573
742b012b2bb018b0384b53422b2b737474752b737475752b2b75752b2b2b
2b2b2b2b2b2b75752b2b2b2b2b737474757374752b73732b2b2b2b2b2b2b
2b2b2b2b2b2b2bb109322b4bb03152424bb03c524bb00f505bb01a23424b
b0c8524bb036505bb00c23422b00000000>
[11865 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 4 <> LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 164 1 <00010026ffe4076205820051030db90025fff0b314143a25b8fff0b31c1c
3a25b8ffc0b3191d3a25b8ffe0400e17183a4b10191d3a4b20151d3a4bb8
ffc0406325273a254025273af94b01d64b011425d4250224254425842503
0925192502094a194ad94a0309cc25015c1e01651e014a0813133a490813
133a480813133a210814143a4a10181d3a4910181d3a480c181d3a4a2215
173a492215173a482215173a4cb8fff0b312143a4db8fff0b312143a4cb8
ffe8b3151d3a4db8ffe8b3151d3a4eb8ffe8b31d1d3a22b8fff0b3171d3a
23b8fff0b3171d3a24b8ffe840d8181d3a464e564e664e036b4d01544d01
664c01fb4b01b94a01c84a01274a01491014143a964901064816482648f6
4804394901394a01354c554c022622362202b622d622f62203fa21012824
013b2401252401c724013922011922f922021921018821013b2301ab2301
77238723020722017722872202882001fa2001881f01571f671f02371e57
1e02641e01bf53010f534f530200530160539053024b251e03483121af22
bf2202220e18a61115e1132b36a62e33e13141a64403a600004ee1504844
e14650034603131231124b4b093b161014153a16b8ffe8b712133a16a01e
0110b8fff0400c14153a101812133a10a1092db8fff0401214153a2d1812
133a2da02543341014153a34b8ffe8401912133a34a14822214e041e2580
3b1e2025273a1e202f303a1eb8fff0b318193a1eb8ffe840151a1d3a1e7f
401f09010f091f094f09030b03095309b80105400f02003b503b803bf03b
040c033b523bb9010400022b01182f5f5e5d2b01182f5f5e5d711a4ded2b
2b2b2b10ed111739f42b2b3c10e42b2b10f42b2b3c10e42b2b111239192f
00183f3f3f3f10f63c10f63c10ed10ed10f63cfd3c10f63cfd3c2f713c11
121739b02d4b5358401b4e4b4e504b82211e14214b4a211e254b484b8122
2514224b4c222587082e2b87047dc487082e182b087d10c4593130015d71
5d715d5d5d5d715d5d715d71725d7171725d717271715d715d7272715d2b
715d71715d5d715d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00715d5d
5e5d5d717271712b2b2b2b2b2b2b2b011715070e030711141e0217171507
262322072735373e0337110102072326270111141e021717150727262322
072735373e03371134022626272735371633323716170101123716333207
5909086e35160304061332750809a37952c509086e35160403fea7826127
3824fe2205143275080940634720cf08086e341703030513327508094575
6e52544d017b01568b30605d5405820831070310256cfbfe3364fc291303
07310809090830080310256ef902defd2efef1ef814d03e1fd4562ff2814
0208300903050808300902102668ff01ca5b01052914020830090505c29d
fcf602c901217f05>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 8432 12 <00040052ffc403cf03f8002a0032003300340661b90019ffe0401826263a
221014143a312c1a1c3a312c1e1f3a312c32323a1eb8ffe0b31e1e3a1eb8
ffe8401d1b1b3a08401d1d3a31101b1b3a312017193a03181a1c3a030813
143a02b8fff8b313133a01b8fff8400e13133a07181b1c3a071815183a1e
b8ffe8400918183a221818183a1ab8fff0b312183a19b8ffe8b316163a19
b8fff0b318183a32b8ffe8b318183a22b8ffd4b318183a2cb8fff0b31818
3a03b8fff040ff20203a0a0301128b0301c91b01062c011ec82b01682b01
a52d01091d01300f030153de3201da31015a3101d032019f19019f3201d0
3201d01901541964197419035a2c010c32ac32bc32cc32040db63101092f
01170b2d01466b2d010b2d4b2dbb2deb2d040c062c0153362c01192c492c
d92c03092c192c692cc92c040d3b2c4b2c8b2cbb2c040a2c1a2c2a2c5a2c
6a2c9a2cca2c0715792801062816282628031729243924020d244d245d24
8d24042e0a241a2402434a24ba24020a241a242a244a245a24da24ea2407
0f24182f32480922015319222922022922b922f922030922a922020f0522
1522d5220346252275228522033522010522a522c5224031e522f5220514
0b221b223b22031d2220161a480622d622025a5a21014a21010321011e06
2101679621a621020621011221b8fff840b11012362c1f4c1f02091e011e
d31e01031ec31e023f031ec31e02461e561e02361e461e021e200b10364b
1b5b1b02e91901071a010d198d1902041914192419b419040a091a012a07
183a3c3607182e32360a0701536a07010a074a079a07031d040701600407
010b040814089408a408041f0a080153ea08011008012903010320131948
3d034d03023a037a03022a034a036a03030a031a032a03031c0a19012e28
18151d3a2918151d3a2a18171d3a04b8ffd0b31a1d3a04b8ffd0409a1212
3a2a2012153a000401062a01062901538604b604020625011b062f014b09
2f01189622010922011d291a01091a012e061a013a891d01060726073607
4607d607e607060a590699060205060145068506f5060393040103048304
c304031900040143e004010f362f36020a00360153203650368036030036
20366036a03604096a2001ea20011520012e2005341c33321930032a0102
0300b8ffc0b315163a00b8ffc0403a1d1d3a6f0001df00010f001f00020c
00401a1d480040131648000510a7131317e1150b2b015c4c2b01de2b010d
2b01062ba62bb62bc62b04262bb8ffe8404c2b2b3a052b0153072b01072b
c72b02222befa8230101230124022301534a23017223e223026023012323
0509300117c6300102301230021e30101c1d3a300817173a30961c151509
1c012a1cb8fff8402c17173a1c160726012e002601586026012626012626
3626024d260128263826020c261c26021e261620203a26b8fff8b3191a3a
26b8fff040261c1d3a269c051034340a333320090a1718320f120140c012
d01202121814143a121815183a12b80102402f0a2a6f027f02af02030f02
1f02020b0002400202219002010002015c100201d002e002020002300240
025002042202b8ffc0b70e11480220192332b8ffe8b31d1d3a32b8fff040
381b1c3a3285000a0140600a01000a010f0f0a014f0f0a2f0a3f0a8f0abf
0a05ff0a010f0a010c0a132e01602e01e02e01192e01092e01322eb8ffec
40381e203a2e141c1d3a2e141a1b3a2e1019193a2e0615153a2e840f201f
202f20033c6f20af20bf20cf20041f203f20022020019020a0200220b8ff
c0b40d104820048d2f2b5d725d715e5ded2b2b2b2b2b5e5d725d7271d45e
5d71725e5d5e5d715e5dfd2b2b3c3c10c42b5e5d71725e5d715e5d5e5d71
3210e42b2b5d5e5d10c43210c512392f11392f003fed2b2b2b5e5d5d7171
72725e5d5e5d3f2b5e5d3f10ed2b2b5e5d5d5e5d12392f5d5d5d5e5d5e5d
5ded5e5d715e5d2b5e5d715d715e5d10f63c10ed10c42b2b5e5d71722b2b
173233113333ce10ce1239397171723130015e5d715e5d5e5d715e5d5e5d
715d71715e5d725e5d5e5d715e5d715e5d5e5d5e5d5d5e5d5d5d2b2b2b2b
2b2b005e5d5e5d71725d2b5d5d715e5d5e5d5e5d5e5d5e5d725e5d2b2b5e
5d5e5d72725d722b7172725e5d715e5d712b5e5d725e5d5e5d71725e5d2b
5e5d5e5d71725e5d5e5d71725e5d2b5e5d715e5d5e5d5d5e5d5d5e5d5d5e
5d71715e5d5e5d725e5d5e5d715e5d5d5d71717171715d71715e5d5e5d5d
5d725e5d5d5d5e5d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b1327273536333216161507111416161f0215072623220727370706
23222626353436253426232206060705040615143332370303d42708b2a8
7398440511161e390808493f3c540f04da374150733db8019a846f3a5f0e
2f01c9fee88a9b8582aa1502a60a0a7c84568156c9fed63d1a0903050928
0806060ea1aa173a684a93a53a9479221570a32f6c719c9a02fefbcc0000
>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 10812 14 <00010050ffe1036403c20024033840100e2015153a20101f1f3a1e2c1f1f
3a23b8ffe8b318183a1ab8ffe8b315153a1ab8fff0402c18183a081c1313
3a091c13133a0a1c13133a001c12143a0f2015163a0f0814143a0f101818
3a231818183a05b8ffe8b31c1d3a05b8ffe8b313133a05b8ffd440961718
3a290b010b0f01291701661e01162001190599050219049904028904018f
05018a20018901019901a901b90103a90901750a01a50a01a62301e61b01
f40501550901f31e01141e641e02641e741e02172201c616d61602161b01
f61b01d40e01c40e01020952096209c209d20905020932097209f20904a2
0901730801a30801550801f50801500501c605016b057b05fb050301b8ff
d8b30d114816b8ffe8400e18183a192c191d3a1a2c1a1d3a04b8fff0400f
17173a191818183af61d0199010124b8ffd0b312174823b8ffe8402e1219
48aa01ba0102aa1aea1afa1a03e30bf30b02561e01d61ee61ef61e03a61e
b61ee61ef61e04e51f01351f011fb8ffc6406c1d1d3a4e1f017909010905
013905010905c905d9050309cd04010a041a046a04033a044a045a040310
26010026f02602120f2601400f261f263f264f266f26df26062f26010f26
1f262f26bf26df26ff260601030070240124210f1813401b1b3613401d1f
36134011193613b8ffc0401519193ab013c013020f130113bd18cd1802f6
180118b8fff0b330344818b8fff040271c1f4818970d7621010921015f21
6f217f210321141b1b3a21101c1d3a219c03160d1086140114b8fff04034
262a4814ea801101110f01240f0f003f006f00039f00ef00024000700090
00c000d000e000060000200070008000a000050a001cb8ffe840331e1e3a
1c181c1d3a1c141a1b3a1c1018193a1c0615153a131c01931c01391c011c
e440cf06df0602030f06011f0606250666022b01182f5f5e5d5f5d1a4ded
715d722b2b2b2b2bd45e5d7171723c323210d671ed2b72003f3fed2b2b72
727110ed2b2b5d72c45d5d2b2b2b2b123910c65d3912393130015d71725e
5d5e5d715d71715e5d71725d712b5d715d71725d5d5d2b2b5d712b2b2b2b
2b002b5d5d7271725d715d71725d715d725d727172715d715d715d715d5d
71717171727272717171712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2507
0623220235343e0433321706070723272e022322060615141e0233323637
036428819fdcf0293f4cb55c519b63130a092909040e915252804134558c
563667436b43470106cf5e936038641f3b718b0809543a42459d6d5caf73
461c20000000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 4208 7 <00040033ffc4039103f8001f002c002d002e034c401510101b1b3a101817
173a1b1017173a1a1017173a02b8fff04014191d3a0c1018183a000c171d
3a352c018a2c0106b8ffd4400917183a0b1e1b1e0202b8fff840be121548
29003900490003451f013a2b01261e361e461e03251f351f451f03090129
0139014901040a1d1a1d021206060113070601150a1b011d861101041a14
1a022009060160090601250601240a01092c01062c0106020118f6100109
101910a910031f040b140b640b840b042a060b0160460b560bc60b038a01
018a1f01861b011c2801da28ea28028a28013a078a07026a077a07ca07da
07042606010a06012a06010a066a067a06ca06ea06fa060609741a01041a
141a241a030c1eb8ffe8400917173a0118171d3a1fb8ffd04053171d3a59
0101f91a01261a01861a01280601060c01050b01590501a92b01ce2b01a6
0db60d020811010a2901a60f01703001003020304030d030040e0f30015c
bf30013040090c482e042d0e2520141523181fb8ffc0404b0c1036901fb0
1fc01f031f1c4023012395001810184018501860189018a018d018e01809
0a18180e1c08191b3a1c101c1d3a031c015c1c182b2f48691c01cf1cdf1c
021c9c0416f92a012ab8fff8400b1d253aac2a01072a01242ab8fff04029
252a48052a152a252a032b2a95070e01530e102e2e082d2d120820192527
011fbf00cf00ef00030027b8ffe8b31c1d3a27b8ffecb31a1b3a27b8fff0
b318193a27b8fffa400e15153a27835f127f1202df120112b8ffc0b3191c
3612b8ffc040651012365012c012d01203001220125012e0120409121219
181c1d3a19141a1b3a191018193a190615153a19102e32480719011e2919
0108191819022419830808012a08403436363f087f08bf0803af08010f08
1f0802399f08ef08028f08010840090c48082f2b5d725e5d71722b5e5ded
5e5d5d5e5d2b2b2b2b2b332f5e5d712b2b7172ed2b2b2b2bc47132321133
103c1112392f11392f003f5e5ded5e5d2b5e5d5d2b723fed5d5d2b5e5d2b
2b12392f5e5ded7210c6712b11123939323210ce10ce3130012b5d5e5d5e
5d7171727271715d7171717271725d5d2b2b2b005e5d715e5d7172715d71
5d7172717171715e5d5e5d5e5d5d5e5d5d717171715e5d5e5d5d5e5d5e5d
015e5d5e5d5d5d5d5d5d005d2b5d2b715d2b2b2b2b2b2b2b250706062322
262635343e03333216161514070706062321161633323637011616333237
36353426232206010303742068a34078d787343988985878b74a030b44e6
25febf02cc94468148fd8f12f13a8b1e017e6d778501170c934843285ee0
9e69a952643c71b0631f1d0b0f0acfc4302b0188030805180d9b97aa0125
fbcc>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 5200 8 <0003002bffc402220578000b003100320137b50d08121d4831b8ffe84009
121d480228121d4804b8ffd84009121d480a28121d4808b8ffd8400e121d
480210121d480410121d480ab8fff0b3121d4808b8fff0401a121d480f34
012404340164fb3401e0340102321b00e660060106b80111b50c0d0c2da7
30b8010140120c1620a7191de11b150c10323210260c0d18b8ffe8401117
183a181814163a18a3102e1817183a2eb8ffe8400b14163a2ea31e181718
3a1eb8ffe8400914163a1ea32609e503b8ffe8b31d1d3a03b8fff0b31b1c
3a03b8ffc040243344360310181d1d3a10101b1c3a1085400f2601240026
013203262634688508332665022b2b01182f5f5e5d5e5d1a4dfd2b2bd42b
2b2bed10e42b2be62b2b10e42b2bd6cd1112392f003f3ff63cfd3c10f6ed
123910f65ded10ce3130015f5d725e5d5e5d2b2b2b2b002b2b2b2b2b2b01
32161514062322263534361317061515141e031717150726232207273537
3e043535342e022327273537361301202f42422f2e434383130b0809121a
5f09087d74737d0909611913070908051a27540908bf350578422f2e4241
2f2f42fe410d83cae216ef28120506082a090808092a0806061327db38c5
288a200f01082b0817fc3f000000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 8096 11 <0001002cfff8022305c9002500da40300525152525250313030108131d48
1725010725472502190f27012400270132020f270153010021a70f24010e
6f240124b801014014000a14a70d11e10f150000000104221817183a22b8
ffe8b614163a22a31a0cb8ffe8401117183a0c1814163a0ca30412181718
3a12b8ffe8402a14163a12a304181d1d3a04101b1c3a0485406f1a010f1a
0124001a801a022a031a1a27688508261a65022b2b01182f5f5e5d5e5d5d
1a4ded2b2be42b2b10e42b2b10e62b2b10d6cd003f3ff63cfd3c10f65d5e
5ded12393130015e5d5f5e5d5e5d005e5d712b5f5e5d0117061111141e03
17171507262322072735373e043511272e0323273537360176130b080912
1a5f09087d74737d090961191307090403070c1e6a0908bf05c90c73fea6
fd8d16ef28120506082a090808092a0806061327db380206d46f56100809
2a0916000000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 5664 9 <00010026fff806e203bb007103b440ff032021213a042021213a03201818
3a0571157125710312060b0106030153352b452b023a0b4a0b023a054a05
023a044a04023a034a0302374c474c02060c160c02044b144b02094c194c
02370a01690d010d101216485712671202a92b010c20121648042b142b24
2b036609016610016612010511151102050a150a020b201215480108121d
4806101216480a051a052a05030c041c042c04030a031a032a0303044c14
4c244c03120b0a0126190a01090a01320c1101536c1101ac1101167101e9
4c01e60c01e30b01110b01160d01130c01162c01140601e6050113035303
e3030314045404e40403d50b01c92b01c90c01c40301144d01c44d01042b
1440a72b242b030c0612161202200a2701437a278a27026a278a279a2703
7948894802694889489948030311131123110309090b0112050b750b850b
0319040a013aa40ab40a02040a140a020a3f738f73021f733f73af73cf73
df73ff73060f732f735f738f739f73050d0073013f50736073029073b073
d073f07304107330730200732073f07303090b083a034a1aa71d1d21e11f
15353fa7383ce13a155660a7595de15b156da770b8010140180100100c29
014b29101b1b362929010f2901180229012829b8ffe0401a17183a29980f
100c4a014b4a101b1b36194a01ff4a01f24a014ab8ffe0b717183a4a9808
101cb8ffe8400917183a1c1814163a1cb80100b5150037010937b8ffe840
1117183a371814163a37a32f3d1817183a3db8fff0b614163a3da24558b8
ffe8401117183a581814163a58a2506e1817183a6eb8ffe8400b14163a6e
a35e1817183a5eb8ffe8401314163a5ea36615181d1d3a15101b1c3a1585
24b8ffd0b31d1d3a24b8ffe0b31b1c3a24b80196400d2f181d1d3a2f101b
1c3a2f8545b8ffe8b31d1d3a45b8fff0b31b1c3a45b80196403a50035000
0150181d1d3a50101b1c3a50854000664066d066034b1066906602406650
66906603006610663066a066d066f06606190366726665022b01182f5f5e
5d71725e5d1a4dfd2b2bd4cd123910f62b2bfd2b2bf62b2bed2b2b10e42b
2be62b2b10e42b2b10e42b2b10e42b2b5e5d10e42b2bb0844b5358b12224
7d10c65900183fed2b715d722b5e5d3fed2b5e5d5e5d712b5e5d3f33f6ed
3ff63cfd3c3ff63cfd3c3ff63c10ed11331112393130015e5d7171725e5d
5e5d71725e5d715e5d5e5d5e5d005e5d5d715d715e5d5e5d5e5d5d715d5d
5d5d71717171717171717171717171725e5d5e5d725e5d5e5d5d5d5d2b2b
2b71717171715d2b5d5d2b715d015d5d5d005d5d5d5d5d5d5e5d5d5e5d2b
2b2b01170607373e02333216173e0233321e021515141716163317150726
2322072736353534262623220e021515141e031717150726232207273537
3e04353534262623220e021515141e0317171507262322072735373e0435
35342e0223272735373601701306025f281a6035649624872d62314f844e
0d0602266808087f2d19780d0d1e6e4c365e4b08080913195f09087d746b
85090961191307091f664d3c633f0f080913195f09087d74737d09096119
13070908051a27540908bf03b90d425c5725151c6357801c1d446e807069
11e85f24082b0808080b82d1789f7f512b5549627d2cf228110506082a09
0808092a0806061327db3872717a542f453c64942cf228110506082a0908
08092a0806061327db38c5288a200f01082b08170000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 6916 10 <00020029fdc0047c03c5003a004c03c3b90010ffe8400912123a04181212
3a3cb8ffe8b312123a18b8ffe8b312123a12b8fff0402013133a76100176
1101780101e918f918020c401c40021c3f0196110196100100b8ffd0401b
121d488c49010108141d4803281215480a1018183a081017173a11b8ffe8
b317173a44b8fff0b316163a48b8ffe84018171a3a032016163a40202d2d
3a40201a1b3a402015173a13b8fff0b315163a14b8fff0b315163a18b8ff
f0400e15173a042c1b1b3a041014173a18b8ffe040ff17193a7a4a01ec49
01b349016c447c449c44bc4404c64101044001243c343ce43c034a3c0139
3c01163a01763ad63a0218101e21486d18010d181d18023d184d185d1803
183013194804110104115411020c0a1001120510451002182b0f010b0f1b
0f6b0fdb0f04320a0f5a0f6a0f034baa0fba0f02060f01180b0e01446b0e
cb0edb0e03c90e01040e010c050d450d550d650d0415060a160a02200609
0142560901ca09da09023409015409640974090346080166087608020908
011908c908d9080304081408540864087408050a26073607460703c607d6
07f607031604018b04ab04bb0403491818183a8c49018c3c01e905010608
f60802a94001fa402d05019a44fa4402764501a64501004e01af4eff4e02
404e604e804e904ea04ed04ee04e07004e504e704e030b4eb8ffc0401b19
1d4818163b03463e0818193a0f3e012e083e013f3e08171d483eb8ffd840
131e2148e03ef03e023ed3161636a70f39010e39b8010140100100101f29
a72226e1241b0646012646b8fff0401517193a4630181b366c4601469806
10371817183a37b8ffe8b614163a37a32f21b8ffe8401117183a21181416
3a21a33b271817183a27b8ffe8401814163a27a32f0003013b0642013206
42013a764286420242b8ffe8b31c1d3a42b8ffecb31a1b3a42b8fff0b318
193a42b8fffa405515153a42841f0baf0bcf0b03100b200b300bc00be00b
05000b100b200b800b04090b0b183b181d1d3a3b101b1c3a3b85400f2f01
33002f902f0253102f01402f902f02002f202f402fa02ff02f0519032f4d
2f65022b01182f5f5e5d71725e5d5e5d1a4dfd2b2b3c332f5e5d7172ed2b
2b2b2b725e5d5e5d10c43c3210e42b2b10e42b2b10e62b2b003fed5d2b2b
5e5d3ff63cfd3c3f33f65e5ded3fed5d2b2b5e5d5e5d2b11393911393130
012b5e5d7171715d7171715d71725d5d2b005d7171725e5d717271725d72
71725e5d5e5d5e5d5e5d71725e5d5e5d5d5e5d5e5d715e5d5e5d5e5d712b
5d71722b5d715d5d715d71715d715d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b015d2b005d5d71715d5d5d5d2b2b2b2b2b01170607363633321e0215
140e020706070e0223222715141e0317171507262322072735373e043511
342e02232727353736131616333236363534262623220e03150172130a01
886b83528672422e4b2d463f3e2b22502d68670809121a5f09087d73737d
0909601a13070909061728540908bf8a2e88526195524999563564572602
03c50c72587c502d679b6648947e2929262c1f121235d516ef2812050608
2a090808092a080606132ae23902fe3489160e01082b0817fd352f4562bd
735da05c2548412b1a00>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 2484 5 <0002004ffdc0047603bb002f003f031b4019c93401ba2f01b100013c2021
2e3a3b20212e3a3b2014153a1db8fff0b314163a3cb8ffc0b318183a1db8
fff0b31b1f3a1db8ffc0400918183a011618183a34b8ffe8400916183a01
1612153a1eb8fff0400e13133a3c1812133a29181b1b3a1eb8fff0b31818
3a3bb8fff0400918183a3b2c191b3a24b8ffd4b31b1d3a1db8ffe8400e12
133a3b1618183a3c1817183a24b8ffe0403e17183af42401752e01763101
6a1d016a3c0106281628023627013924011a2a017a2401ac1d011d28181b
483c30181b4836380106372637022f1015153a00b8fff0b315153a23b8ff
d840091c1d3a021618183a00b8ffc0400912133a1e1813133a23b8ffd840
9d17183ad42401d424010523d523023a23da23020d2301ed23fd23022330
1c1f48c43801352b952b021939011041204130417041a041c04106ff4101
6f41df4102a92a01a629b6290223290103281328832803662e762e862e03
0524a52402e524010024010b246b24db24eb24fb240509242e442e022631
4631020627162702052f010a2f010d0525011c1d3c30033a2f01332d0f3a
01533a201d1d3a3ab8ffe840181c1d3a3a10171b3a333a733a023ad30f22
01221609330133b8ffe8400c1d253a063316332633031a33b8fff0401c22
25485033010033013e33e3162d012d1000100c16a70f13e1111b0eb8ffe8
401117183a0e1014163a0ea306141817183a14b8fff0401314163a14a31c
2f2f1c00b001010106303e3c1cb8ffe8b31d1d3a1cb8fff0404f1b1c3a1c
8520063006d0060300062006f00603090f0601537f06017f06010f069f06
ef0603130606360615153636181c1d3a36141a1b3a360818193a36061515
3a36e4400f250129032540256602048d2b01182f5f5e5d1a4ded2b2b2b2b
2bc42f5e5d71725e5d5e5d71fd2b2b3cd4c610c65d391239192f1810e42b
2b10e42b2b003ff63cfd3c3f3f72ed5e5d712b5e5d2b713f71ed5d2b2b2b
5e5d111239391117395e5d31305e5d715d5d5d5e5d715d715d71715d5d01
5d7171725d5d2b5d7171715d712b2b2b2b2b2b2b00715d2b2b715d727171
7171715d5d5d2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b015d5d
5d01170e021511141e0317171507262322072735373e043511070e022322
0235343736373637363332170726262322061514161633323736353403e0
251d0f08080913195f09087d746b8508086119130709d618093622b7d52f
24501899606f7f884f228c4e85a6538f54866b0303b6164f58bf7dfd8816
ef28120506082a090808092a080606132ae2390129860f0406010db77a6e
523a11553446742246d0a86fcb5a84fa24a60000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 1288 3 <0001004affdd032203c2003c03fbb5262018183a18b8fff0b313133a18b8
fff0b318183a22b8ffe8401d18183a2c1613133a2c1018183a2d1018183a
2f1818183a2d0c15153a18b8fff040091d1d3a261017173a0db8fff440ff
17173a2c0c17183a2d0817173a2d1420203a2e181d1d3a2c181d1d3ab932
c932d93203d20901060901072e01d42f01142f010430143002150615012a
062a0153092a0116a91001090b01290a0c011a22010a220153842f942f02
c40d01b41401861201863601193301192b292b025a320132181c1f48490c
590c021909014909590902272e01672e01052f152fb52fc52f04242eb42e
c42ee42e04152d01a62701562d862d962d03452c552c852c952ce52c0546
2b562bb62bc62b04452a552a02360e01062a162a762a030f042634264426
031409260164062f010e0d1101022f01114b225b220218181120368933e9
3302ef09010214321402130414014340497614961402391101450d550d65
0d03860801e90501d5050185149514a51403b514c51402c92e01dc260119
33293302043214322432030b141b142b1403f03e01003e703e903e03093e
b8ffc0401c1e21480f3e013c6f3e01af3ecf3e020f3e2f3e7f3eaf3ecf3e
050a31b8ffe8b31d1d3a31b8ffe8401c1b1b3ad031010a31132804240740
005000a000037000800090000300b8ffc04011191d489a000100401c1d3a
0f00010c0007b8ffe0401f30303a9a07010307014b630701e30701071022
293607402a2d3607fd34161eb8ffd4b31d1d3a1eb8ffd4403721213a1e20
17183a6f1e011f1e5f1e8f1e9f1eaf1e05af1e01951e01001e101e201e03
0c1e242030303a062401645c24014c24cc240224b8fff0b322293624b8ff
c040402a2d3624fd1610061f0126031f0153d31f011fea901c011cb01a01
0a1a01150f1a01534f1a010f1a1f1a02111a316a02012f020102ea3c3838
130a1823253a0ab8ffe8b720203a060a01200ab8024940210f3101321031
01003101534031a031c031f0310400315031020b31282c40403a28b8fff4
b318183a28b8ffe0b330303a28b8ffe0402e23253a281820223a0f28df28
ef28ff2804230a28015c79280128e91f130100130180139013f013039013
a0130213b8ffc0b30d1036132f2b5d71725ded715e5d5e5d2b2b2b2b2bdd
5e5d715e5d715e5ded5e5d2b2b11332fd6ed715d10d45e5d725e5d5e5d71
d671ed715e5d5e5d003fed2b2b5d725e5d2b7dc45e5d5d5d71722b2b2b18
3fed2b2b71725e5d712b7dc45e5d2b5d2b5d71111217395d2b2b3130015e
5d71725e5d2b5e5d715d5d715d005d5d715d5d717171725e5d5e5d5d5d2b
5d5e5d5d5e5d5e5d5e5d5e5d5d5d5d5d5d5d715d5d5d715d715d2b5d7171
7171715d5d5e5d715d5e5d725e5d5e5d5e5d5e5d5d715d5d71712b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b1333171617161633323635342626272e03
353436333216171706070723272e03232206061514161617171e02151406
232226272737363637652b0902081f984a6a7f2e5d7867524c28d59f439e
29090802092809040e3a6a3b3d53331f40236d8c7942e4b33fbb42050a05
0201012609543c2f3b724f2b3f291c181b405d3886a125110e28aa09093d
313927244934263c25081c223265488ac61c110d431f3f650000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 10232 13 <0001002effe9028c04f3002c01b940290910121d481e18152c4806231623
024a89230199230178238823024f235f236f23039720013920011fb8ffe0
b3141d4820b8fff4b312133a1fb8ffe0b312133a1eb8ffe0b312133a1fb8
ffe0401f1b1b3ae019f0190250196019701903562366230206201620021f
18132c481db8ffd0406c152c48891d991d02302e01002e010b0f2e01602f
2e5f2e020f2e2f2e3f2e9f2e040f2e9f2e020d1f1e1d20220a1d01531d40
151c481d1b0f1411100d0416040b022c1216292c16970b3c09d006010620
0801d008011f08011f083f0802081b0c1a1d3a1b0818183a521b011bb8ff
c040632a2d481b9622162428171604160600101b1b3a0040141948002812
0f1110101b1b3aa51001c510d51002101d5f1e01801e01101e201e02801e
011e2808090b0b16181d1d3a16101b1c3a1685002801b028c028f0280310
2850280270289028a02803282f5d717172fd2b2b3c7d10d618cd10d45d71
727132d65d712bc5333210c62b2b3c123910c610c4003fed2b722b2b2f5d
725d71c671393ffdd4c6103c10cd10c5121739c610c62b5e5d1239113333
3130015e5d71725e5d5e5d715d2b2b72720071722b2b2b2b2b715d5d5d5d
715e5d2b2b13353736371027363717060316333237170707262322070314
16163332371706070623223534373635112322072e075e3a066742180a0e
323a7633071308333e3858060d3b3a433918185b3436e10401292d3a0311
1a0a231e01052b2429143ffed101060754090101fe698d57312324115318
da50381112019f040000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 3464 6 <00030010ffc4049a03f80044004500460217b90036ffd8401326293a042f
142f242f03043014302430031930b8ffe0b31216482fb8ffe04073121648
0c18121648050b01750b181218480a0a1a0a2a0a031f0a181218480a2f01
756606760602b619f61902b644f64402873601bb36cb36db3603c60a01b6
0a01ce3701e93701362826294836280a10480f48010e0048013200480153
90480100481048c048d04804463445002f000815a718b80101b51b1a1040
a743b80101400c01001025a728e12ce12a1508b8fff040241b1b36160801
f00801fd0801082617183a0898193401341646461e454539271814163a27
b8ffe8401017183a27a31e0f160109161817183a16b8fff0400c14163a16
a30e411817183a41b8fff0400f14163a41a3391a1b1e0d2f2c032d0eb8ff
e8b31d1d3a0eb8fff040621b1c3a0e8540ff1e010f1e010e031e481e6802
0f482f4802104801b048c048e048038048b0480210484048604870489048
0500485048f048030b000104181d1d3a04101b1c3a04854038903901e039
01003910393039a039c039d039f03907190339b8ffc0b72d324839473965
022b01182f2b5f5e5d7171c51a4dfd2b2bd6cd5e5d71727172712b01182f
5f5e5d711a4dfd2b2b7dc417391810d6cd10e62b2b10e62b2b5e5d10e42b
2b12392f11392f003f72ed2b715d722b3fe6f6ed3f33f6ed3f33f6ed1112
3910ce10ce31300171725e5d5e5d5e5d2b2b005d715d5d5d715d5d715e5d
2b5e5d2b5e5d2b2b2b5e5d5d2b011706151514161633323e02373735342e
02232727353736371706151514171e023333171507262322072736370607
060623222626353735342e022327273537362513015a130b276042497851
0c020308051a27540908bf83130b0502111e4a1c09088d303d500906033f
511f744a707d340108051a27540908bf01720a03b90d83cae98064353968
2453706c288a200f01082b0817340d83cab00fe655250f08280908070866
4731521f2a477d994fc3288a200f01082b081773fbcc0000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 11748 15 <000100ab044101fe05d700070047b90000ffe8401613133aa60001a80701
01030405070006400650060206b801b5400e02030201050607060f006f00
0200b901b600042fed5d1739002fed5d17393130015d005d2b0101072727
13371701fefeda0d1d03999c0d05bbfe8a040f0d015d1d030000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 1192 2 <ffff0052ffc403cf05d70236000c00000117000f010e000000464035044f
370137110437403f3f3637402629363740151d3637400f12363740090c36
8f37a03702af37011f377f378f37030037371e1e25012b71715d2b2b2b2b
2b35003f7135>LBAAAA+PalatinoLinotype-Roman AddT42Char 
1 0 0 <0001003f0043040b0437003a000001273635342322061514163332363534
262322061514163332363534262737161215140023220035343633321615
1406232226353436333216151401e31a3f4b373f624b5e799c6f7aaddea4
ade1b7a327b7defee0d2d1fef7e39d92d3b37e72876c58414d01db2b162d
4d54424367805d759eb47ea7dcffbaa6d9254928fef9b7d9fecb0104ca9f
e8bf9883b28c6f557c4e3a600000>LBAAAA+PalatinoLinotype-Roman AddT42Char 
LBAAAA+PalatinoLinotype-Roman /CharStrings get begin
/g4 4 def
/g1 1 def
/g12 12 def
/g14 14 def
/g7 7 def
/g8 8 def
/g11 11 def
/g9 9 def
/g10 10 def
/g5 5 def
/g3 3 def
/g13 13 def
/g6 6 def
/g2 2 def
end
LBAAAA+PalatinoLinotype-Roman /Encoding get
dup 32 /g4 put
dup 77 /g1 put
dup 97 /g12 put
dup 99 /g14 put
dup 101 /g7 put
dup 105 /g8 put
dup 108 /g11 put
dup 109 /g9 put
dup 112 /g10 put
dup 113 /g5 put
dup 115 /g3 put
dup 116 /g13 put
dup 117 /g6 put
dup 225 /g2 put
pop
end
%ADOEndSubsetFont
/DUPILW+PalatinoLinotype-Roman /LBAAAA+PalatinoLinotype-Roman findfont ct_VMDictPut
/DUPILW+PalatinoLinotype-Roman*1 
[32{/.notdef}rp /g4 44{/.notdef}rp /g1 19{/.notdef}rp /g12 /.notdef /g14 
/.notdef /g7 3{/.notdef}rp /g8 2{/.notdef}rp /g11 /g9 2{/.notdef}rp 
/g10 /g5 /.notdef /g3 /g13 /g6 107{/.notdef}rp /g2 
30{/.notdef}rp]
DUPILW+PalatinoLinotype-Roman nf
DUPILW+PalatinoLinotype-Roman*1 [9.54128 0 0 -9.54128 0 0 ]msf
71.5283 79.2104 mo
(M\341s que simple matem\341tica)
[9.02604 4.77064 4.04546 2.38532 5.34309 5.75336 4.5703 2.38532 4.04546 2.77651 8.42491 5.73428 
2.77652 4.57031 2.38531 8.42491 4.77063 3.1105 4.57031 8.4249 4.77065 3.1105 2.7765 4.23633 
0 ]xsh
93.1857 53.2914 mo
93.1857 50.3289 91.5165 47.5624 88.275 47.5624 cv
84.2817 47.5624 80.2875 51.9162 80.2875 56.2539 cv
80.2875 58.9053 81.9408 61.3122 85.0508 61.3122 cv
86.9332 61.3122 89.1923 60.5756 91.3689 58.7588 cv
91.7943 60.4603 92.7441 61.3122 94.0536 61.3122 cv
95.7066 61.3122 96.5251 59.6095 96.5251 59.2003 cv
96.5251 58.9225 96.3127 58.9225 96.2139 58.9225 cv
95.9683 58.9225 95.936 59.0205 95.8542 59.266 cv
95.5761 60.0349 94.8721 60.7058 94.1516 60.7058 cv
93.2027 60.7058 93.2027 58.7588 93.2027 56.8925 cv
96.3127 53.1762 97.0493 49.3295 97.0493 49.2972 cv
97.0493 49.0194 96.8038 49.0194 96.722 49.0194 cv
96.4432 49.0194 96.4107 49.1174 96.2957 49.6569 cv
95.9035 50.9998 95.1012 53.3733 93.2188 55.877 cv
93.2188 53.2914 li
cp
91.271 58.0222 mo
88.5862 60.428 86.1803 60.7058 85.1163 60.7058 cv
82.9552 60.7058 82.3336 58.7911 82.3336 57.3502 cv
82.3336 56.0407 83.0047 52.9307 83.9543 51.2453 cv
85.1982 49.1174 86.9169 48.1676 88.275 48.1676 cv
91.2384 48.1676 91.2384 52.0476 91.2384 54.6009 cv
91.2384 55.3698 91.2052 56.156 91.2052 56.9249 cv
91.2052 57.5312 91.2384 57.6776 91.271 58.0222 cv
101.06 55.8124 mo
99.1441 57.6948 98.653 58.1525 98.653 58.2839 cv
98.653 58.398 98.7681 58.6274 98.9966 58.6274 cv
99.1441 58.6274 100.879 56.9582 101.124 56.6793 cv
101.305 58.7254 102.074 61.3778 104.448 61.3778 cv
105.675 61.3778 106.772 60.6078 107.247 60.2482 cv
107.64 59.9369 109.113 58.6931 109.113 58.4142 cv
109.113 58.2677 108.965 58.0868 108.802 58.0868 cv
108.687 58.0868 108.229 58.5456 108.098 58.6597 cv
107.034 59.6914 105.692 60.7715 104.464 60.7715 cv
102.811 60.7715 102.598 58.398 102.598 56.745 cv
102.598 56.4338 102.598 55.1577 102.811 54.9121 cv
104.611 53.0459 110.242 47.235 110.242 41.8333 cv
110.242 40.6056 109.784 39.5417 108.474 39.5417 cv
105.643 39.5417 103.171 45.8275 102.745 46.9733 cv
102.631 47.2834 100.863 51.9819 101.06 55.8124 cv
102.876 53.93 mo
102.909 53.7491 104.284 45.7618 106.837 41.4898 cv
107.362 40.6713 107.869 40.1469 108.49 40.1469 cv
109.522 40.1469 109.588 41.129 109.588 41.7999 cv
109.588 42.8639 109.277 45.6143 106.625 49.4609 cv
105.839 50.5744 104.628 52.0961 102.876 53.93 cv
115.022 54.0442 mo
116.004 54.4372 117.035 54.4372 117.608 54.4372 cv
118.394 54.4372 119.982 54.4372 119.982 53.5531 cv
119.982 52.9963 119.409 52.7842 117.854 52.7842 cv
117.084 52.7842 116.184 52.8822 115.104 53.3399 cv
114.155 52.8822 113.794 52.1779 113.794 51.507 cv
113.794 49.6085 116.79 48.5111 119.491 48.5111 cv
120.014 48.5111 121.111 48.5111 122.388 49.4609 cv
122.568 49.5751 122.666 49.6741 122.879 49.6741 cv
123.239 49.6741 123.649 49.2811 123.649 48.9042 cv
123.649 48.3474 121.881 47.2016 119.769 47.2016 cv
116.347 47.2016 113.123 49.2477 113.123 51.507 cv
113.123 52.6367 113.86 53.3399 114.367 53.7006 cv
112.6 54.7151 111.568 56.3519 111.568 57.8413 cv
111.568 59.9531 113.467 61.6233 116.381 61.6233 cv
120.407 61.6233 122.028 58.9386 122.028 58.5133 cv
122.028 58.3657 121.913 58.2343 121.749 58.2343 cv
121.602 58.2343 121.537 58.3323 121.406 58.5133 cv
121.078 59.0862 120.276 60.3138 116.643 60.3138 cv
114.744 60.3138 112.255 59.8228 112.255 57.6614 cv
112.272 56.647 113.041 55.092 115.022 54.0442 cv
115.971 53.6845 mo
116.79 53.4056 117.592 53.4056 117.804 53.4056 cv
118.656 53.4056 118.803 53.4713 119.294 53.5854 cv
118.77 53.8309 118.721 53.8309 117.625 53.8309 cv
117.068 53.8309 116.577 53.8309 115.971 53.6845 cv
128.608 57.3179 mo
130.506 52.9802 134.059 49.1497 138.118 49.1497 cv
139.641 49.1497 140.311 50.4269 140.311 52.1122 cv
140.311 53.4217 139.706 56.2539 138.724 58.0222 cv
137.954 59.3963 136.612 60.7058 135.189 60.7058 cv
134.582 60.7058 133.175 60.428 133.175 58.7588 cv
133.6 58.6597 133.78 58.3657 133.78 58.0868 cv
133.78 57.7433 133.535 57.5634 133.257 57.5634 cv
132.488 57.5634 132.488 58.5133 132.488 58.8073 cv
132.488 60.4775 133.797 61.3122 135.171 61.3122 cv
138.527 61.3122 142.03 57.2038 142.03 53.0459 cv
142.03 50.7543 140.754 48.5283 138.151 48.5283 cv
136.285 48.5283 134.223 49.2315 132.078 51.2119 cv
130.916 52.2436 129.639 53.7491 128.117 56.6955 cv
127.38 55.877 127.38 54.8949 127.38 54.4695 cv
127.38 52.1779 128.837 48.2494 130.949 47.824 cv
131.129 47.7917 131.309 47.7584 131.309 47.4644 cv
131.309 47.431 131.309 47.2188 130.965 47.2188 cv
128.805 47.2188 126.055 51.4252 126.055 55.3214 cv
126.055 56.9087 126.398 57.3675 127.332 58.6113 cv
126.268 61.6556 125.841 64.2585 125.841 65.191 cv
125.841 66.4349 126.332 67.5323 127.757 67.5323 cv
129.77 67.5323 131.718 64.9133 131.718 62.5559 cv
131.718 61.4596 131.44 61.0988 130.408 59.6914 cv
130.049 59.2003 129.001 57.8585 128.608 57.3179 cv
128.182 59.266 mo
130.408 62.1628 li
130.752 62.6539 130.769 63.0147 130.769 63.4401 cv
130.769 65.2072 129.426 66.9432 128.15 66.9432 cv
127.298 66.9432 126.905 66.3368 126.905 65.1749 cv
126.889 63.7836 127.757 60.4775 128.182 59.266 cv
f
.65475 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
93.1857 53.2914 mo
93.1857 50.3289 91.5165 47.5624 88.275 47.5624 cv
84.2817 47.5624 80.2875 51.9162 80.2875 56.2539 cv
80.2875 58.9053 81.9408 61.3122 85.0508 61.3122 cv
86.9332 61.3122 89.1923 60.5756 91.3689 58.7588 cv
91.7943 60.4603 92.7441 61.3122 94.0536 61.3122 cv
95.7066 61.3122 96.5251 59.6095 96.5251 59.2003 cv
96.5251 58.9225 96.3127 58.9225 96.2139 58.9225 cv
95.9683 58.9225 95.936 59.0205 95.8542 59.266 cv
95.5761 60.0349 94.8721 60.7058 94.1516 60.7058 cv
93.2026 60.7058 93.2026 58.7588 93.2026 56.8925 cv
96.3127 53.1762 97.0493 49.3295 97.0493 49.2972 cv
97.0493 49.0194 96.8038 49.0194 96.7219 49.0194 cv
96.4432 49.0194 96.4107 49.1174 96.2957 49.6569 cv
95.9035 50.9998 95.1012 53.3733 93.2188 55.877 cv
93.2188 53.2914 li
cp
91.271 58.0222 mo
88.5862 60.428 86.1803 60.7058 85.1163 60.7058 cv
82.9552 60.7058 82.3336 58.7911 82.3336 57.3502 cv
82.3336 56.0407 83.0047 52.9307 83.9543 51.2453 cv
85.1981 49.1174 86.9169 48.1676 88.275 48.1676 cv
91.2384 48.1676 91.2384 52.0476 91.2384 54.6009 cv
91.2384 55.3698 91.2052 56.156 91.2052 56.9248 cv
91.2052 57.5312 91.2384 57.6776 91.271 58.0222 cv
101.06 55.8124 mo
99.1441 57.6948 98.653 58.1525 98.653 58.2839 cv
98.653 58.398 98.768 58.6274 98.9965 58.6274 cv
99.1441 58.6274 100.879 56.9582 101.124 56.6793 cv
101.305 58.7254 102.074 61.3778 104.448 61.3778 cv
105.675 61.3778 106.772 60.6078 107.247 60.2482 cv
107.64 59.9369 109.113 58.6931 109.113 58.4142 cv
109.113 58.2677 108.965 58.0868 108.802 58.0868 cv
108.687 58.0868 108.229 58.5456 108.098 58.6597 cv
107.034 59.6914 105.692 60.7715 104.464 60.7715 cv
102.811 60.7715 102.598 58.398 102.598 56.745 cv
102.598 56.4338 102.598 55.1577 102.811 54.9121 cv
104.611 53.0459 110.242 47.235 110.242 41.8333 cv
110.242 40.6056 109.784 39.5417 108.474 39.5417 cv
105.643 39.5417 103.171 45.8275 102.745 46.9733 cv
102.631 47.2834 100.863 51.9819 101.06 55.8124 cv
102.876 53.93 mo
102.909 53.7491 104.284 45.7618 106.837 41.4898 cv
107.362 40.6713 107.869 40.1469 108.49 40.1469 cv
109.522 40.1469 109.588 41.129 109.588 41.7999 cv
109.588 42.8639 109.277 45.6143 106.625 49.4609 cv
105.839 50.5744 104.628 52.0961 102.876 53.93 cv
115.022 54.0442 mo
116.004 54.4372 117.035 54.4372 117.608 54.4372 cv
118.394 54.4372 119.982 54.4372 119.982 53.5531 cv
119.982 52.9963 119.409 52.7842 117.854 52.7842 cv
117.084 52.7842 116.184 52.8822 115.104 53.3399 cv
114.155 52.8822 113.794 52.1779 113.794 51.507 cv
113.794 49.6085 116.79 48.5111 119.491 48.5111 cv
120.014 48.5111 121.111 48.5111 122.388 49.4609 cv
122.568 49.5751 122.666 49.6741 122.879 49.6741 cv
123.239 49.6741 123.649 49.2811 123.649 48.9042 cv
123.649 48.3474 121.88 47.2016 119.769 47.2016 cv
116.347 47.2016 113.123 49.2477 113.123 51.507 cv
113.123 52.6367 113.86 53.3399 114.367 53.7006 cv
112.6 54.7151 111.568 56.3519 111.568 57.8413 cv
111.568 59.9531 113.467 61.6233 116.381 61.6233 cv
120.407 61.6233 122.028 58.9386 122.028 58.5133 cv
122.028 58.3657 121.913 58.2343 121.749 58.2343 cv
121.602 58.2343 121.537 58.3323 121.406 58.5133 cv
121.078 59.0862 120.276 60.3138 116.642 60.3138 cv
114.744 60.3138 112.255 59.8228 112.255 57.6614 cv
112.272 56.647 113.041 55.092 115.022 54.0442 cv
115.971 53.6845 mo
116.79 53.4056 117.592 53.4056 117.804 53.4056 cv
118.656 53.4056 118.803 53.4713 119.294 53.5854 cv
118.77 53.8309 118.721 53.8309 117.625 53.8309 cv
117.068 53.8309 116.577 53.8309 115.971 53.6845 cv
128.608 57.3179 mo
130.506 52.9802 134.059 49.1497 138.118 49.1497 cv
139.641 49.1497 140.311 50.4269 140.311 52.1122 cv
140.311 53.4217 139.706 56.2539 138.724 58.0222 cv
137.954 59.3963 136.612 60.7058 135.188 60.7058 cv
134.582 60.7058 133.175 60.428 133.175 58.7588 cv
133.6 58.6597 133.78 58.3657 133.78 58.0868 cv
133.78 57.7433 133.535 57.5634 133.257 57.5634 cv
132.488 57.5634 132.488 58.5133 132.488 58.8073 cv
132.488 60.4775 133.797 61.3122 135.171 61.3122 cv
138.527 61.3122 142.03 57.2038 142.03 53.0459 cv
142.03 50.7543 140.754 48.5283 138.151 48.5283 cv
136.285 48.5283 134.223 49.2315 132.078 51.2119 cv
130.916 52.2436 129.639 53.7491 128.117 56.6955 cv
127.38 55.877 127.38 54.8949 127.38 54.4695 cv
127.38 52.1779 128.837 48.2494 130.949 47.824 cv
131.129 47.7917 131.309 47.7583 131.309 47.4644 cv
131.309 47.431 131.309 47.2188 130.965 47.2188 cv
128.805 47.2188 126.055 51.4252 126.055 55.3214 cv
126.055 56.9087 126.398 57.3675 127.331 58.6113 cv
126.268 61.6556 125.841 64.2585 125.841 65.191 cv
125.841 66.4349 126.332 67.5323 127.757 67.5323 cv
129.77 67.5323 131.718 64.9133 131.718 62.5559 cv
131.718 61.4597 131.44 61.0988 130.408 59.6914 cv
130.048 59.2003 129.001 57.8585 128.608 57.3179 cv
128.182 59.266 mo
130.408 62.1628 li
130.752 62.6539 130.769 63.0147 130.769 63.4401 cv
130.769 65.2072 129.426 66.9432 128.15 66.9432 cv
127.298 66.9432 126.905 66.3368 126.905 65.1749 cv
126.889 63.7836 127.757 60.4775 128.182 59.266 cv
@
149.887 66.5986 mo
150.394 67.0412 li
152.343 65.5346 154.127 63.8654 155.534 61.8032 cv
156.32 59.168 156.386 56.0246 156.386 53.1116 cv
156.386 51.3272 156.287 49.5428 156.173 47.7422 cv
154.864 47.333 153.57 46.7762 152.539 45.8275 cv
150.967 46.9238 148.938 48.3646 147.89 49.1831 cv
147.923 45.7284 li
147.923 44.0097 148.12 41.9636 150.739 39.5578 cv
150.198 39.2143 li
150.166 39.2143 147.661 41.031 146.401 41.9808 cv
145.647 39.5901 li
145.271 39.6558 li
145.435 42.193 145.468 44.7635 145.468 47.3007 cv
145.468 51.1301 145.337 54.9606 145.124 58.775 cv
146.843 61.6233 li
149.412 59.266 li
147.711 56.8764 li
147.874 50.1318 li
148.66 49.5105 149.855 48.5929 150.821 48.5929 cv
151.851 48.5929 152.768 49.1335 153.586 49.7226 cv
153.718 51.409 153.898 53.8966 153.898 54.7646 cv
153.898 58.0222 154.029 63.3248 151.885 64.8636 cv
cp
f
.163687 lw
149.887 66.5986 mo
150.394 67.0412 li
152.343 65.5346 154.127 63.8654 155.534 61.8032 cv
156.32 59.168 156.386 56.0246 156.386 53.1116 cv
156.386 51.3272 156.287 49.5428 156.173 47.7422 cv
154.864 47.333 153.57 46.7762 152.539 45.8275 cv
150.967 46.9238 148.938 48.3646 147.89 49.1831 cv
147.923 45.7284 li
147.923 44.0097 148.12 41.9636 150.739 39.5578 cv
150.198 39.2143 li
150.166 39.2143 147.661 41.031 146.401 41.9808 cv
145.647 39.5901 li
145.271 39.6558 li
145.435 42.193 145.468 44.7635 145.468 47.3007 cv
145.468 51.1301 145.337 54.9606 145.124 58.775 cv
146.843 61.6233 li
149.412 59.266 li
147.711 56.8764 li
147.874 50.1318 li
148.66 49.5105 149.855 48.5929 150.821 48.5929 cv
151.851 48.5929 152.768 49.1335 153.586 49.7226 cv
153.718 51.409 153.898 53.8966 153.898 54.7646 cv
153.898 58.0222 154.029 63.3248 151.885 64.8636 cv
cp
@
158.514 61.0009 mo
166.911 61.0009 li
166.911 60.5098 li
158.514 60.5098 li
cp
f
.65475 lw
158.514 60.5098 mo
166.911 60.5098 li
166.911 61.0009 li
158.514 61.0009 li
@
180.824 50.4107 mo
180.824 48.3969 180.792 44.9757 179.417 42.3567 cv
178.205 40.0489 176.257 39.2304 174.555 39.2304 cv
172.983 39.2304 170.97 39.9509 169.727 42.3244 cv
168.417 44.7958 168.286 47.8563 168.286 50.4107 cv
168.286 52.2759 168.318 55.1404 169.333 57.6453 cv
170.741 61.0332 173.278 61.492 174.555 61.492 cv
176.061 61.492 178.369 60.8695 179.712 57.7433 cv
180.694 55.4678 180.824 52.8004 180.824 50.4107 cv
174.538 60.9686 mo
172.427 60.9686 171.183 59.168 170.725 56.6632 cv
170.364 54.7151 170.364 51.9001 170.364 50.05 cv
170.364 47.5128 170.364 45.4183 170.791 43.4045 cv
171.412 40.6056 173.262 39.7538 174.538 39.7538 cv
175.881 39.7538 177.632 40.6379 178.254 43.3388 cv
178.68 45.2212 178.712 47.4148 178.712 50.05 cv
178.712 52.1941 178.712 54.8131 178.32 56.7612 cv
177.632 60.3461 175.684 60.9686 174.538 60.9686 cv
f
.327375 lw
180.824 50.4107 mo
180.824 48.3969 180.792 44.9757 179.417 42.3567 cv
178.205 40.0489 176.257 39.2304 174.555 39.2304 cv
172.983 39.2304 170.97 39.9509 169.727 42.3244 cv
168.417 44.7958 168.286 47.8563 168.286 50.4107 cv
168.286 52.2759 168.318 55.1404 169.333 57.6453 cv
170.741 61.0332 173.278 61.492 174.555 61.492 cv
176.061 61.492 178.369 60.8695 179.711 57.7433 cv
180.694 55.4678 180.824 52.8004 180.824 50.4107 cv
174.538 60.9686 mo
172.427 60.9686 171.183 59.168 170.725 56.6632 cv
170.364 54.7151 170.364 51.9001 170.364 50.05 cv
170.364 47.5128 170.364 45.4183 170.791 43.4045 cv
171.412 40.6056 173.262 39.7538 174.538 39.7538 cv
175.881 39.7538 177.632 40.6379 178.254 43.3388 cv
178.68 45.2212 178.712 47.4148 178.712 50.05 cv
178.712 52.1941 178.712 54.8131 178.32 56.7612 cv
177.632 60.3461 175.684 60.9686 174.538 60.9686 cv
@
grestore
false sop
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LAAAAA+Montserrat-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /o.sc put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 77 /M put
dup 127 /s.sc put
dup 128 /c.sc put
dup 129 /u.sc put
dup 130 /e.sc put
dup 131 /l.sc put
dup 132 /a.sc put
dup 133 /d.sc put
dup 134 /i.sc put
dup 135 /n.sc put
dup 136 /iacute.sc put
dup 137 /y.sc put
dup 138 /t.sc put
dup 139 /m.sc put
dup 140 /aacute.sc put
dup 141 /f.sc put
dup 142 /r.sc put
def
/FontBBox {-885 -266 1679 1076} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 538 550 575 587 600 612 700 712 742 754] def
/OtherBlues [-206 -194 -112 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [138] def
/StdVW [160] def
/StemSnapH [128 134 138] def
/StemSnapV [158 160] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/o.sc <1C60D8A8C9B601B602425001D47248546547141C4DE8B87B80A1080FA
16DC7E08CFA509FD9E28CBE3E9EF5627CDEECE9E9842DD06C003D5555B37AD37
AAF2C9B890375DF17CE0B7B12B247D93429C4F84E21E99E3C1D1E82FE6EED42> |-
/B <1C60D8A8C9B6F07E08861F1236245DDD4EFB756DBDE08D46DFD43FE3E441
72BE0A6995DE499541B63BA3DC7A6D499549D577FB9C7E57CBCF19459D31E3AA
ABAE1F0FB62C33CB8389284686A6B2A3946BC7C0710D0FFEC9392816230F12B9
C58C31D65EC0C02DF5FB6A6789A45825DACD1EB73C06484BC2FC9FDDA4291F41
D91DA8F00B0A828FDA65D945736ADC1AD55C8D035F652F66B2A673D9B5C9D557
0802FE5CA86F60EA0E53446493548147DC8243F1912352E97C27A026D51F0E1A
64D180C6CC3A56> |-
/C <1C60D8A8C9B610D9B8D63FD290453AF6837F76C6D9E86AA3845B767CE8D2
C974E0327AAFC55D2147831B559AD31B03280746BD5919FC48FF791861814497
FB4B5C8E1688AAA0326B7E1E17DD3725D7DDB667AF3FE94A2B8D67E7E02F838A
A9> |-
/E <1C60D8A8C9B65201E037803A1A00E7346892CE29B31AB4562A204A10D598
1592571990BADEA7D567228D98EFB9A132ED8980A20537141413AD359DB0E01C
BE8B7B22> |-
/F <1C60D8A8C9B672D47B5C6A69AFC86D1DF6B92504BCF5E428B58212329D9A
0C428B07E8F8E1A1165D97F09DF192BA1ED79592FF9ECBB28CDAF9581C> |-
/M <1C60D8A8C9B5DD8BEC57910FBF3511C2BBE3FE3449E75A7171927BF79D6E
8C70249613E99E628FA853CF33DD0CDB100D03B5C212DDA3D57460D812BB56D6
F6A728129C0AFA69046B06568DAA59DAB30E647FD9555C98> |-
/s.sc <1C60D8A8C9B794D34CCE65A4C692B553484295B96FBD2186435B4E3A5
82E7CF311CE1DEB0954F8B8344B8AAB1EA925003B9D741F6F6F6B0105FDCDC1E
1500F0179C7A748D9FABA07DC3B8B12C9722099B07AD27E72EE7364B9407BF1A
BAAB5FECC19026CB69CA1E0B9434B8551E44C80A7DF09C8A243B38E8B8D3A493
99DC0> |-
/c.sc <1C60D8A8C9B667F623EC1A5E9D3E2AEE58C85AD18F9D6B20BEADFDF9D
17EF86156070884A218D184F869611D544F7869F09B58BC048FEF733D689710A
ABA6ABF0D6A5C89641C4C3C213324EFF5B0D216F0DA94581CC16A44A1A6> |-
/u.sc <1C60D8A8C9B6232B6F259EDBC84D9CC4221195314C1F59CC2943BA80E
4A818BE2959B7867DE88B03EFE855787C867AEC43785836F173FE89A5FC28DCA
5BF01F8C0FD8D7F3E0CFF2555> |-
/e.sc <1C60D8A8C9B7F94240FDDF8C071F3F6656F9966E9A69B060751D1F96A
2EA1BE9A26B149D38F4513DAA75BB5C223F187CFFCD6F5EB980CA41B389237BB
931D9098E> |-
/l.sc <1C60D8A8C9B78FDBB088BB8A4D028D7618035E7C12A119C614CD5D237
E1A9A170FF196C396E41F> |-
/a.sc <1C60D8A8C9B6422897E894514ECB09ACC520DE55956414538A1863FD3
FDC2DBF51B1B0BAC783A544F51369B9CFCD55ED5DC5993C51610698018F697D2
4DC0DBD068D073F77DBCBFE3AE87355874760451FB12AE4E6649628> |-
/d.sc <1C60D8A8C9B63B8DE4007EE5DF6F5E2AC4DE554FF6B8EE7178E655E6C
587777047C6AF139E7DA6D988AA5EFB0249CA0A3AEB8EB48CC1ADAC4696271BD
39535BF3CA4A5B7BC7992A4B1FB9E62> |-
/i.sc <1C60D8A8C9B835D31BD88C727AE36DFE4927D17A53E59595C29849270
A1996B5> |-
/n.sc <1C60D8A8C9B635A4FCB3B9212876B99039B16F97B907542FB4BF80B88
FA50E6D5D0952ACF4DB293921810086B4368040B0CCC01F06B502CB069B6849A
144> |-
/iacute.sc <1C60D8A8C9B835D31BD88C727AE36DDFA7D99652D4C5ECA654A1
2EA0B1DFA9099DB299B1CD62B3F5CF7435F17DEC63F14698DFEDFDE1FE64> |-
/y.sc <1C60D8A8C9B7C2FB6C662DD6C6F2E5D8951D190C881DD5422EB824220
1242875B3D3EC1AB4AEA903F26A3F5BCB1A5102F2049CEAA539353B44> |-
/t.sc <1C60D8A8C9B78B91867A8DC8D09F98BB0AFE9B707C9FA602E779EA86E
C097C65864CCFE93945669E3E2D0A7BD17F0E> |-
/m.sc <1C60D8A8C9B6AE360584D1AB5B0F377645FB49248186FEAD76FC6AEE5
1C7103747AA7748C1F895974D835D63E9FA5707B6329413D9B455C1D2F617863
533AE59EDA86D041B008456F0AEBC320B029AAA079F093C087C> |-
/aacute.sc <1C60D8A8C9B6422897E894514ECB09ACC520DE55EE794820D6EE
6C603BE24C9E58EA0019F9D982D53041FCC47355FAFA9438E9FE5596928041F9
07184197D4733072D07BC1DD874DD1F85571249DAA13F2E226B483818FB42776
A7F92BBED0B27AB8BB46364B0D9A1CA3840EC31711513ADC111100> |-
/f.sc <1C60D8A8C9B7917ED23DAD8CB2C4F8107B02B0D3D4EC8FC13A8FF3AEA
73ECADB9FD07DB424CE80C8A11089D95065E94726DE4AC91BA384DE263074> |-
/r.sc <1C60D8A8C9B679737D99483B8EEB83B1ACB54B037A51915482221C901
12756C104551769A8EE716CBBD760ED0C21C765771663CE4E40E283A0DCCB137
8A1D7274B3580AD6FC114DB796102521E121D7E61B76E200453E69EF075BAD37
9> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold /LAAAAA+Montserrat-Bold findfont ct_VMDictPut
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc 33{/.notdef}rp /B /C /.notdef /E /F 
6{/.notdef}rp /M 49{/.notdef}rp /s.sc /c.sc /u.sc /e.sc /l.sc 
/a.sc /d.sc /i.sc /n.sc /iacute.sc /y.sc /t.sc /m.sc 
/aacute.sc /f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [11.9552 0 0 -11.9552 0 0 ]msf
210.948 43.726 mo
(E\177\200\201\202\203\204\205\202C\206\202\207\200\206\204\177F\210\177\206\200\204\177\211M\204\212\202\213\214\212\206\200\204)
[7.97418 6.58725 7.48404 8.20132 6.91014 6.31238 11.214 8.48825 10.2935 8.71536 3.71814 6.91013 
8.41641 7.48404 3.71811 7.83066 9.97055 7.59167 3.71811 6.58725 3.71814 7.31665 7.83066 9.97055 
10.5684 11.4173 7.4122 6.31235 6.91013 9.8869 7.4122 6.31238 3.71811 7.31668 0 ]xsh
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
210.948 58.072 mo
(E\207\215\202\216\213\202\216\210\204)sh
%ADOBeginSubsetFont: MAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MAAAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.0401 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6E412E25369E4ABB
A70D277941C6A488EED866AD61E359C443EB0FEA5> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPILY+CMSY10 /MAAAAA+CMSY10 findfont ct_VMDictPut
/DUPILY+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
DUPILY+CMSY10 nf
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
278.017 58.072 mo
(\017)sh
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
289.025 58.072 mo
(B\206 \202\177)sh
318.026 58.072 mo
(\212\204\205\210\177\212\206\200\204)
[4.91156 6.52548 7.07352 3.09842 5.38971 5.26025 3.09842 6.09717 0 ]xsh
%ADOBeginSubsetFont: NAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 127 /r.sc put
dup 128 /o.sc put
dup 129 /n.sc put
dup 130 /g.sc put
dup 131 /a.sc put
dup 132 /m.sc put
dup 133 /y.sc put
dup 134 /e.sc put
dup 135 /v.sc put
dup 136 /l.sc put
dup 137 /u.sc put
dup 138 /c.sc put
dup 139 /i.sc put
dup 140 /s.sc put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
16 dict dup begin
/C <1C60D8A8C9B60287B24E75BBB14FE31BCC39FEA6FCF5BFE2CB9679B7BEBC
6B29302C769D62A3ABA44DE9C5C796BDC13CB8469537BAC08428423AB8CBD041
1106E59407507635074F428BD5C1F580543CAE502B6ECC3F63EA4308FF808891
0B452588> |-
/r.sc <1C60D8A8C9B665535FC45808CB7FA06B232ED25D4B5EA8C45A605636A
22009B678BCBE2B1AEF3E7B6775488A1273C8CE108186B7A0F0955DD610A73B3
E530E0B32F8D2BA34B707B9A1209103B589812DA05ABE3150903ACCA2800DA9B
2BC329A09C15869D8DD2E> |-
/o.sc <1C60D8A8C9B633006C8AED178E45B1EF27A6527DCFA9BFF9442E557D2
34467774861997E63EE3DB51591531BCB2D9126C9DCE78E4ACB0E6B2476ABB16
B1B318B8733711215F1A54AC5522BEECBE93D488E3D95B0258A8025DBEC3DE36
FB880> |-
/n.sc <1C60D8A8C9B62C658234533A5AD9F90417237888D2EC12647089068F2
22CCD2F2AC79942D8E3C50D6B5B10C031D8A9B45959E3051C3EEF36F5> |-
/g.sc <1C60D8A8C9B6415B399222E0C2B1FD51BC86BBCBD3167E2D6CF846F12
284EB3114C1197464EA17CDE7F606BFBB9437FFD047F55DE08AE7B1525B3C467
7E32BF22CE803F5BD81EB9784C3DA4F70D273C1B73D64A1D0C4821F9F39D9D67
C41AC48> |-
/a.sc <1C60D8A8C9B7C56CECCA99B962D273C5FF42D24C5AF85402756EECF4F
B651ADB7387ADA1E287197ED54E92E616D33F5F905649816DDC9E44D91262992
0D33270948C8E451A79A2A4C3E026B882D13ACB756E7C> |-
/m.sc <1C60D8A8C9B6A351680511D53A328B43780824BC05FEB5EC3F091A501
8E28C016BCDB2B38A0FCC27F1181A8B532AE52232C6B64E7AEEDDC4F6A452F42
F0A9599715E47EF13A801F1> |-
/y.sc <1C60D8A8C9B790A816BA887EED5E8635CAA60519E2DCAB1D3A3B67F30
6A3B35F3618A588D96385F56D56A8E6318F159CBA3A8D6C4C> |-
/e.sc <1C60D8A8C9B7E5226513F1DBEDD40062CB052A94903F8BAFD382C02E2
754BCEF2F5951069E547EE1ED7658D8009D4FE04743D167948043AC173E> |-
/v.sc <1C60D8A8C9B7C05465D7784BF6C8D35FA6DEA380C5A354426641C444A
580F8EB961D63863BF1E19633B9FBC851D36EDEE6A0> |-
/l.sc <1C60D8A8C9B7A73DC5144677ACFAD787EC4171E5664F1E6100CDEBC23
C1997D434CD43> |-
/u.sc <1C60D8A8C9B658EF77C6FB6F1773C85ABF4A6924F3C66E0E287CE572E
46F19CED1E11A51C53E1CEDBA0A3B6937C7E661871B99619CC7A870ED4A40DDB
D3DF9E0E691A9C00C935518> |-
/c.sc <1C60D8A8C9B7C12A2F59D6599A236743C6C5996B3FEADFF0DAF551A35
E8BA4F2977AF0B902DC0EE6EDA601D74E3E325245BD2C4B602E809D425397190
9B8200AEEC6AB003C4A0FB11981A2E19383DC64CC45E0D7E256B6ED8737> |-
/i.sc <1C60D8A8C9B850A987A0FAA013ACAC8F80672BA659329DC8A108F98E8
A> |-
/s.sc <1C60D8A8C9B7B07F76D8CBE8B7B50718F7207565E0FB9369E0C527DFD
0425DD8E877D94EDCF5851515264E52B6C3849C8A6CE93C383812D8D343DDF9E
0C2C047A543F9B5C53C0BCE19D685442F2BDEAA3F019D1DACE540AC2086AF897
166F41231F331DDD5BB8DC711962ABE51F077952D22C88FB43C> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPILZ+Montserrat-Regular /NAAAAA+Montserrat-Regular findfont ct_VMDictPut
/DUPILZ+Montserrat-Regular*1 
[67{/.notdef}rp /C 59{/.notdef}rp /r.sc /o.sc /n.sc /g.sc /a.sc 
/m.sc /y.sc /e.sc /v.sc /l.sc /u.sc /c.sc /i.sc 
/s.sc 115{/.notdef}rp]
DUPILZ+Montserrat-Regular nf
DUPILZ+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
210.948 72.418 mo
(C\177\200\201\200\202\177\203\204\203\205\206\207\203\210\211\203\212\213\200\201\206\214)
[7.08334 6.2166 6.9937 6.944 6.9937 6.49554 6.2166 5.9577 8.1095 8.56793 8.13937 5.55905 
5.64877 5.9577 4.85178 6.59528 5.85806 5.99753 2.80945 6.99371 6.94397 5.63879 0 ]xsh
%ADOBeginSubsetFont: OAAAAA+Montserrat-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OAAAAA+Montserrat-Italic def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle -11.3001 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /two.tf put
dup 33 /zero.tf put
dup 34 /one.tf put
dup 45 /hyphen put
dup 46 /period put
dup 65 /A put
dup 77 /M put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 127 /eacute put
def
/FontBBox {-812 -262 1600 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0499599 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/two.tf <1C60D8A8C9B6317D0B3C2AD863B0F4F07AD7AC1F976B80627E60976
9D38A8F80B2D3125AD48955F82752E65DD33734911A2E3CE564F279AAA0FE3D6
D879897DE83277B2F6A564C7AFB8C49D19030C06756D5962A94CE64274ABF93> |-
/zero.tf <1C60D8A8C9B6317D05EC76DC71E707B115C99DED40814EB7B9F84D
AE570AA5BDD7D1B94D95B20B3563B6C4ADB902442F4C0B7C6B8EDB09C0DE2D84
340240095E5F118E573E833380993FBE437788FF7F10921B2EB6D2828437668A
4F> |-
/one.tf <1C60D8A8C9B6317D0B3C2AD97016DDC43103AC773F16D232DC7A0E3
844F7CDB9BE7B75FE894E9A0C15D582F0D87F0A26B1CC497FD31E67B1> |-
/hyphen <1C60D8A8C9B73DBADEBAF40CEC9F842F149631CCD9F6CBE65A9C0AE
D0EB288> |-
/period <1C60D8A8C9B89618EFA013105C4D4E791889D1F39036120510F61D9
7AF0EF41C6E6EFB666A3E5C03B94BA2DDD453A7E0C454F8513F92B4EC> |-
/A <1C60D8A8C9B600E06606AADEDC94410E09C196BE0628A0E9E4E071572BA1
BAF04B7CF4B27264F36046BC8C4B70F2E68898D845B43E5CC6111E41B31511F0
508DF1C379D6C11D93C4B102C654E17E4BC6B646D2> |-
/M <1C60D8A8C9B5DD8BEC57910FBF3511D5677E60021620C0D71BD5C3916818
D3747CB796A2E041BACBA3C4A99FF871C40ED6C339D88E42725F89B4F8824EEC
2E72C8A42F42F06F7EEB26B5> |-
/S <1C60D8A8C9B7D47449645EBB8B91D2D1412C8949118A5BAFFB05D7C83E16
35C1809200B72E25F76DBA47997F0863613A3B8484E4A4729D40FBD4D59DE519
0D5D25668EBDB1630BD4AF095FA3FEEFC0BA943BD4DC71C3336583878004653A
09893376447483B83EF7E880CE7F99AD9D> |-
/a <1C60D8A8C9B65B4396CC36575DAA10CE90AB48748C8D8A1CB62E6E58A9F3
2A8827B4D7C70DF5E1F023FF4203CE6E392230010ABA1EF6368FD9E920C412C6
625DB9F4DE4151C7BC211CE30A897C8ACDBA01001770DF41B6730EB711118B5D
FD10C4C38BFE5720EA2EEBD099538FCE7129EE0E6E97673AFFC1C1D7A9582333
4D2C0326F027A8FAD4E9> |-
/d <1C60D8A8C9B65B4396CC36579768D5BE2B9485E0C6E9F083EF36F744CA42
A7BC489EC7FDCFC6A82185E4ADA6DFA3201465AEC07805B9197B689BEBB49E2F
79950A37532C369D8C5EBAA311A2C353B0E8523DF147CAD836049FD61EE9FDDF
E65CD7D860CF5A872789AE937A77E72CFF0B9998345A06087F7498A3DD691AA0
6047CB11478A6936111346> |-
/e <1C60D8A8C9B7DF55E951ABFB9D1E809187689A41D5DB397BA59817E8C932
54382FBC888423C1C0A788EB0A48F2AB65A239686CA73DCCFC630F1D95D7BD94
771767664988F3CFFDD87EFDC8C58034245790B3F679BD3C676C9A060D79D630
AE97729A865078E2E7D3569D6EEAA9413AB53BCA371B3317A1A7BE> |-
/i <1C60D8A8C9B85FB10645229D56925DB2EF573F72F9B2DC42DA86556D4CFF
3DCEBF2314196EC79BF721B0B22310C3E5EE49B233FDB545D05A6A6A4776A2B1
C793> |-
/m <1C60D8A8C9B52BF25C98304B4309FC7E976151581BC49F170A6917B461BC
EAB8836216D76288005A83BC970F148094D66A2928B9753B156B3911A39C36AE
D9F7E3C2AA8288EE012A4BB7631B457A157B6F6774439CB578AF32DE251CD3A8
A93D870A723BBAF9E763B5CC5F224DD72046183439955EFB245F5C5D502870F5
DD967794A26445F1C77E66F592C82DE66031270BAD690A809935A58DCA452B5C
48B42F> |-
/n <1C60D8A8C9B658EF524C481D1AC2DCF6A9E73113531BA36F96628258A6BC
0F977BB6D35BA33CEFEE4F8898F7626CB44AAF56BFD8C2A2720FCD47850DDD4B
F69EA8424E03E4FA6FE2F47D1648A4276D25794CB71A90A243BC7016E4CDE2BE
4B43C5CD4CA3156585FBF28563CB590FF2D2E238EBED8CAC> |-
/o <1C60D8A8C9B66621CE82B94831125BAE257DE62CE49A16C76EA29001C1F6
9D1E5DBDB567F05F8F3F1A61BA73B474691F74CACD6848ADE82A55834F536104
F00FC64C53020CF41CE81AA3E0163E47536470FA80EDE9ED342FAFFB> |-
/r <1C60D8A8C9B70A9A39BAD115435C692103760AD753FC1058CB5803F60A50
08081421117EDE73D1A90ED2090A9CE03B2752411ECB8E47101FA70EA6AF3925
E26F724F899749E0491C28D6D324777227CC> |-
/s <1C60D8A8C9B752AB3A27A66A287A48B89E788FB4F111E73BFF4FB872DF32
2412D6C469D247CF2AE6E980A3381595DD05DD61E8E7150B204AA9CDCE7C65B0
7F6642F53199DDB8F7444F21A56C801FEB9DF204D8F7EB04453A08EE4F9E5AC6
AD2FDA66F1EE34BE4F6B480130D13515CDAE20F885A0C884> |-
/t <1C60D8A8C9B70582BD5BA922DAC54ABD06F06522941AC89D6EE9D68F8388
CD52FB3410DBF877285CCCC326DFDA4FF2DDF224E29D7C83171E1D7F3B0DA4AD
EA7F70867C2B320E5CE60FFC4C8FAB87F72D7823472660FAD7E91657CD92989E
F5A9C7D5BAB7CAB6EE3D47573174A08C3348473F8ABBC2949DB204> |-
/eacute <1C60D8A8C9B7DF55E951ABFB9D1E809187689A0CBAEC8BA8E667562
6361B42CF7DC8FE23BC1163A88D27666BE91D72E350AEB0A3A743A77CEFFA77C
582B9AD96BD85F0AF51FE1CFD4873DCBFB79D9CE64F1F442F75498C4CC97DAB9
662D1DD6E50F0EBC1EE144B259FE3C9ADE84B1B982E7CD90E55903E46DD7A813
246C9DB4FDCFE41CBAF18B5FDA2B1D2D38B> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C87343ECCF9C077097569818F66D
F60D0330D0984016D559AC87E6AD5A1B7053E73A56D42FEA76> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMA+Montserrat-Italic /OAAAAA+Montserrat-Italic findfont ct_VMDictPut
/DUPIMA+Montserrat-Italic*1 
[32{/.notdef}rp /two.tf /zero.tf /one.tf 10{/.notdef}rp /hyphen /period 18{/.notdef}rp 
/A 11{/.notdef}rp /M 5{/.notdef}rp /S 13{/.notdef}rp /a 2{/.notdef}rp 
/d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 
2{/.notdef}rp /r /s /t 10{/.notdef}rp /eacute 128{/.notdef}rp]
DUPIMA+Montserrat-Italic nf
DUPIMA+Montserrat-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
210.948 86.764 mo
(Mat)sh
231.361 86.764 mo
(.Andr\177sMerino)
[4.72234 7.14313 6.74471 6.75459 3.86548 6.01746 7.4819 9.51431 6.01746 3.91528 2.67993 6.74469 
0 ]xsh
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
317.04 86.764 mo
(\017)sh
DUPIMA+Montserrat-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
330.241 86.764 mo
(Semestr)sh
371.755 86.764 mo
(e !  -")
[8.62766 6.97379 6.97382 6.97375 6.97382 3.80576 0 ]xsh
201.229 88.812 mo
202.425 88.812 li
202.425 32.319 li
201.229 32.319 li
cp
f
gsave
534.337 253.851 mo
66.614 253.851 li
65.0798 253.851 63.836 252.608 63.836 251.073 cv
63.836 118.368 li
63.836 116.833 65.0798 115.59 66.614 115.59 cv
534.337 115.59 li
535.871 115.59 537.115 116.833 537.115 118.368 cv
537.115 251.073 li
537.115 252.608 535.871 253.851 534.337 253.851 cv
66.614 115.93 mo
65.2677 115.93 64.1763 117.021 64.1763 118.368 cv
64.1763 251.073 li
64.1763 252.42 65.2677 253.511 66.614 253.511 cv
534.337 253.511 li
535.683 253.511 536.775 252.42 536.775 251.073 cv
536.775 118.368 li
536.775 117.021 535.683 115.93 534.337 115.93 cv
66.614 115.93 li
clp
63.836 115.59 mo
537.115 115.59 li
537.115 253.851 li
63.836 253.851 li
cp
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.00590542 sep
f
grestore
534.337 253.511 mo
66.614 253.511 li
65.2677 253.511 64.1763 252.42 64.1763 251.073 cv
64.1763 118.368 li
64.1763 117.021 65.2677 115.93 66.614 115.93 cv
534.337 115.93 li
535.683 115.93 536.775 117.021 536.775 118.368 cv
536.775 251.073 li
536.775 252.42 535.683 253.511 534.337 253.511 cv
66.614 116.27 mo
65.4554 116.27 64.5163 117.209 64.5163 118.368 cv
64.5163 251.073 li
64.5163 252.232 65.4554 253.171 66.614 253.171 cv
534.337 253.171 li
535.495 253.171 536.434 252.232 536.434 251.073 cv
536.434 118.368 li
536.434 117.209 535.495 116.27 534.337 116.27 cv
66.614 116.27 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 253.171 mo
66.614 253.171 li
65.4554 253.171 64.5163 252.232 64.5163 251.073 cv
64.5163 118.368 li
64.5163 117.209 65.4554 116.27 66.614 116.27 cv
534.337 116.27 li
535.495 116.27 536.434 117.209 536.434 118.368 cv
536.434 251.073 li
536.434 252.232 535.495 253.171 534.337 253.171 cv
66.614 116.61 mo
65.6434 116.61 64.8564 117.397 64.8564 118.368 cv
64.8564 251.073 li
64.8564 252.044 65.6434 252.831 66.614 252.831 cv
534.337 252.831 li
535.307 252.831 536.094 252.044 536.094 251.073 cv
536.094 118.368 li
536.094 117.397 535.307 116.61 534.337 116.61 cv
66.614 116.61 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 252.831 mo
66.614 252.831 li
65.6434 252.831 64.8564 252.044 64.8564 251.073 cv
64.8564 118.368 li
64.8564 117.397 65.6434 116.61 66.614 116.61 cv
534.337 116.61 li
535.307 116.61 536.094 117.397 536.094 118.368 cv
536.094 251.073 li
536.094 252.044 535.307 252.831 534.337 252.831 cv
66.614 116.95 mo
65.8313 116.95 65.1967 117.585 65.1967 118.368 cv
65.1967 251.073 li
65.1967 251.856 65.8313 252.491 66.614 252.491 cv
534.337 252.491 li
535.119 252.491 535.754 251.856 535.754 251.073 cv
535.754 118.368 li
535.754 117.585 535.119 116.95 534.337 116.95 cv
66.614 116.95 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 252.491 mo
66.614 252.491 li
65.8313 252.491 65.1967 251.856 65.1967 251.073 cv
65.1967 118.368 li
65.1967 117.585 65.8313 116.95 66.614 116.95 cv
534.337 116.95 li
535.119 116.95 535.754 117.585 535.754 118.368 cv
535.754 251.073 li
535.754 251.856 535.119 252.491 534.337 252.491 cv
66.614 117.29 mo
66.019 117.29 65.5368 117.773 65.5368 118.368 cv
65.5368 251.073 li
65.5368 251.668 66.019 252.151 66.614 252.151 cv
534.337 252.151 li
534.932 252.151 535.414 251.668 535.414 251.073 cv
535.414 118.368 li
535.414 117.773 534.932 117.29 534.337 117.29 cv
66.614 117.29 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 252.151 mo
66.614 252.151 li
66.019 252.151 65.5368 251.668 65.5368 251.073 cv
65.5368 118.368 li
65.5368 117.773 66.019 117.29 66.614 117.29 cv
534.337 117.29 li
534.932 117.29 535.414 117.773 535.414 118.368 cv
535.414 251.073 li
535.414 251.668 534.932 252.151 534.337 252.151 cv
66.614 117.63 mo
66.207 117.63 65.877 117.96 65.877 118.368 cv
65.877 251.073 li
65.877 251.48 66.207 251.81 66.614 251.81 cv
534.337 251.81 li
534.744 251.81 535.074 251.48 535.074 251.073 cv
535.074 118.368 li
535.074 117.96 534.744 117.63 534.337 117.63 cv
66.614 117.63 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 251.81 mo
66.614 251.81 li
66.207 251.81 65.877 251.48 65.877 251.073 cv
65.877 118.368 li
65.877 117.96 66.207 117.63 66.614 117.63 cv
534.337 117.63 li
534.744 117.63 535.074 117.96 535.074 118.368 cv
535.074 251.073 li
535.074 251.48 534.744 251.81 534.337 251.81 cv
66.614 117.971 mo
66.3947 117.971 66.2171 118.148 66.2171 118.368 cv
66.2171 251.073 li
66.2171 251.292 66.3947 251.47 66.614 251.47 cv
534.337 251.47 li
534.556 251.47 534.734 251.292 534.734 251.073 cv
534.734 118.368 li
534.734 118.148 534.556 117.971 534.337 117.971 cv
66.614 117.971 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 251.47 mo
66.614 251.47 li
66.3947 251.47 66.2171 251.292 66.2171 251.073 cv
66.2171 118.368 li
66.2171 118.148 66.3947 117.971 66.614 117.971 cv
534.337 117.971 li
534.556 117.971 534.734 118.148 534.734 118.368 cv
534.734 251.073 li
534.734 251.292 534.556 251.47 534.337 251.47 cv
66.614 118.311 mo
66.5571 118.368 li
66.5571 251.073 li
66.614 251.13 li
534.337 251.13 li
534.394 251.073 li
534.394 118.368 li
534.337 118.311 li
66.614 118.311 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 251.13 mo
66.614 251.13 li
66.5571 251.073 li
66.5571 118.368 li
66.614 118.311 li
534.337 118.311 li
534.394 118.368 li
534.394 251.073 li
534.337 251.13 li
66.8974 118.651 mo
66.8974 250.79 li
534.053 250.79 li
534.053 118.651 li
66.8974 118.651 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 250.79 mo
66.8974 250.79 li
66.8974 118.651 li
534.053 118.651 li
534.053 250.79 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 249.656 mo
62.362 114.115 li
532.919 114.115 li
532.919 249.656 li
cp
.0567 .0434 0 .0154 cmyk
f
62.362 249.656 mo
62.362 129.962 li
532.919 129.962 li
532.919 249.656 li
cp
f
62.362 129.962 mo
62.362 114.514 li
532.919 114.514 li
532.919 129.962 li
cp
f
70.867 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
97.7955 114.115 mo
97.7955 111.127 li
.81 .62 0 .22 cmyk
@
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/oacute.sc <1C60D8A8C9B601B602425001D4724854651091392EE61290C700
853FCDB2FF124C66F7B2B66EF009A7BED79292F9D357EB2A1692BC6E755E57FD
8A11E5B1ACE577D53CC092386F45F91F77D5E7463D87E94EC51783CEE3E701E0
15EF0F1BB9F90B5B7030B55D85696BB6893C1B376BB6364C> |-
/one.tf <1C60D8A8C9B6317D0B00DFE26CFBD2FFD25EA28FDAFBB0569DAADAC
27560BB628CAE64945CDD59AF088526F2ADA36B68B1F44907B0504F54> |-
/D <1C60D8A8C9B6AF04659865099BA26AA68DB821361F78B2E4CC4674F8235B
EDFC7E18C51A4EACE923A1136FB3FDA60BD6525F438548B0E2B2917AE17FCA16
03A2158BD3DC223111D048E95742A46A2DF0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 33 /oacute.sc put
dup 34 /one.tf put
dup 68 /D put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf 31{/.notdef}rp /B /C /D 
/E /F 6{/.notdef}rp /M 49{/.notdef}rp /s.sc /c.sc /u.sc 
/e.sc /l.sc /a.sc /d.sc /i.sc /n.sc /iacute.sc /y.sc 
/t.sc /m.sc /aacute.sc /f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 125.195 mo
(D\202\215\206\207\206\200\206!\207)sh
129.885 125.195 mo
(")sh
%ADOBeginSubsetFont: QAAAAA+Montserrat-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QAAAAA+Montserrat-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 58 /colon put
dup 67 /C put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
def
/FontBBox {-885 -266 1679 1076} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 538 550 575 587 600 612 700 712 742 754] def
/OtherBlues [-206 -194 -112 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [138] def
/StdVW [160] def
/StemSnapH [128 134 138] def
/StemSnapV [158 160] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
13 dict dup begin
/period <1C60D8A8C9B864C99CA6011D3F7FFD4973DFEC88A5E2451E17EE4FA
4652BF3B395E67F05F77BA5E88256C420F6A7CAF32059C376E86164A038E8B3A
3> |-
/colon <1C60D8A8C9B864C99CA601475226F0EF3937AFEF377938240AA96E4E
8426ABF989040D26A4CDDD8F27E347FC67A462CF083DFBB6A28C03B4AC409FDA
E575C56A88BB2A0D7C7081390996322972EFD7827FA08F5038AD88B5889290C4
765B7AC7C3EE12> |-
/C <1C60D8A8C9B610D9B8D63FD290453AF6837F76C6D9E86AA3845B767CE8D2
C974E0327AAFC55D2147831B559AD31B03280746BD5919FC48FF791861814497
FB4B5C8E1688AAA0326B7E1E17DD3725D7DDB667AF3FE94A2B8D67E7E02F838A
A9> |-
/a <1C60D8A8C9B7D2D0458DD9A5678CB2098AA7A03048ABA68583E9E46EAD98
BAD0AAEF7D112445075DB0D27F90E1E66BBCC5C8B939CDF16B29906E49290DDB
19764B6AD7C31F80E643240DF7E71C5A1DA97B602200A30702CDC31F786EE940
3C73347F65DEB338BF644329A0D075BB108759FB601EA015AC7D547E4226968E
E591E36FF6576442097AD022E7DDDA15F86AB69504D2AC5885EB5EF653CA3897
D4EA7C11EFFED5E5D9C7> |-
/d <1C60D8A8C9B629F1B5EA9868C41689F535BF8C23DF72EC4C017C7C245D44
D82E793E7BB8433F4FD5C71CF8C9A477632171B4D2D5B8C53F3433663310D4AA
61DFF95B4F2731320EE5CC424649CEB5E079847B92B8A39F5F16AE202CC9E8CC
098BA3D75F7B4F774EC2A619385953CF584BEE01CAED47FC4FD6D9F07C5D326A
A8FD3AB180AD1C0F6D20F6212D4AC28802F270D117967F7EDCD372> |-
/e <1C60D8A8C9B66A6BDE33255B29B98A46465260C4C858AD0A41A6DD7651A2
5AE800A02747FE13F1A91AFA1CC7B13BDF60BEB99737277F5756C74590582A4A
9E912EA8814E9FDD18C164F2C116ABCAA6476AE718EB5C62A9F282C163C6A1D7
3B48DFDCF6C2685364F01CDFE76F6F6E1F043AE7AB> |-
/l <1C60D8A8C9B83FE30A895AB79169BDDA07BADA1B93C4E5A819E89E75C4FA
A3B4> |-
/n <1C60D8A8C9B6269C7C5A6962384CEB4C542005304FF4148929B2735B0C99
542ED70AE729F0B132222924064D0ABC2A0A110AF3AD73F841C13FC0A128101F
5ED32EE1FACBAC835C6636954F9B3D3F44CCA51CE7A0B65B027D608D8C5F8A21
E78FFF80C36DEB7706DECAD891F1AD8B766EA11DC8F0> |-
/o <1C60D8A8C9B64228B4F73865271F684435B8A7E396FD26B8CCA3ECCC02CA
698721D72520DF0B3EFC2354CF4EE15B89C921C0E855240FA05B2EC5214B7E8F
28D90EA803C6BA8DEA5A39302D6441669BF423C060250D934B10D4C125A4> |-
/p <1C60D8A8C9B62752303FC8F254C99BBE728F7C7C11511623B0690B15A3AB
8F38C7132C54A6EA15CD37AE19797215B03BFCC90D825291D6F50B97D99C29EA
F8FB7CF5FD6E01BCB0191DED8CD017D6FE7DF5056DC066A88B96A15AFA233904
264FD5CC7F2228DFCB7C463886F188802E0BAF7FA55F1CA8637B4F9F05552D54
C343A965E5C15AFAD4C1BA7C6A09365B298414F096F4ECACE6902BCB77> |-
/r <1C60D8A8C9B76C9005652F9BB58C0E28F89BED504D1F3173A16CAE92D6B2
F038314A6A44AFE3F63308E5BD7C8658DB5BCC5E4E2211142BDC673AABB4A655
5556653B7AF33857AF36B61885F809ADB87319732BA6F5D6A3D721> |-
/s <1C60D8A8C9B7883C4F4F043210942117EDFD14FC8FB61880D6265444725E
A74462476AD64A316CED22C4CBE6477D269E4B6E947CEFBBBC994C4F5EE564A0
52BED61F33F3016BE2B8094AC07033FD4E79CA0AACD80B4DFAC97B4CD7C7120B
E4F7914FF0ADDE082332954A4C0E3B436FB5D2D159620DB75F045B78> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMB+Montserrat-Bold /QAAAAA+Montserrat-Bold findfont ct_VMDictPut
/DUPIMB+Montserrat-Bold*1 
[46{/.notdef}rp /period 11{/.notdef}rp /colon 8{/.notdef}rp /C 29{/.notdef}rp /a 
2{/.notdef}rp /d /e 6{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /s 140{/.notdef}rp]
DUPIMB+Montserrat-Bold nf
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
136.858 125.195 mo
(:Coordenadaspolares.)
[5.42955 7.11331 6.5255 6.52548 4.20422 6.89413 6.28636 6.88409 6.18683 6.89413 6.14696 8.10962 
6.87421 6.5255 2.9987 6.14696 4.20421 6.28638 5.29019 0 ]xsh
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 110 /n put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/E <1C60D8A8C9B65062E65498E36F624C94DB75CE7BF6CF2A1A0F3729531129
4D85A7B7D5575446822F5E83C83CCCE0C9EDC9E00DD1C6F13A4D8DC909> |-
/n <1C60D8A8C9B658EF524C481D1AC2DCE09E139D0E78EED180E3B130A1A3EF
D44884A49F660A5146ACBFE0B1A0F155D2FA233D584C764CF0BB7305653A71D1
E8FB1CA02D88FB933B5DDAF4F7B89653D0E220963F5C8E78957688276BF454E1
63793E526CFEC864F776EF7E7D0C> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular /RAAAAA+Montserrat-Regular findfont ct_VMDictPut
/DUPIMC+Montserrat-Regular*1 
[69{/.notdef}rp /E 40{/.notdef}rp /n 145{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 142.988 mo
(En)
[6.66504 0 ]xsh
%ADOBeginSubsetFont: SAAAAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SAAAAA+MSBM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSBM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6079F1E7838D45200AB9CB22597F21F6361648E8FDDD666EB
0CF7B9EF8F2C30DE5503BDB7C71C5E67A1F9A81847A349A9D5F7137475465FDB
14641D338C0C604C51D762DF8CA0F6A27DF0EB148BE88D485F21388070605E41
62DA42B90EA15109197ADCCF064DEE8C994045382891EAA34E027FCD527A9951
9AAB139E612CB2DCDDD6290B8216A6AF7B9FCCD4D0BCBA375AFAF81986C74DC7
068022C0FC19A0C61194F9B8AA264188570B4E48C925610D8113954F9B284F3F
BE6D8DDC6D2714398DCF03C14D6402B9B340A9193F2643E7F6675EA2041F1300
4EC5BA6C7473ED394EFB24B3F12E19EFD39125FC75CC7955D633507C83DB46B2
D2DCF7C5A4E282E5171260AE4CF9FB783F8EC30936561DC2FBDE5BCA293DA1BA
3E478132D1662F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMD+MSBM10 /SAAAAA+MSBM10 findfont ct_VMDictPut
/DUPIMD+MSBM10*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
DUPIMD+MSBM10 nf
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
86.886 142.988 mo
(R)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TAAAAA+Montserrat-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2011 The Montserrat Project Authors \\\\\\\(https://github.com/JulietaUla/Montserrat\\\\\\\)) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /two.tf put
def
/FontBBox {-824 -262 1586 1043} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-6 0 525 532 565 572 600 606 700 706 742 748] def
/OtherBlues [-200 -194 -106 -100] def
/BlueScale 0.0369999 def
/BlueFuzz 0 def
/StdHW [66] def
/StdVW [71] def
/StemSnapH [66] def
/StemSnapV [71] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/two.tf <1C60D8A8C9B6317D0B3C2AD974DB1E09FEA10DFCE710C82CAC4E7E7
783FF2063F902528A22A4D9E5F0FEBF9644D3F8B7891CE854177217BD6E0B9ED
85B3911F3845216A5D332EB313F5BBCD3B754DEC9D1431661DB8B98> |-
/.notdef <1C60D8A8C9B7F000AD2CED2D91C8738E548389197D6E2F99BF39E6
741036AD2264474D1145D8CDDD45FA26C6F5A246AC44> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular /TAAAAA+Montserrat-Regular findfont ct_VMDictPut
/DUPIME+Montserrat-Regular*1 
[127{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
94.642 139.089 mo
(\177)sh
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/oacute <1C60D8A8C9B66621CE82B94831125BE347163471DDD87B88F6BAF74
1CCD5F7148F388F963DDB35960F4BCC748F5257B1502312ED61DC529753E7E22
B51A86C23CD1C01B0451319ACCA42BD9B96EC300984A4C2948124C4F4750A55E
504A4F5B1DBA62DEFC3C20BC697C8FDF329915CCAB05153> |-
/comma <1C60D8A8C9B89618EBEB2377D91D16555BB99A694C1AFB85EDC12325
03412BA311B3A0CD981F092EB3E43F2437D3689147811D3BE5> |-
/a <1C60D8A8C9B7CDD8B30C9787163E377BD6252004AB55582AF2331564BD48
DCF2E42DB2D0ED352EA698E850BA80232F64601A00CA641A079F79157004676B
D96B66730BBAF5E01BDB71E38EDD14D4B99AB6EC611588550D21C1FEE176A22F
694BE69CE84406B83BDE4A890C7E59DB1E901CD2955A6AACA958D17203F526A6
F2615DADA0C8E6233D7707DC9FE709AA83520D289B23A76E4D807D38166E45A1
7822> |-
/b <1C60D8A8C9B65B4396CC36579768D5BE2B9485BBED0F073226B1A367A05C
6EF875E30E5DEE9F898BFF45822EECD640F0353C6AD1739B3B288E696FD084E7
88C04CD81F745605FF259486B55D7A19AAB501C6842A84EE9B6AB721EC2BB1BA
53613697227200BBC66085EF2062446BD65F769D276157460FAEF60345112F5E
9B28F4F1140699329AEFDC684EEE5004F92888EF6E7688A1> |-
/c <1C60D8A8C9B7E89793FE683E3003ECFAEA29870144DE0AD98E6388B5D73D
921EB35E31D1A068E03545C3BF93A57E52B4DD7B51A445F1531BFC25C7E4031A
75B334CE7E77F2787B7686DD8B431D2A14AFFD9ACFD29EB7049F228E> |-
/d <1C60D8A8C9B65B4396CC36579768D5BE2B9485EC1200960DA32D135FE72A
71C47539F0C3AC5531BA0BE39168F81052858B46839F65EC4F935A69FE890FD7
EC2943DCCB92DDBF9CCBEBC62F9F46A1D5B14EB876552E1AB7689C4B236DE24C
AA099B03E3EE21C2B57F7C47ACF89443CD05E8EC53695EF30F60FBDC12A36D04
6765C4D2FD38066436461FB58215FE4F1D4BF231C89369> |-
/e <1C60D8A8C9B7DF55E951ABFB9FBB4FEA35D61F99C8E04641B790D8A0DB6E
09EF43CECF53983E268A1BCD87A986C6209A09DBA0365C50E6BC10C013B6CA78
2FE9371F3B2FFCA45600E3B906CB2D368CEAB9E6FA9B12928897BA47209216D1
90EF69F44866026CADFC436DA02583F909E53FB43B1C43CA> |-
/f <1C60D8A8C9B8194754F97391F72D98D4E87B5407564E86A131E7D0EF6863
E942F19AD5A5753EAF82696724F9A606FD78A7EF3CB39571B00C3394D3AED516
4BA0C7E3BB241D623E13734ED3DFC9D98EFE41BD7F> |-
/i <1C60D8A8C9B85FB10645229D56925DB2EF573F5BCB49F61F8D635997186E
960EE821A2E046146065630D04F5E2D9147414DD54B0CB079F610ABE041B3D84
7060641108FFA6918BAE43E97ABBFC> |-
/l <1C60D8A8C9B85FB10645229C5FFA68667F6EA467D4CB596B69F4A3DD65> |-
/m <1C60D8A8C9B52BF25C98304B4309FC6A4585DD5A215660353D876468A13E
0C05EEB3F61477765C199B2BE0A11B6A2E413509001195C23A30C7E43F8CE68E
9D3E5E87277A1F3E48B10C797B9D1FE6001573A918364082B45CDC3CFAC9CFC7
6EB7F50C5DDBBC03EBE6C37BE9BA8A33CB0BEB8D469DCC72A7255328341347BD
9E6A66C678136DE66C091B1389E29B0B48499690F443B03BC779B73A> |-
/o <1C60D8A8C9B66621CE82B94831125BA299C84F50F007387DD3BEB5F3AF3E
9C4FC225B0F92506EB260E04132C269EE3447730D6198E2FF4B9A26D342A1607
B8D3ACE1960FD3B275EDEF54A0A58ADCA50E6EA4B2C38A709050B699C4660037
30> |-
/p <1C60D8A8C9B65B43EBD1F2720CA86EE1EF0A3B6CDAE55971467D05E84B1C
94E22C6E1E703321E374F14E85BA69E6A433A7DCAA082979EA78870C208060AD
87F0D2AC49CEFB839ED40CA402A1C8E2B0C1ADCB32905B682B0F4E5702BA4E27
B67C97F6D63568795E785573D5EE61C70D96FF6EE7E22C976220FEA58444465C
02C537A52585BF00081C1E790F314E47FCDFCC86C59215FB> |-
/r <1C60D8A8C9B70A9A39BAD115435C6975645156F108A561DB6F35010AB694
EB08B2686DC15DED5D051859C9E022880A3E7B2A8EF3DABB02EDD32EF37B80A9
FAE70CE90732029847A7> |-
/s <1C60D8A8C9B752AB3A27A66A287A499D7554D41879346EBFBEC672474E24
2AF9090E3CB854602FC9087BF8C27EEF598F8CE4D950ADE992DF267AABED60D6
978F9118C1719709F469DE4ACFF5DE822BBD28EC04CFFA9FDB7CFF7E8E84AFD4
7EDFFE16CEDB3C818498D737C67D73CDC3B9E1F8235DDD1F0C> |-
/u <1C60D8A8C9B654A489AF8583E1E4CC1B5AD724DE720C13929A0A86D963E5
4AAA832E2BA6B7EC7E8E0F2565A00B8E10B85125979AAD45B2103E620EBDE0AE
79CC6182BD7F47E24A50FBDA478A0523C33D3695BD30F46C3221F8EB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 32 /oacute put
dup 44 /comma put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma 24{/.notdef}rp /E 27{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/.notdef /u 138{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
100.022 142.988 mo
(,elcambioacoordenadaspolareseslafunci n)
[4.72233 6.01745 5.29012 5.60898 5.87789 10.5704 6.75458 2.67992 8.85674 8.4881 5.51932 6.24655 
6.24652 3.86551 6.75458 6.01746 6.74469 5.8779 6.75458 5.8779 7.4819 6.75458 6.24655 2.6799 
5.8779 3.86551 6.01746 7.48187 6.01746 7.48187 2.67993 8.48807 3.37738 6.70486 6.74469 5.5293 
2.6799 6.24655 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+EURM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UAAAAA+EURM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EURM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
def
/FontBBox {-32 -243 1060 720} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [69] def
/StdVW [78] def
/StemSnapH [69 83] def
/StemSnapV [78 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/P <1C60D8A8C9B7FBE1B386EF994EC5BAEE240785B531031558073CB0D5EA1B
EC91BD768E022A945EC001BBB4396BE724E50F1AA06A89759E98BE70EAABCC32
F6E633E56B8B8EB7A957A53E5A5685731CE4D55671582869AC83A8278A557079
883D211D5962B2BC984BE2BE5D30A70780C467500AAFEF1E2DBC9C44F1E62882
64E249DCD2A4CDCA020054A6B4> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMF+EURM10 /UAAAAA+EURM10 findfont ct_VMDictPut
/DUPIMF+EURM10*1 
[80{/.notdef}rp /P 175{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
230.665 167.914 mo
(P)sh
%ADOBeginSubsetFont: VAAAAA+EUFM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VAAAAA+EUFM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUFM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
def
/FontBBox {-28 -257 1055 741} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 450 471 670 670 690 692] def
/OtherBlues [-155 -133] def
/BlueScale 0.0437899 def
/StdHW [45] def
/StdVW [76] def
/StemSnapH [35 45] def
/StemSnapV [76 85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/colon <1C60D8A8C9B892D14827A1239626F026A2543CBAEE6A4796A854F465
990AE611A29E5682AB85027E1AB5DE5A5608C82295B0793F4C4EFB3E570C75E7
1650AE1BFED205A12137> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMG+EUFM10 /VAAAAA+EUFM10 findfont ct_VMDictPut
/DUPIMG+EUFM10*1 
[58{/.notdef}rp /colon 197{/.notdef}rp]
DUPIMG+EUFM10 nf
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
238.334 167.914 mo
(:)sh
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
250.961 167.914 mo
(R)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
258.717 164.016 mo
(\177)sh
%ADOBeginSubsetFont: MAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILY+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILY+CMSY10 /Encoding get
dup 32 /minus put
dup 33 /arrowright put
pop
%ADOEndSubsetFont
/DUPILY+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 222{/.notdef}rp]
DUPILY+CMSY10 nf
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
273.02 167.914 mo
( !)
[6.57056 0 ]xsh
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
294.31 167.914 mo
(R)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
302.067 164.016 mo
(\177)sh
%ADOBeginSubsetFont: VAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMG+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B7361F0E10D832447F53988266C6AE5DF25BFA72E6
764E51C9594381C872341CB985FF621BC08F7B0F442DB1D6DAA771144FE37659
55E89C3849CCE912C4291F908C57964BDE8C52E09B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMG+EUFM10 /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/DUPIMG+EUFM10*1 
[40{/.notdef}rp /parenleft 17{/.notdef}rp /colon 197{/.notdef}rp]
DUPIMG+EUFM10 nf
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
246.023 182.261 mo
(\()sh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B76BC2DA60FDFF78B41D9571DA3CC048F4376A74244D97CD53
1D335467FA003AC24FFDFCA02582E430368124179A28AC6C62C001B0B50D2962
680D63AA8689B386FDA2BE3668AD7A2E32DE5B3B8AE5CB3098566D7E6D7D11CD
47DB778DC0325FB1FB0576E1200959FB44DC79C9D148> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[80{/.notdef}rp /P 33{/.notdef}rp /r 141{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
250.201 182.261 mo
(r)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B89618EBEB2377D91D16555BB99A694C1AFB85EDC12325
03412BA311B3A0CD981F092EB3E43F2437D3689147811D3BE5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 44 /comma put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[44{/.notdef}rp /comma 82{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
254.841 182.261 mo
(,)sh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/theta <1C60D8A8C9B7917EF2DC2E669D9B8D1C0489743C6C02EB849C37F503
7F92FC35234F0307DD2647A4892B9288EEBB1513CB41ADE9597E199038F98B88
6CAA5FB2DBB627E9EBDA7AA7D3B7359746D5D75154CE63295C0FB19AAA772523
2DC661675D2C282298B59F28DB36AF67E95F76B2578ECE577DC88D3630E00213
0120A0614CAEE1DB1C401D49C41A63> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 18 /theta put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 61{/.notdef}rp /P 33{/.notdef}rp /r 141{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
258.907 182.261 mo
(\022)sh
%ADOBeginSubsetFont: VAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMG+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B7361F0E11E7E700DD25FEFADF7CD9B3A3FA89F24
82CC5DE038BD5275AA9AAA49256CE45EDEB936B803714023C3DAF78196C20C86
4EAB94FB0C92371FAB980791B7980AF15C141474F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMG+EUFM10 /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/DUPIMG+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 197{/.notdef}rp]
DUPIMG+EUFM10 nf
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
264.857 182.261 mo
(\))sh
%ADOBeginSubsetFont: MAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILY+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mapsto <1C60D8A8C9C4A6CECE728ED8254DC595D3E1F41AECEEF940033A745
96F549E5DE2C43E95B2C130E3D481B6076F74F0BA4BE16E4479E8F410> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILY+CMSY10 /Encoding get
dup 55 /mapsto put
pop
%ADOEndSubsetFont
/DUPILY+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 21{/.notdef}rp /mapsto 200{/.notdef}rp]
DUPILY+CMSY10 nf
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
273.02 182.261 mo
(7 !)
[0 6.57056 0 ]xsh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
294.31 182.261 mo
(P)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
300.786 182.261 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
304.964 182.261 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
309.604 182.261 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
313.67 182.261 mo
(\022)sh
%ADOBeginSubsetFont: VAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMG+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B6E9C31A6A8F88ABB2A9FFBB6D3CBC2CFC1F6EE9157986
F28C227701215E4791EAC85ABFCF05> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMG+EUFM10 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/DUPIMG+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright 16{/.notdef}rp /colon 2{/.notdef}rp /equal 194{/.notdef}rp]
DUPIMG+EUFM10 nf
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
319.62 182.261 mo
(\)=\()
[7.15903 11.107 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B78D34212439F172AAE653D66D9E26F6B685FAA5B693542F7C
23F39463D1614EBA6308E173AA4D17C81AC8077D433F4F1A17A669113EAB1B00
104E1498DC3E13C9E59D4C7AF6F512DAC7A5C3ABD87572758F24B3B76B5E2295
A7F9355B22CA5BC584F52C2407FE2BB09F7D5D33BC8B797BFEC7652A57162BA0
3A5DDD9F3AF7DF1A4C1BDDF1FB60066AF188F02968A61D7AC71E2588250A0F2E
9B26C12A869EA0B611> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 61{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x 
135{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
342.061 182.261 mo
(x)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
347.71 182.261 mo
(,)sh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7C99668C063669882F2A52932F0A85A5AF0828F9C1E80B7E1
DBC600A7C2B4E7F59E7DCC3EBDBCB2776E822DC1F8C594E8DA2078D335FBD01E
CFD747A131576B8EC6F9280B71449927A07BA811C468A8411DB8A9D8EDC1CC18
26BCE4C396353B5DA354DE54557581092C1C599259AF39CD893F3A3FB2B2F080
5A3FD43EF49BADD536F29425819FFD2F52A85EC55CA5C12C755F20E1BA5590C9
B8D05F5BE0ADA43BC7A6F6F548E43A51D44BB79EE7CD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 61{/.notdef}rp /P 33{/.notdef}rp /r 5{/.notdef}rp /x 
/y 134{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
351.777 182.261 mo
(y)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
358.156 182.261 mo
(\))sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
362.334 182.261 mo
(,)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.8661 206.853 mo
(donde)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
215.706 221.199 mo
(x)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
224.338 221.199 mo
(=)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
235.44 221.199 mo
(r)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B7E89793FE683E3003ECFAEA29870144DE0AD98E6388B5D73D
921EB35E31D1A068E03545C3BF93A57E52B4DD7B51A445F1531BFC25C7E4031A
75B334CE7E77F2787B7686DD8B431D2A14AFFD9ACFD29EB7049F228E> |-
/o <1C60D8A8C9B66621CE82B94831125BA299C84F50F007387DD3BEB5F3AF3E
9C4FC225B0F92506EB260E04132C269EE3447730D6198E2FF4B9A26D342A1607
B8D3ACE1960FD3B275EDEF54A0A58ADCA50E6EA4B2C38A709050B699C4660037
30> |-
/s <1C60D8A8C9B752AB3A27A66A287A499D7554D41879346EBFBEC672474E24
2AF9090E3CB854602FC9087BF8C27EEF598F8CE4D950ADE992DF267AABED60D6
978F9118C1719709F469DE4ACFF5DE822BBD28EC04CFFA9FDB7CFF7E8E84AFD4
7EDFFE16CEDB3C818498D737C67D73CDC3B9E1F8235DDD1F0C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 99 /c put
dup 111 /o put
dup 115 /s put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[44{/.notdef}rp /comma 54{/.notdef}rp /c 11{/.notdef}rp /o 3{/.notdef}rp /s 
11{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
241.87 221.199 mo
(cos)
[5.94983 6.73378 0 ]xsh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
259.805 221.199 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
263.983 221.199 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
269.933 221.199 mo
(\))sh
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B79D2DA46A3E65E6109C1C2A9140A7F620D15663DE59AEE5F5
9AF3E8193320B4639D6A92DA1A61119CE0991ACEAE5C833FC6589BFBF5D49152
32D0820102C55E18D4DCEC7DB6F54022FFCFB922FE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma 24{/.notdef}rp /E 27{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/.notdef /u 3{/.notdef}rp /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
294.036 221.199 mo
(y)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
319.361 221.199 mo
(y)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
328.723 221.199 mo
(=)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
339.826 221.199 mo
(r)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B7DF55E951ABFB9FBB4FEA35D61F99C8E04641B790D8A0DB6E
09EF43CECF53983E268A1BCD87A986C6209A09DBA0365C50E6BC10C013B6CA78
2FE9371F3B2FFCA45600E3B906CB2D368CEAB9E6FA9B12928897BA47209216D1
90EF69F44866026CADFC436DA02583F909E53FB43B1C43CA> |-
/n <1C60D8A8C9B658EF524C481D1AC2DCE09E139D0E78EED180E3B130A1A3EF
D44884A49F660A5146ACBFE0B1A0F155D2FA233D584C764CF0BB7305653A71D1
E8FB1CA02D88FB933B5DDAF4F7B89653D0E220963F5C8E78957688276BF454E1
63793E526CFEC864F776EF7E7D0C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 101 /e put
dup 110 /n put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[44{/.notdef}rp /comma 54{/.notdef}rp /c /.notdef /e 8{/.notdef}rp /n 
/o 3{/.notdef}rp /s 11{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
346.255 221.199 mo
(sen)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
365.265 221.199 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
369.442 221.199 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
375.392 221.199 mo
(\))sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.8661 242.719 mo
(para)
[6.72469 5.8779 3.52677 0 ]xsh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
95.4841 242.719 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
99.6611 242.719 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
104.301 242.719 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
108.368 242.719 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
114.317 242.719 mo
(\))sh
%ADOBeginSubsetFont: MAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILY+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/element <1C60D8A8C9B64FAD2EF2B8851D1968E5D029958E40ACD5147C4074
1E22A1237398886102D9E824068CF8CCB984BE3805C3EE450A9950F9ADBD244A
087E2AE7BA5402D250A2547E9B9000BF371B31F9A1575410E09C98112EBDE784
B50FA20B3F67AF0A9C97E9C2EA9A7FD1BDD7C5C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILY+CMSY10 /Encoding get
dup 50 /element put
pop
%ADOEndSubsetFont
/DUPILY+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 4{/.notdef}rp 
/mapsto 200{/.notdef}rp]
DUPILY+CMSY10 nf
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
121.478 242.719 mo
(2)sh
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
131.625 242.719 mo
(R)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
139.381 238.82 mo
(\177)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B89618F2B5D11A0D8020C6D6789D505D06A4BDDDF76C7
6DDEC319AF39778546B50F3D1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /.notdef /period 22{/.notdef}rp /E 
27{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /.notdef /u 3{/.notdef}rp /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
144.761 242.719 mo
(.)sh
526.75 334.586 mo
63.836 334.586 li
63.836 258.302 li
537.115 258.302 li
537.115 324.222 li
526.75 334.586 li
64.1763 258.642 mo
64.1763 334.246 li
526.609 334.246 li
536.775 324.081 li
536.775 258.642 li
64.1763 258.642 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
526.609 334.246 mo
64.1763 334.246 li
64.1763 258.642 li
536.775 258.642 li
536.775 324.081 li
526.609 334.246 li
64.5163 258.982 mo
64.5163 333.906 li
526.468 333.906 li
536.434 323.94 li
536.434 258.982 li
64.5163 258.982 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
526.468 333.906 mo
64.5163 333.906 li
64.5163 258.982 li
536.434 258.982 li
536.434 323.94 li
526.468 333.906 li
64.8564 259.322 mo
64.8564 333.566 li
526.327 333.566 li
536.094 323.799 li
536.094 259.322 li
64.8564 259.322 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
526.327 333.566 mo
64.8564 333.566 li
64.8564 259.322 li
536.094 259.322 li
536.094 323.799 li
526.327 333.566 li
65.1967 259.662 mo
65.1967 333.226 li
526.186 333.226 li
535.754 323.658 li
535.754 259.662 li
65.1967 259.662 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
526.186 333.226 mo
65.1967 333.226 li
65.1967 259.662 li
535.754 259.662 li
535.754 323.658 li
526.186 333.226 li
65.5368 260.003 mo
65.5368 332.885 li
526.045 332.885 li
535.414 323.517 li
535.414 260.003 li
65.5368 260.003 li
1 /0 /CSD get_res sepcs
.11614 sep
f
526.045 332.885 mo
65.5368 332.885 li
65.5368 260.003 li
535.414 260.003 li
535.414 323.517 li
526.045 332.885 li
65.877 260.343 mo
65.877 332.545 li
525.904 332.545 li
535.074 323.376 li
535.074 260.343 li
65.877 260.343 li
1 /0 /CSD get_res sepcs
.159446 sep
f
525.904 332.545 mo
65.877 332.545 li
65.877 260.343 li
535.074 260.343 li
535.074 323.376 li
525.904 332.545 li
66.2171 260.683 mo
66.2171 332.205 li
525.764 332.205 li
534.734 323.235 li
534.734 260.683 li
66.2171 260.683 li
1 /0 /CSD get_res sepcs
.183068 sep
f
525.764 332.205 mo
66.2171 332.205 li
66.2171 260.683 li
534.734 260.683 li
534.734 323.235 li
525.764 332.205 li
66.5571 261.023 mo
66.5571 331.865 li
525.623 331.865 li
534.394 323.094 li
534.394 261.023 li
66.5571 261.023 li
1 /0 /CSD get_res sepcs
.194879 sep
f
525.623 331.865 mo
66.5571 331.865 li
66.5571 261.023 li
534.394 261.023 li
534.394 323.094 li
525.623 331.865 li
66.8974 261.363 mo
66.8974 331.525 li
525.482 331.525 li
534.053 322.953 li
534.053 261.363 li
66.8974 261.363 li
1 /0 /CSD get_res sepcs
.200784 sep
f
525.482 331.525 mo
66.8974 331.525 li
66.8974 261.363 li
534.053 261.363 li
534.053 322.953 li
525.482 331.525 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 330.391 mo
62.362 256.828 li
532.919 256.828 li
532.919 321.654 li
524.182 330.391 li
cp
0 0 .2 .8 cmyk
f
62.7605 329.992 mo
62.7605 257.226 li
532.521 257.226 li
532.521 321.488 li
524.017 329.992 li
cp
0 0 .5 0 cmyk
f
532.521 321.488 mo
521.182 324.323 li
524.017 329.993 li
0 0 .4 .2 cmyk
f
.3985 lw
532.658 321.454 mo
521.182 324.323 li
524.081 330.119 li
0 0 .2 .8 cmyk
@
62.7605 329.992 mo
62.7605 257.226 li
78.3512 257.226 li
78.3512 329.992 li
cp
0 0 .5 .5 cmyk
f
1 /1 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: WAAAAA+FontAwesome Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WAAAAA+FontAwesome def
/FontInfo 7 dict dup begin
/Notice (Copyright Dave Gandy 2016. All rights reserved.) def
/Weight (Roman) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /warning_sign put
def
/FontBBox {-1 -144 1287 858} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 750 765] def
/BlueScale 0.0396249 def
/BlueShift 6 def
/StdHW [71] def
/StdVW [71] def
/StemSnapH [71 143] def
/StemSnapV [71 143] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/warning_sign <1C60D8A8C9B5EE31BE3EE2EB170F6E70993A42FBF7E3460D8
8C16138C72D2904F9D95C501FC0AAC60BD89B3618AAB381F8F994534C7C49DAB
00059E7855D48575DB5767E48643949D583F81819EE415C275FE131224D10C86
4B10A8DA77A55F52D97D05B6DC849725DE42DB606C54FC224299A0964FA60796
4E39A561207819F6A033AFBCE22776F5925488D6C569DAFD737D53A57816C2A0
EB4FF29DDD94D511124> |-
/.notdef <1C60D8A8C9B7A73DC51A1CA963140D476F7DF2D6FE929ED20EA713
298CDB281DDE84D86DC1A616536ADD2CF3DEA5EF7B8533AF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMH+FontAwesome /WAAAAA+FontAwesome findfont ct_VMDictPut
/DUPIMH+FontAwesome*1 
[127{/.notdef}rp /warning_sign 128{/.notdef}rp]
DUPIMH+FontAwesome nf
DUPIMH+FontAwesome*1 [11.9552 0 0 -11.9552 0 0 ]msf
64.578 298.308 mo
(\177)sh
62.7605 329.992 mo
62.7605 257.226 li
78.3512 257.226 li
78.3512 329.992 li
cp
0 0 .5 .5 cmyk
f
1 /1 /CSD get_res sepcs
0 sep
DUPIMH+FontAwesome*1 [11.9552 0 0 -11.9552 0 0 ]msf
64.578 298.308 mo
(\177)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B6A0FC7B4530291947184EA2B01D678E29A1E0CEBEA3E27DC9
FB2F12FFA99FD8CD2AFE3F1D950812B8844AAACAB34F98D0CE45EB0C> |-
/q <1C60D8A8C9B65B43EBD1F2720CA86EE12596465270D4A712FB917352A6FF
70382835D914EA9D3C6E69357338B5D2656D0757605FAE62CA8AC39EA6E5F761
6EEB609C7D5206BD66E50034C7CA9F38F021251BB776D47D770C18C3E2D6F0BF
7E93F54253D3789B010ECA15F77445F5EA5774694A1C4F4E2942A8C4BB976497
A040E99FAEC46231A0074FA68563A199E5C767BBEC170035876754677F6AEF84
0221A928BF438803C1D746505C64D57D8AA9FC75DAB9250C168618509ECE17> |-
/t <1C60D8A8C9B70582BD5BA922DAC54AAB53FD38C64CF2E14B1880285E9FCD
C5E53EC2D184E9CCCB00FBF4B237D3FBEC84FFF7CC8F523EFEEA4A64F8629721
8DA4BC9DEF28AF99493FD9932EFE2B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 78 /N put
dup 113 /q put
dup 116 /t put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /.notdef /period 22{/.notdef}rp /E 
8{/.notdef}rp /N 18{/.notdef}rp /a /b /c /d /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
/p /q /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
82.603 269.528 mo
(Not)sh
100.805 269.528 mo
(emos)sh
131.121 269.528 mo
(que)sh
153.208 269.528 mo
(si)
[4.8717 0 ]xsh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
163.37 269.528 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
167.548 269.528 mo
(x)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
173.197 269.528 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
177.264 269.528 mo
(y)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
183.643 269.528 mo
(\)=)
[7.15904 0 ]xsh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
201.906 269.528 mo
(P)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
208.382 269.528 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
212.56 269.528 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
217.2 269.528 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
221.266 269.528 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
227.216 269.528 mo
(\))sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
231.394 269.528 mo
(,entoncessetieneque)
[4.72234 6.01744 6.74471 3.85558 6.24654 6.74472 5.51929 6.01746 7.4819 4.8717 8.62766 4.04486 
2.67993 6.01743 6.74472 8.62762 6.75458 6.7049 0 ]xsh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
221.191 295.664 mo
(r)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
225.831 291.229 mo
(\177)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
234.194 295.664 mo
(=)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
245.296 295.664 mo
(x)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
250.945 291.229 mo
(\177)sh
%ADOBeginSubsetFont: VAAAAA+EUFM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMG+EUFM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6E9C31A6A8F88A504C11E84AEC51ED63C864C0388E4FAE
488935A50189A92EF50CD2F0585D0DDD20AA88D4EE9118D39319F0D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMG+EUFM10 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/DUPIMG+EUFM10*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 14{/.notdef}rp /colon 2{/.notdef}rp 
/equal 194{/.notdef}rp]
DUPIMG+EUFM10 nf
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
258.712 295.664 mo
(+)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
269.218 295.664 mo
(y)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
275.597 291.229 mo
(\177)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
300.902 295.664 mo
(y)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7CDD8B30C9787163E377BD6252004AB55582AF2331564BD48
DCF2E42DB2D0ED352EA698E850BA80232F64601A00CA641A079F79157004676B
D96B66730BBAF5E01BDB71E38EDD14D4B99AB6EC611588550D21C1FEE176A22F
694BE69CE84406B83BDE4A890C7E59DB1E901CD2955A6AACA958D17203F526A6
F2615DADA0C8E6233D7707DC9FE709AA83520D289B23A76E4D807D38166E45A1
7822> |-
/t <1C60D8A8C9B70582BD5BA922DAC54AAB53FD38C64CF2E14B1880285E9FCD
C5E53EC2D184E9CCCB00FBF4B237D3FBEC84FFF7CC8F523EFEEA4A64F8629721
8DA4BC9DEF28AF99493FD9932EFE2B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 97 /a put
dup 116 /t put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[44{/.notdef}rp /comma 52{/.notdef}rp /a /.notdef /c /.notdef /e 
8{/.notdef}rp /n /o 3{/.notdef}rp /s /t 10{/.notdef}rp /two.tf 
128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
328.017 295.664 mo
(tan)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
345.985 295.664 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
350.162 295.664 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
356.112 295.664 mo
(\)=)
[7.15903 0 ]xsh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
375.571 288.394 mo
(y)sh
.43 lw
375.571 292.904 mo
381.95 292.904 li
@
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
375.936 303.032 mo
(x)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
383.146 295.664 mo
(,)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
82.603 323.056 mo
(paratodo)
[6.72469 5.8779 3.52677 8.4881 3.85558 6.24654 6.75459 0 ]xsh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
132.934 323.056 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
137.112 323.056 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
141.752 323.056 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
145.818 323.056 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
151.768 323.056 mo
(\))sh
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
158.929 323.056 mo
(2)sh
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
169.076 323.056 mo
(R)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
176.832 319.157 mo
(\177)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
184.822 323.056 mo
(tal)sh
200.035 323.056 mo
(que)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
222.122 323.056 mo
(x)sh
%ADOBeginSubsetFont: MAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILY+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/negationslash <1C60D8A8C9C4A6C26B10FB8D5BDE6CDBBEB886041A010C58
7BDBB6C6D81F15A730606F174AB3495E2650C76FA5AB4C017DE7B4889B1BFCC1
5958E3BD07C0EB458EBB4CF8D9C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILY+CMSY10 /Encoding get
dup 54 /negationslash put
pop
%ADOEndSubsetFont
/DUPILY+CMSY10*1 
[15{/.notdef}rp /bullet 16{/.notdef}rp /minus /arrowright 16{/.notdef}rp /element 3{/.notdef}rp 
/negationslash /mapsto 200{/.notdef}rp]
DUPILY+CMSY10 nf
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
230.754 323.056 mo
(6)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
230.754 323.056 mo
(=)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero.tf <1C60D8A8C9B6317D05EC76DC71E707AAC9B6045108EC740F7E1886
ACCD20B2D26EFAF6F8F18809BB0BF5C1CD002B030BA2A2CDD3CF5352CC3AD3F2
D2F59CE7761975173B095D049136310053BCD949F7ED04A0C9DF01E6073AAE31
1CA967E2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 32 /zero.tf put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[32{/.notdef}rp /zero.tf 11{/.notdef}rp /comma 52{/.notdef}rp /a /.notdef /c 
/.notdef /e 8{/.notdef}rp /n /o 3{/.notdef}rp /s /t 
10{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
241.857 323.056 mo
( )sh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.375 323.056 mo
(.)sh
534.337 373.377 mo
66.614 373.377 li
65.0798 373.377 63.836 372.133 63.836 370.599 cv
63.836 344.605 li
63.836 343.071 65.0798 341.828 66.614 341.828 cv
534.337 341.828 li
535.871 341.828 537.115 343.071 537.115 344.605 cv
537.115 370.599 li
537.115 372.133 535.871 373.377 534.337 373.377 cv
66.614 342.168 mo
65.2677 342.168 64.1763 343.259 64.1763 344.605 cv
64.1763 370.599 li
64.1763 371.946 65.2677 373.037 66.614 373.037 cv
534.337 373.037 li
535.683 373.037 536.775 371.946 536.775 370.599 cv
536.775 344.605 li
536.775 343.259 535.683 342.168 534.337 342.168 cv
66.614 342.168 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 373.037 mo
66.614 373.037 li
65.2677 373.037 64.1763 371.946 64.1763 370.599 cv
64.1763 344.605 li
64.1763 343.259 65.2677 342.168 66.614 342.168 cv
534.337 342.168 li
535.683 342.168 536.775 343.259 536.775 344.605 cv
536.775 370.599 li
536.775 371.946 535.683 373.037 534.337 373.037 cv
66.614 342.508 mo
65.4554 342.508 64.5163 343.447 64.5163 344.605 cv
64.5163 370.599 li
64.5163 371.758 65.4554 372.697 66.614 372.697 cv
534.337 372.697 li
535.495 372.697 536.434 371.758 536.434 370.599 cv
536.434 344.605 li
536.434 343.447 535.495 342.508 534.337 342.508 cv
66.614 342.508 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 372.697 mo
66.614 372.697 li
65.4554 372.697 64.5163 371.758 64.5163 370.599 cv
64.5163 344.605 li
64.5163 343.447 65.4554 342.508 66.614 342.508 cv
534.337 342.508 li
535.495 342.508 536.434 343.447 536.434 344.605 cv
536.434 370.599 li
536.434 371.758 535.495 372.697 534.337 372.697 cv
66.614 342.848 mo
65.6434 342.848 64.8564 343.635 64.8564 344.605 cv
64.8564 370.599 li
64.8564 371.57 65.6434 372.357 66.614 372.357 cv
534.337 372.357 li
535.307 372.357 536.094 371.57 536.094 370.599 cv
536.094 344.605 li
536.094 343.635 535.307 342.848 534.337 342.848 cv
66.614 342.848 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 372.357 mo
66.614 372.357 li
65.6434 372.357 64.8564 371.57 64.8564 370.599 cv
64.8564 344.605 li
64.8564 343.635 65.6434 342.848 66.614 342.848 cv
534.337 342.848 li
535.307 342.848 536.094 343.635 536.094 344.605 cv
536.094 370.599 li
536.094 371.57 535.307 372.357 534.337 372.357 cv
66.614 343.188 mo
65.8313 343.188 65.1967 343.823 65.1967 344.605 cv
65.1967 370.599 li
65.1967 371.382 65.8313 372.017 66.614 372.017 cv
534.337 372.017 li
535.119 372.017 535.754 371.382 535.754 370.599 cv
535.754 344.605 li
535.754 343.823 535.119 343.188 534.337 343.188 cv
66.614 343.188 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 372.017 mo
66.614 372.017 li
65.8313 372.017 65.1967 371.382 65.1967 370.599 cv
65.1967 344.605 li
65.1967 343.823 65.8313 343.188 66.614 343.188 cv
534.337 343.188 li
535.119 343.188 535.754 343.823 535.754 344.605 cv
535.754 370.599 li
535.754 371.382 535.119 372.017 534.337 372.017 cv
66.614 343.528 mo
66.019 343.528 65.5368 344.01 65.5368 344.605 cv
65.5368 370.599 li
65.5368 371.194 66.019 371.676 66.614 371.676 cv
534.337 371.676 li
534.932 371.676 535.414 371.194 535.414 370.599 cv
535.414 344.605 li
535.414 344.01 534.932 343.528 534.337 343.528 cv
66.614 343.528 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 371.676 mo
66.614 371.676 li
66.019 371.676 65.5368 371.194 65.5368 370.599 cv
65.5368 344.605 li
65.5368 344.01 66.019 343.528 66.614 343.528 cv
534.337 343.528 li
534.932 343.528 535.414 344.01 535.414 344.605 cv
535.414 370.599 li
535.414 371.194 534.932 371.676 534.337 371.676 cv
66.614 343.868 mo
66.207 343.868 65.877 344.198 65.877 344.605 cv
65.877 370.599 li
65.877 371.006 66.207 371.336 66.614 371.336 cv
534.337 371.336 li
534.744 371.336 535.074 371.006 535.074 370.599 cv
535.074 344.605 li
535.074 344.198 534.744 343.868 534.337 343.868 cv
66.614 343.868 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 371.336 mo
66.614 371.336 li
66.207 371.336 65.877 371.006 65.877 370.599 cv
65.877 344.605 li
65.877 344.198 66.207 343.868 66.614 343.868 cv
534.337 343.868 li
534.744 343.868 535.074 344.198 535.074 344.605 cv
535.074 370.599 li
535.074 371.006 534.744 371.336 534.337 371.336 cv
66.614 344.209 mo
66.3947 344.209 66.2171 344.386 66.2171 344.605 cv
66.2171 370.599 li
66.2171 370.819 66.3947 370.996 66.614 370.996 cv
534.337 370.996 li
534.556 370.996 534.734 370.819 534.734 370.599 cv
534.734 344.605 li
534.734 344.386 534.556 344.209 534.337 344.209 cv
66.614 344.209 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 370.996 mo
66.614 370.996 li
66.3947 370.996 66.2171 370.819 66.2171 370.599 cv
66.2171 344.605 li
66.2171 344.386 66.3947 344.209 66.614 344.209 cv
534.337 344.209 li
534.556 344.209 534.734 344.386 534.734 344.605 cv
534.734 370.599 li
534.734 370.819 534.556 370.996 534.337 370.996 cv
66.614 344.549 mo
66.5571 344.605 li
66.5571 370.599 li
66.614 370.656 li
534.337 370.656 li
534.394 370.599 li
534.394 344.605 li
534.337 344.549 li
66.614 344.549 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 370.656 mo
66.614 370.656 li
66.5571 370.599 li
66.5571 344.605 li
66.614 344.549 li
534.337 344.549 li
534.394 344.605 li
534.394 370.599 li
534.337 370.656 li
66.8974 344.889 mo
66.8974 370.316 li
534.053 370.316 li
534.053 344.889 li
66.8974 344.889 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 370.316 mo
66.8974 370.316 li
66.8974 344.889 li
534.053 344.889 li
534.053 370.316 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 369.182 mo
62.362 340.354 li
532.919 340.354 li
532.919 369.182 li
cp
.0567 .0434 0 .0154 cmyk
f
62.362 369.182 mo
62.362 353.6 li
532.919 353.6 li
532.919 369.182 li
cp
f
62.362 353.6 mo
62.362 340.752 li
532.919 340.752 li
532.919 353.6 li
cp
f
70.867 lw
97.7955 340.354 mo
97.7955 337.365 li
.81 .62 0 .22 cmyk
@
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D1037EFA00EA899F356529010A7E6409146931D0930AD84A
69435C5D7538DEF816EE087DA0C14CEBA1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf 31{/.notdef}rp /B /C /D 
/E /F 6{/.notdef}rp /M 6{/.notdef}rp /T 42{/.notdef}rp /s.sc 
/c.sc /u.sc /e.sc /l.sc /a.sc /d.sc /i.sc /n.sc 
/iacute.sc /y.sc /t.sc /m.sc /aacute.sc /f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 350.675 mo
(T\202 \216\202\213\204")
[6.117 5.75842 7.13326 6.41589 5.75842 8.23903 9.34491 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
126.607 350.675 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7FD84CD08F2920F56844F7D04515F4CCD265871F08C45FF30
9C17B605FABC8DCACD3F4C93> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /.notdef /period 22{/.notdef}rp /E 
8{/.notdef}rp /N 5{/.notdef}rp /T 12{/.notdef}rp /a /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
3{/.notdef}rp /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 364.875 mo
(Teorema...)
[5.17064 6.01745 6.24654 3.86549 6.01745 10.5704 5.8779 2.11213 2.11213 0 ]xsh
534.337 412.541 mo
66.614 412.541 li
65.0798 412.541 63.836 411.298 63.836 409.763 cv
63.836 383.396 li
63.836 381.862 65.0798 380.618 66.614 380.618 cv
534.337 380.618 li
535.871 380.618 537.115 381.862 537.115 383.396 cv
537.115 409.763 li
537.115 411.298 535.871 412.541 534.337 412.541 cv
66.614 380.958 mo
65.2677 380.958 64.1763 382.05 64.1763 383.396 cv
64.1763 409.763 li
64.1763 411.11 65.2677 412.201 66.614 412.201 cv
534.337 412.201 li
535.683 412.201 536.775 411.11 536.775 409.763 cv
536.775 383.396 li
536.775 382.05 535.683 380.958 534.337 380.958 cv
66.614 380.958 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 412.201 mo
66.614 412.201 li
65.2677 412.201 64.1763 411.11 64.1763 409.763 cv
64.1763 383.396 li
64.1763 382.05 65.2677 380.958 66.614 380.958 cv
534.337 380.958 li
535.683 380.958 536.775 382.05 536.775 383.396 cv
536.775 409.763 li
536.775 411.11 535.683 412.201 534.337 412.201 cv
66.614 381.298 mo
65.4554 381.298 64.5163 382.237 64.5163 383.396 cv
64.5163 409.763 li
64.5163 410.922 65.4554 411.861 66.614 411.861 cv
534.337 411.861 li
535.495 411.861 536.434 410.922 536.434 409.763 cv
536.434 383.396 li
536.434 382.237 535.495 381.298 534.337 381.298 cv
66.614 381.298 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 411.861 mo
66.614 411.861 li
65.4554 411.861 64.5163 410.922 64.5163 409.763 cv
64.5163 383.396 li
64.5163 382.237 65.4554 381.298 66.614 381.298 cv
534.337 381.298 li
535.495 381.298 536.434 382.237 536.434 383.396 cv
536.434 409.763 li
536.434 410.922 535.495 411.861 534.337 411.861 cv
66.614 381.638 mo
65.6434 381.638 64.8564 382.425 64.8564 383.396 cv
64.8564 409.763 li
64.8564 410.734 65.6434 411.521 66.614 411.521 cv
534.337 411.521 li
535.307 411.521 536.094 410.734 536.094 409.763 cv
536.094 383.396 li
536.094 382.425 535.307 381.638 534.337 381.638 cv
66.614 381.638 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 411.521 mo
66.614 411.521 li
65.6434 411.521 64.8564 410.734 64.8564 409.763 cv
64.8564 383.396 li
64.8564 382.425 65.6434 381.638 66.614 381.638 cv
534.337 381.638 li
535.307 381.638 536.094 382.425 536.094 383.396 cv
536.094 409.763 li
536.094 410.734 535.307 411.521 534.337 411.521 cv
66.614 381.979 mo
65.8313 381.979 65.1967 382.613 65.1967 383.396 cv
65.1967 409.763 li
65.1967 410.546 65.8313 411.181 66.614 411.181 cv
534.337 411.181 li
535.119 411.181 535.754 410.546 535.754 409.763 cv
535.754 383.396 li
535.754 382.613 535.119 381.979 534.337 381.979 cv
66.614 381.979 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 411.181 mo
66.614 411.181 li
65.8313 411.181 65.1967 410.546 65.1967 409.763 cv
65.1967 383.396 li
65.1967 382.613 65.8313 381.979 66.614 381.979 cv
534.337 381.979 li
535.119 381.979 535.754 382.613 535.754 383.396 cv
535.754 409.763 li
535.754 410.546 535.119 411.181 534.337 411.181 cv
66.614 382.319 mo
66.019 382.319 65.5368 382.801 65.5368 383.396 cv
65.5368 409.763 li
65.5368 410.358 66.019 410.841 66.614 410.841 cv
534.337 410.841 li
534.932 410.841 535.414 410.358 535.414 409.763 cv
535.414 383.396 li
535.414 382.801 534.932 382.319 534.337 382.319 cv
66.614 382.319 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 410.841 mo
66.614 410.841 li
66.019 410.841 65.5368 410.358 65.5368 409.763 cv
65.5368 383.396 li
65.5368 382.801 66.019 382.319 66.614 382.319 cv
534.337 382.319 li
534.932 382.319 535.414 382.801 535.414 383.396 cv
535.414 409.763 li
535.414 410.358 534.932 410.841 534.337 410.841 cv
66.614 382.659 mo
66.207 382.659 65.877 382.989 65.877 383.396 cv
65.877 409.763 li
65.877 410.17 66.207 410.5 66.614 410.5 cv
534.337 410.5 li
534.744 410.5 535.074 410.17 535.074 409.763 cv
535.074 383.396 li
535.074 382.989 534.744 382.659 534.337 382.659 cv
66.614 382.659 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 410.5 mo
66.614 410.5 li
66.207 410.5 65.877 410.17 65.877 409.763 cv
65.877 383.396 li
65.877 382.989 66.207 382.659 66.614 382.659 cv
534.337 382.659 li
534.744 382.659 535.074 382.989 535.074 383.396 cv
535.074 409.763 li
535.074 410.17 534.744 410.5 534.337 410.5 cv
66.614 382.999 mo
66.3947 382.999 66.2171 383.177 66.2171 383.396 cv
66.2171 409.763 li
66.2171 409.983 66.3947 410.16 66.614 410.16 cv
534.337 410.16 li
534.556 410.16 534.734 409.983 534.734 409.763 cv
534.734 383.396 li
534.734 383.177 534.556 382.999 534.337 382.999 cv
66.614 382.999 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 410.16 mo
66.614 410.16 li
66.3947 410.16 66.2171 409.983 66.2171 409.763 cv
66.2171 383.396 li
66.2171 383.177 66.3947 382.999 66.614 382.999 cv
534.337 382.999 li
534.556 382.999 534.734 383.177 534.734 383.396 cv
534.734 409.763 li
534.734 409.983 534.556 410.16 534.337 410.16 cv
66.614 383.339 mo
66.5571 383.396 li
66.5571 409.763 li
66.614 409.82 li
534.337 409.82 li
534.394 409.763 li
534.394 383.396 li
534.337 383.339 li
66.614 383.339 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 409.82 mo
66.614 409.82 li
66.5571 409.763 li
66.5571 383.396 li
66.614 383.339 li
534.337 383.339 li
534.394 383.396 li
534.394 409.763 li
534.337 409.82 li
66.8974 383.679 mo
66.8974 409.48 li
534.053 409.48 li
534.053 383.679 li
66.8974 383.679 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 409.48 mo
66.8974 409.48 li
66.8974 383.679 li
534.053 383.679 li
534.053 409.48 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 408.346 mo
62.362 379.144 li
532.919 379.144 li
532.919 408.346 li
cp
.0567 .0434 0 .0154 cmyk
f
62.362 408.346 mo
62.362 392.764 li
532.919 392.764 li
532.919 408.346 li
cp
f
62.362 392.764 mo
62.362 379.542 li
532.919 379.542 li
532.919 392.764 li
cp
f
97.7955 379.144 mo
97.7955 376.155 li
.81 .62 0 .22 cmyk
@
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two.tf <1C60D8A8C9B6317D0B00D1988FAD2A18684D5F40463B236B8EEABB1
CD109BD5228D90306ABE343EDDD5DDEC75FD2E3E2E2419F7DC0AD0BD4CEE8155
CA100AABA2DFA67A01F496952BB110ACE436C926E07FE04ADD6409F38FCD29D0
3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 35 /two.tf put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf 30{/.notdef}rp /B /C 
/D /E /F 6{/.notdef}rp /M 6{/.notdef}rp /T 42{/.notdef}rp 
/s.sc /c.sc /u.sc /e.sc /l.sc /a.sc /d.sc /i.sc 
/n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc /f.sc /r.sc 
113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 389.84 mo
(T\202 \216\202\213\204#)
[6.117 5.75842 7.13326 6.41589 5.75842 8.23903 9.34491 0 ]xsh
%ADOBeginSubsetFont: QAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMB+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/iacute <1C60D8A8C9B83FE30A895AB6B399B74F447DCEBC15F92EDEC5B5787
5908F539310D0CC12D64CEB47351A98C0B54C460275D859D5399DDDB0> |-
/T <1C60D8A8C9B7D1037EFA00EA899F356529010A7E6409146931D0930AD84A
69435C5D7538DEF816EE087DA0C14CEBA1> |-
/m <1C60D8A8C9B53F12CDD993064CFE2D1FFA548146C70ED32EE4815FA79B59
94A4EBA438319BE609EE91A32D895EF7804CBB1E66F6C99FD66C7BB6A26436A2
3461EED9A5A108F9A64FFBD5686192D128A69482547411266FD02A46BFC3C055
9AB5BE9341D24A90654343303E572D52ED81BDDDCC840678A5D75171A14E1DDB
0FB754A1536E2E65104DFD9595EDCD8D8B1B833B947DB6F3ADBF79E3AAD945D5
D3EECABE912696> |-
/t <1C60D8A8C9B7686E52424B1DA0BAE43288B7C57781599E3A24AF57EB77CA
B3C88A8772824A617AC75B04D7F239D52D7C7923DA112190A3CE8873968E850F
A67E67F6D67A98B7AEBC1D4F80B8E39703BE7E57C5667A> |-
/u <1C60D8A8C9B6225AB83BECE109BF876FCD1E5AFC51A1F4D92E607D1E9C7C
CE588ADE8CC58EBDAF4F54522CA37DBFA094ACC143CF1F9F401CFED2DFB3105B
CDE16155F6B876D7F35858ADE9B3FBCF38D8FE13A45F6A3AFBB3477AAE60A0DF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMB+Montserrat-Bold /Encoding get
dup 32 /iacute put
dup 84 /T put
dup 109 /m put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/DUPIMB+Montserrat-Bold*1 
[32{/.notdef}rp /iacute 13{/.notdef}rp /period 11{/.notdef}rp /colon 8{/.notdef}rp /C 
16{/.notdef}rp /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u 138{/.notdef}rp]
DUPIMB+Montserrat-Bold nf
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
126.607 389.84 mo
(:T tulodelteorema.)
[5.42955 6.03729 2.9987 4.33369 6.84428 2.99869 9.34491 6.89413 6.28636 5.8181 4.16434 6.28638 
6.52548 4.20422 6.28638 10.4507 6.14697 0 ]xsh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.866 404.039 mo
(Teorema...)
[5.17064 6.01745 6.24654 3.86549 6.01745 10.5704 5.8779 2.11213 2.11213 0 ]xsh
534.337 438.465 mo
66.614 438.465 li
65.0798 438.465 63.836 437.222 63.836 435.687 cv
63.836 422.561 li
63.836 421.027 65.0798 419.783 66.614 419.783 cv
534.337 419.783 li
535.871 419.783 537.115 421.027 537.115 422.561 cv
537.115 435.687 li
537.115 437.222 535.871 438.465 534.337 438.465 cv
66.614 420.123 mo
65.2677 420.123 64.1763 421.215 64.1763 422.561 cv
64.1763 435.687 li
64.1763 437.034 65.2677 438.125 66.614 438.125 cv
534.337 438.125 li
535.683 438.125 536.775 437.034 536.775 435.687 cv
536.775 422.561 li
536.775 421.215 535.683 420.123 534.337 420.123 cv
66.614 420.123 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 438.125 mo
66.614 438.125 li
65.2677 438.125 64.1763 437.034 64.1763 435.687 cv
64.1763 422.561 li
64.1763 421.215 65.2677 420.123 66.614 420.123 cv
534.337 420.123 li
535.683 420.123 536.775 421.215 536.775 422.561 cv
536.775 435.687 li
536.775 437.034 535.683 438.125 534.337 438.125 cv
66.614 420.463 mo
65.4554 420.463 64.5163 421.403 64.5163 422.561 cv
64.5163 435.687 li
64.5163 436.846 65.4554 437.785 66.614 437.785 cv
534.337 437.785 li
535.495 437.785 536.434 436.846 536.434 435.687 cv
536.434 422.561 li
536.434 421.403 535.495 420.463 534.337 420.463 cv
66.614 420.463 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 437.785 mo
66.614 437.785 li
65.4554 437.785 64.5163 436.846 64.5163 435.687 cv
64.5163 422.561 li
64.5163 421.403 65.4554 420.463 66.614 420.463 cv
534.337 420.463 li
535.495 420.463 536.434 421.403 536.434 422.561 cv
536.434 435.687 li
536.434 436.846 535.495 437.785 534.337 437.785 cv
66.614 420.804 mo
65.6434 420.804 64.8564 421.59 64.8564 422.561 cv
64.8564 435.687 li
64.8564 436.658 65.6434 437.445 66.614 437.445 cv
534.337 437.445 li
535.307 437.445 536.094 436.658 536.094 435.687 cv
536.094 422.561 li
536.094 421.59 535.307 420.804 534.337 420.804 cv
66.614 420.804 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 437.445 mo
66.614 437.445 li
65.6434 437.445 64.8564 436.658 64.8564 435.687 cv
64.8564 422.561 li
64.8564 421.59 65.6434 420.804 66.614 420.804 cv
534.337 420.804 li
535.307 420.804 536.094 421.59 536.094 422.561 cv
536.094 435.687 li
536.094 436.658 535.307 437.445 534.337 437.445 cv
66.614 421.144 mo
65.8313 421.144 65.1967 421.778 65.1967 422.561 cv
65.1967 435.687 li
65.1967 436.47 65.8313 437.105 66.614 437.105 cv
534.337 437.105 li
535.119 437.105 535.754 436.47 535.754 435.687 cv
535.754 422.561 li
535.754 421.778 535.119 421.144 534.337 421.144 cv
66.614 421.144 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 437.105 mo
66.614 437.105 li
65.8313 437.105 65.1967 436.47 65.1967 435.687 cv
65.1967 422.561 li
65.1967 421.778 65.8313 421.144 66.614 421.144 cv
534.337 421.144 li
535.119 421.144 535.754 421.778 535.754 422.561 cv
535.754 435.687 li
535.754 436.47 535.119 437.105 534.337 437.105 cv
66.614 421.484 mo
66.019 421.484 65.5368 421.966 65.5368 422.561 cv
65.5368 435.687 li
65.5368 436.282 66.019 436.765 66.614 436.765 cv
534.337 436.765 li
534.932 436.765 535.414 436.282 535.414 435.687 cv
535.414 422.561 li
535.414 421.966 534.932 421.484 534.337 421.484 cv
66.614 421.484 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 436.765 mo
66.614 436.765 li
66.019 436.765 65.5368 436.282 65.5368 435.687 cv
65.5368 422.561 li
65.5368 421.966 66.019 421.484 66.614 421.484 cv
534.337 421.484 li
534.932 421.484 535.414 421.966 535.414 422.561 cv
535.414 435.687 li
535.414 436.282 534.932 436.765 534.337 436.765 cv
66.614 421.824 mo
66.207 421.824 65.877 422.154 65.877 422.561 cv
65.877 435.687 li
65.877 436.095 66.207 436.424 66.614 436.424 cv
534.337 436.424 li
534.744 436.424 535.074 436.095 535.074 435.687 cv
535.074 422.561 li
535.074 422.154 534.744 421.824 534.337 421.824 cv
66.614 421.824 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 436.424 mo
66.614 436.424 li
66.207 436.424 65.877 436.095 65.877 435.687 cv
65.877 422.561 li
65.877 422.154 66.207 421.824 66.614 421.824 cv
534.337 421.824 li
534.744 421.824 535.074 422.154 535.074 422.561 cv
535.074 435.687 li
535.074 436.095 534.744 436.424 534.337 436.424 cv
66.614 422.164 mo
66.3947 422.164 66.2171 422.342 66.2171 422.561 cv
66.2171 435.687 li
66.2171 435.907 66.3947 436.084 66.614 436.084 cv
534.337 436.084 li
534.556 436.084 534.734 435.907 534.734 435.687 cv
534.734 422.561 li
534.734 422.342 534.556 422.164 534.337 422.164 cv
66.614 422.164 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 436.084 mo
66.614 436.084 li
66.3947 436.084 66.2171 435.907 66.2171 435.687 cv
66.2171 422.561 li
66.2171 422.342 66.3947 422.164 66.614 422.164 cv
534.337 422.164 li
534.556 422.164 534.734 422.342 534.734 422.561 cv
534.734 435.687 li
534.734 435.907 534.556 436.084 534.337 436.084 cv
66.614 422.504 mo
66.5571 422.561 li
66.5571 435.687 li
66.614 435.744 li
534.337 435.744 li
534.394 435.687 li
534.394 422.561 li
534.337 422.504 li
66.614 422.504 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 435.744 mo
66.614 435.744 li
66.5571 435.687 li
66.5571 422.561 li
66.614 422.504 li
534.337 422.504 li
534.394 422.561 li
534.394 435.687 li
534.337 435.744 li
66.8974 422.844 mo
66.8974 435.404 li
534.053 435.404 li
534.053 422.844 li
66.8974 422.844 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 435.404 mo
66.8974 435.404 li
66.8974 422.844 li
534.053 422.844 li
534.053 435.404 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 434.27 mo
62.362 418.309 li
532.919 418.309 li
532.919 434.27 li
cp
.81 .62 0 .22 cmyk
f
64.3545 434.27 mo
64.3545 418.309 li
532.919 418.309 li
532.919 434.27 li
cp
.0567 .0434 0 .0154 cmyk
f
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three.tf <1C60D8A8C9B6317DFF408D3A08A781C64AB4ED9C258B385E1998A
81C79EAAF0C1D96264C4B47E08C4AB5B7E98203A39CD0D5AF6CECCEC749D21FD
1E06C952AB9CF69225870C588E415F4CF3DBFA366053BFDC0F87466FC3833311
BD79C6FD565D26494> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 36 /three.tf put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf /three.tf 29{/.notdef}rp /B 
/C /D /E /F 6{/.notdef}rp /M 6{/.notdef}rp /T 
42{/.notdef}rp /s.sc /c.sc /u.sc /e.sc /l.sc /a.sc /d.sc 
/i.sc /n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc /f.sc 
/r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.859 429.898 mo
(C \216 \203\204\216\206 $)
[7.16312 7.13326 6.41589 7.13326 5.26027 6.52549 6.41589 3.09842 9.95267 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
138.931 429.898 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B60287B24E75BBB14FE31BCC39FEA6FCF5BFE2CB9679B7BEBC
6B29302C769D62A3ABA44DE9C5C796BDC13CB8469537BAC08428423AB8CBD041
1106E59407507635074F428BD5C1F580543CAE502B6ECC3F63EA4308FF808891
0B452588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /.notdef /period 20{/.notdef}rp /C 
/.notdef /E 8{/.notdef}rp /N 5{/.notdef}rp /T 12{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /q /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
144.151 429.898 mo
(Corolario...)
[6.93391 6.24654 3.86549 6.24654 2.67992 5.8779 3.91531 2.67992 6.09709 2.11214 2.11212 0 
]xsh
534.337 464.513 mo
66.614 464.513 li
65.0798 464.513 63.836 463.27 63.836 461.735 cv
63.836 448.484 li
63.836 446.95 65.0798 445.707 66.614 445.707 cv
534.337 445.707 li
535.871 445.707 537.115 446.95 537.115 448.484 cv
537.115 461.735 li
537.115 463.27 535.871 464.513 534.337 464.513 cv
66.614 446.047 mo
65.2677 446.047 64.1763 447.138 64.1763 448.484 cv
64.1763 461.735 li
64.1763 463.082 65.2677 464.173 66.614 464.173 cv
534.337 464.173 li
535.683 464.173 536.775 463.082 536.775 461.735 cv
536.775 448.484 li
536.775 447.138 535.683 446.047 534.337 446.047 cv
66.614 446.047 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 464.173 mo
66.614 464.173 li
65.2677 464.173 64.1763 463.082 64.1763 461.735 cv
64.1763 448.484 li
64.1763 447.138 65.2677 446.047 66.614 446.047 cv
534.337 446.047 li
535.683 446.047 536.775 447.138 536.775 448.484 cv
536.775 461.735 li
536.775 463.082 535.683 464.173 534.337 464.173 cv
66.614 446.387 mo
65.4554 446.387 64.5163 447.326 64.5163 448.484 cv
64.5163 461.735 li
64.5163 462.894 65.4554 463.833 66.614 463.833 cv
534.337 463.833 li
535.495 463.833 536.434 462.894 536.434 461.735 cv
536.434 448.484 li
536.434 447.326 535.495 446.387 534.337 446.387 cv
66.614 446.387 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 463.833 mo
66.614 463.833 li
65.4554 463.833 64.5163 462.894 64.5163 461.735 cv
64.5163 448.484 li
64.5163 447.326 65.4554 446.387 66.614 446.387 cv
534.337 446.387 li
535.495 446.387 536.434 447.326 536.434 448.484 cv
536.434 461.735 li
536.434 462.894 535.495 463.833 534.337 463.833 cv
66.614 446.727 mo
65.6434 446.727 64.8564 447.514 64.8564 448.484 cv
64.8564 461.735 li
64.8564 462.706 65.6434 463.493 66.614 463.493 cv
534.337 463.493 li
535.307 463.493 536.094 462.706 536.094 461.735 cv
536.094 448.484 li
536.094 447.514 535.307 446.727 534.337 446.727 cv
66.614 446.727 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 463.493 mo
66.614 463.493 li
65.6434 463.493 64.8564 462.706 64.8564 461.735 cv
64.8564 448.484 li
64.8564 447.514 65.6434 446.727 66.614 446.727 cv
534.337 446.727 li
535.307 446.727 536.094 447.514 536.094 448.484 cv
536.094 461.735 li
536.094 462.706 535.307 463.493 534.337 463.493 cv
66.614 447.067 mo
65.8313 447.067 65.1967 447.702 65.1967 448.484 cv
65.1967 461.735 li
65.1967 462.518 65.8313 463.153 66.614 463.153 cv
534.337 463.153 li
535.119 463.153 535.754 462.518 535.754 461.735 cv
535.754 448.484 li
535.754 447.702 535.119 447.067 534.337 447.067 cv
66.614 447.067 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 463.153 mo
66.614 463.153 li
65.8313 463.153 65.1967 462.518 65.1967 461.735 cv
65.1967 448.484 li
65.1967 447.702 65.8313 447.067 66.614 447.067 cv
534.337 447.067 li
535.119 447.067 535.754 447.702 535.754 448.484 cv
535.754 461.735 li
535.754 462.518 535.119 463.153 534.337 463.153 cv
66.614 447.407 mo
66.019 447.407 65.5368 447.89 65.5368 448.484 cv
65.5368 461.735 li
65.5368 462.33 66.019 462.813 66.614 462.813 cv
534.337 462.813 li
534.932 462.813 535.414 462.33 535.414 461.735 cv
535.414 448.484 li
535.414 447.89 534.932 447.407 534.337 447.407 cv
66.614 447.407 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 462.813 mo
66.614 462.813 li
66.019 462.813 65.5368 462.33 65.5368 461.735 cv
65.5368 448.484 li
65.5368 447.89 66.019 447.407 66.614 447.407 cv
534.337 447.407 li
534.932 447.407 535.414 447.89 535.414 448.484 cv
535.414 461.735 li
535.414 462.33 534.932 462.813 534.337 462.813 cv
66.614 447.747 mo
66.207 447.747 65.877 448.077 65.877 448.484 cv
65.877 461.735 li
65.877 462.143 66.207 462.472 66.614 462.472 cv
534.337 462.472 li
534.744 462.472 535.074 462.143 535.074 461.735 cv
535.074 448.484 li
535.074 448.077 534.744 447.747 534.337 447.747 cv
66.614 447.747 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 462.472 mo
66.614 462.472 li
66.207 462.472 65.877 462.143 65.877 461.735 cv
65.877 448.484 li
65.877 448.077 66.207 447.747 66.614 447.747 cv
534.337 447.747 li
534.744 447.747 535.074 448.077 535.074 448.484 cv
535.074 461.735 li
535.074 462.143 534.744 462.472 534.337 462.472 cv
66.614 448.087 mo
66.3947 448.087 66.2171 448.265 66.2171 448.484 cv
66.2171 461.735 li
66.2171 461.955 66.3947 462.132 66.614 462.132 cv
534.337 462.132 li
534.556 462.132 534.734 461.955 534.734 461.735 cv
534.734 448.484 li
534.734 448.265 534.556 448.087 534.337 448.087 cv
66.614 448.087 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 462.132 mo
66.614 462.132 li
66.3947 462.132 66.2171 461.955 66.2171 461.735 cv
66.2171 448.484 li
66.2171 448.265 66.3947 448.087 66.614 448.087 cv
534.337 448.087 li
534.556 448.087 534.734 448.265 534.734 448.484 cv
534.734 461.735 li
534.734 461.955 534.556 462.132 534.337 462.132 cv
66.614 448.428 mo
66.5571 448.484 li
66.5571 461.735 li
66.614 461.792 li
534.337 461.792 li
534.394 461.735 li
534.394 448.484 li
534.337 448.428 li
66.614 448.428 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 461.792 mo
66.614 461.792 li
66.5571 461.735 li
66.5571 448.484 li
66.614 448.428 li
534.337 448.428 li
534.394 448.484 li
534.394 461.735 li
534.337 461.792 li
66.8974 448.768 mo
66.8974 461.452 li
534.053 461.452 li
534.053 448.768 li
66.8974 448.768 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 461.452 mo
66.8974 461.452 li
66.8974 448.768 li
534.053 448.768 li
534.053 461.452 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 460.318 mo
62.362 444.232 li
532.919 444.232 li
532.919 460.318 li
cp
.81 .62 0 .22 cmyk
f
64.3545 460.318 mo
64.3545 444.232 li
532.919 444.232 li
532.919 460.318 li
cp
.0567 .0434 0 .0154 cmyk
f
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four.tf <1C60D8A8C9B6317D209090F2407CB9A8FB2CE68E44EF548E050DC4
5991C53BA3FD4260E44682937C229EE5B25953409911DAEB853AB6A73CDA90EF
668C7F7EF57ABBCC4086A4489AFD995B9D9226> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 37 /four.tf put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf /three.tf /four.tf 28{/.notdef}rp 
/B /C /D /E /F 6{/.notdef}rp /M 6{/.notdef}rp 
/T 42{/.notdef}rp /s.sc /c.sc /u.sc /e.sc /l.sc /a.sc 
/d.sc /i.sc /n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc 
/f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.859 455.946 mo
(C \216 \203\204\216\206 %)
[7.16312 7.13326 6.41589 7.13326 5.26027 6.52549 6.41589 3.09842 9.95267 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
138.931 455.946 mo
(:T tulo.)
[5.42955 6.03729 2.9987 4.33369 6.84428 2.99869 6.45575 0 ]xsh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
179.249 455.946 mo
(Corolario...)
[6.93391 6.24654 3.86549 6.24654 2.67992 5.8779 3.91531 2.67992 6.09709 2.11214 2.11212 0 
]xsh
534.337 490.187 mo
66.614 490.187 li
65.0798 490.187 63.836 488.944 63.836 487.409 cv
63.836 474.532 li
63.836 472.998 65.0798 471.754 66.614 471.754 cv
534.337 471.754 li
535.871 471.754 537.115 472.998 537.115 474.532 cv
537.115 487.409 li
537.115 488.944 535.871 490.187 534.337 490.187 cv
66.614 472.094 mo
65.2677 472.094 64.1763 473.186 64.1763 474.532 cv
64.1763 487.409 li
64.1763 488.756 65.2677 489.847 66.614 489.847 cv
534.337 489.847 li
535.683 489.847 536.775 488.756 536.775 487.409 cv
536.775 474.532 li
536.775 473.186 535.683 472.094 534.337 472.094 cv
66.614 472.094 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 489.847 mo
66.614 489.847 li
65.2677 489.847 64.1763 488.756 64.1763 487.409 cv
64.1763 474.532 li
64.1763 473.186 65.2677 472.094 66.614 472.094 cv
534.337 472.094 li
535.683 472.094 536.775 473.186 536.775 474.532 cv
536.775 487.409 li
536.775 488.756 535.683 489.847 534.337 489.847 cv
66.614 472.434 mo
65.4554 472.434 64.5163 473.374 64.5163 474.532 cv
64.5163 487.409 li
64.5163 488.568 65.4554 489.507 66.614 489.507 cv
534.337 489.507 li
535.495 489.507 536.434 488.568 536.434 487.409 cv
536.434 474.532 li
536.434 473.374 535.495 472.434 534.337 472.434 cv
66.614 472.434 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 489.507 mo
66.614 489.507 li
65.4554 489.507 64.5163 488.568 64.5163 487.409 cv
64.5163 474.532 li
64.5163 473.374 65.4554 472.434 66.614 472.434 cv
534.337 472.434 li
535.495 472.434 536.434 473.374 536.434 474.532 cv
536.434 487.409 li
536.434 488.568 535.495 489.507 534.337 489.507 cv
66.614 472.775 mo
65.6434 472.775 64.8564 473.561 64.8564 474.532 cv
64.8564 487.409 li
64.8564 488.38 65.6434 489.167 66.614 489.167 cv
534.337 489.167 li
535.307 489.167 536.094 488.38 536.094 487.409 cv
536.094 474.532 li
536.094 473.561 535.307 472.775 534.337 472.775 cv
66.614 472.775 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 489.167 mo
66.614 489.167 li
65.6434 489.167 64.8564 488.38 64.8564 487.409 cv
64.8564 474.532 li
64.8564 473.561 65.6434 472.775 66.614 472.775 cv
534.337 472.775 li
535.307 472.775 536.094 473.561 536.094 474.532 cv
536.094 487.409 li
536.094 488.38 535.307 489.167 534.337 489.167 cv
66.614 473.115 mo
65.8313 473.115 65.1967 473.749 65.1967 474.532 cv
65.1967 487.409 li
65.1967 488.192 65.8313 488.827 66.614 488.827 cv
534.337 488.827 li
535.119 488.827 535.754 488.192 535.754 487.409 cv
535.754 474.532 li
535.754 473.749 535.119 473.115 534.337 473.115 cv
66.614 473.115 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 488.827 mo
66.614 488.827 li
65.8313 488.827 65.1967 488.192 65.1967 487.409 cv
65.1967 474.532 li
65.1967 473.749 65.8313 473.115 66.614 473.115 cv
534.337 473.115 li
535.119 473.115 535.754 473.749 535.754 474.532 cv
535.754 487.409 li
535.754 488.192 535.119 488.827 534.337 488.827 cv
66.614 473.455 mo
66.019 473.455 65.5368 473.937 65.5368 474.532 cv
65.5368 487.409 li
65.5368 488.004 66.019 488.486 66.614 488.486 cv
534.337 488.486 li
534.932 488.486 535.414 488.004 535.414 487.409 cv
535.414 474.532 li
535.414 473.937 534.932 473.455 534.337 473.455 cv
66.614 473.455 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 488.486 mo
66.614 488.486 li
66.019 488.486 65.5368 488.004 65.5368 487.409 cv
65.5368 474.532 li
65.5368 473.937 66.019 473.455 66.614 473.455 cv
534.337 473.455 li
534.932 473.455 535.414 473.937 535.414 474.532 cv
535.414 487.409 li
535.414 488.004 534.932 488.486 534.337 488.486 cv
66.614 473.795 mo
66.207 473.795 65.877 474.125 65.877 474.532 cv
65.877 487.409 li
65.877 487.816 66.207 488.146 66.614 488.146 cv
534.337 488.146 li
534.744 488.146 535.074 487.816 535.074 487.409 cv
535.074 474.532 li
535.074 474.125 534.744 473.795 534.337 473.795 cv
66.614 473.795 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 488.146 mo
66.614 488.146 li
66.207 488.146 65.877 487.816 65.877 487.409 cv
65.877 474.532 li
65.877 474.125 66.207 473.795 66.614 473.795 cv
534.337 473.795 li
534.744 473.795 535.074 474.125 535.074 474.532 cv
535.074 487.409 li
535.074 487.816 534.744 488.146 534.337 488.146 cv
66.614 474.135 mo
66.3947 474.135 66.2171 474.313 66.2171 474.532 cv
66.2171 487.409 li
66.2171 487.629 66.3947 487.806 66.614 487.806 cv
534.337 487.806 li
534.556 487.806 534.734 487.629 534.734 487.409 cv
534.734 474.532 li
534.734 474.313 534.556 474.135 534.337 474.135 cv
66.614 474.135 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 487.806 mo
66.614 487.806 li
66.3947 487.806 66.2171 487.629 66.2171 487.409 cv
66.2171 474.532 li
66.2171 474.313 66.3947 474.135 66.614 474.135 cv
534.337 474.135 li
534.556 474.135 534.734 474.313 534.734 474.532 cv
534.734 487.409 li
534.734 487.629 534.556 487.806 534.337 487.806 cv
66.614 474.475 mo
66.5571 474.532 li
66.5571 487.409 li
66.614 487.466 li
534.337 487.466 li
534.394 487.409 li
534.394 474.532 li
534.337 474.475 li
66.614 474.475 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 487.466 mo
66.614 487.466 li
66.5571 487.409 li
66.5571 474.532 li
66.614 474.475 li
534.337 474.475 li
534.394 474.532 li
534.394 487.409 li
534.337 487.466 li
66.8974 474.815 mo
66.8974 487.126 li
534.053 487.126 li
534.053 474.815 li
66.8974 474.815 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 487.126 mo
66.8974 487.126 li
66.8974 474.815 li
534.053 474.815 li
534.053 487.126 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 485.992 mo
62.362 470.28 li
532.919 470.28 li
532.919 485.992 li
cp
.81 .62 0 .22 cmyk
f
64.3545 485.992 mo
64.3545 470.28 li
532.919 470.28 li
532.919 485.992 li
cp
.0567 .0434 0 .0154 cmyk
f
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five.tf <1C60D8A8C9B6317DFF408D3A075DC77458CF1A593BA26C1E16520C
D9A9DBB3817DD2F625119FD340812CA7AF49CC447028E8026C00914989231033
3CEE814548C88EE07760870095C9A7973C88C51E959C9F8B2DEB07B99FD8DEA9
6F687820E57631833D5E> |-
/L <1C60D8A8C9B7DF55E464E00F35EFBE868F0417832C316C0A54F4B75E2329
C69B82DBF48D599EEA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 38 /five.tf put
dup 76 /L put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf /three.tf /four.tf /five.tf 
27{/.notdef}rp /B /C /D /E /F 5{/.notdef}rp /L 
/M 6{/.notdef}rp /T 42{/.notdef}rp /s.sc /c.sc /u.sc /e.sc 
/l.sc /a.sc /d.sc /i.sc /n.sc /iacute.sc /y.sc /t.sc 
/m.sc /aacute.sc /f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.859 481.621 mo
(L\202\213\204&)
[6.11707 5.75842 8.23903 9.3449 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
109.292 481.621 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7CEAE79396CEE4CA4A06C354484027FFB6BA3D8CE2EE09987
60259530C1FC73> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 76 /L put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /.notdef /period 20{/.notdef}rp /C 
/.notdef /E 6{/.notdef}rp /L /.notdef /N 5{/.notdef}rp /T 
12{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /q 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
114.512 481.621 mo
(Lema...)
[5.78831 6.01745 10.5704 5.87788 2.11214 2.11212 0 ]xsh
70.9379 500.713 mo
70.9379 498.345 69.0182 496.425 66.6499 496.425 cv
64.2817 496.425 62.362 498.345 62.362 500.713 cv
62.362 503.081 64.2817 505.001 66.6499 505.001 cv
69.0182 505.001 70.9379 503.081 70.9379 500.713 cv
cp
.81 .62 0 .22 cmyk
f
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b.sc <1C60D8A8C9B647204C77D372A3BC1A50BCCCBD558F1676CE4D072E7D1
4C5EFFDBF322A1760376E26B25C1A556D35F4C242819396486BCFB1454644760
C22BE4976A86C1D4BC59139E17DF2B2877BCEB6EAF016067365336A8B5431801
2D25C9409FA833025E9309E60A3FD9FF1F983593265EE6DC8470DA3DC1CB543B
0BA04A2C6D057703BA9C9598D092D49C1541A0668732BED965BE66FE01B068FD
E1585B81CB4ED7DBA3FF5EF2619741FC0EFEB172ECF3A3915B3EDD32FD52BAC2
51C12> |-
/v.sc <1C60D8A8C9B67DB5DFC07A3CA8F134D643F5EB58CDBA10B21BBD6B621
CF795F958A623CFA1CB0E5C609690A195C73B212EBA148D> |-
/O <1C60D8A8C9B681FFEB0F99B4D6498AC4FB65A4E7A3EE3EB339A2B3DF967B
EA8E65982BBEAF474BC4A0F85281FE539D39ACEAFBB34450328FB3194AEE7F73
5DBC6519D75507C9A7FF4F2D331833AB55A30A1775B07EAF9F48E4A2E937B9E5
98C955FD8DC6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 39 /b.sc put
dup 40 /v.sc put
dup 79 /O put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf /three.tf /four.tf /five.tf 
/b.sc /v.sc 25{/.notdef}rp /B /C /D /E /F 
5{/.notdef}rp /L /M /.notdef /O 4{/.notdef}rp /T 42{/.notdef}rp 
/s.sc /c.sc /u.sc /e.sc /l.sc /a.sc /d.sc /i.sc 
/n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc /f.sc /r.sc 
113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
74.528 505.001 mo
(O'\177\202\216\()sh
113.233 505.001 mo
(\204\200\206!\207)
[6.42586 6.23666 3.09842 7.13324 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
143.14 505.001 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B73DBADEBAF40CE8D835E46BD49C6A76AFD60CDFBBB6B
EBBA1> |-
/S <1C60D8A8C9B7D47449645EBB8B91D2ED0EC03A93C3FE11C329B6781E5B39
605E98D9B9D3B4DDAF1EDA851C2ED27FE7C24214040ADFF5A466D9EB358FBD58
D712A94CBDF21D59C8D47958BCED0B4303122CDDB4D05FC6B919EBCD3262C33B
6EEC82D1F862563FD94A4EBF1C4B> |-
/g <1C60D8A8C9B6232B142A7A4280C1854155655B91BBB83503E19751AB815B
03F346AC5C341BB64705AE89CF8E135F9C1120B44EA5A04FED37A2269257907B
E2560B9E0BAAFB6BF9901A1D14E837B4EACCD7C724B9C0B68B1A69264B31813D
7701A4305D44D0D34E02299BA1513875DCE51BB89CC7CEC641F76F34CA4455E9
5212834EB330E0391BBE560939FB5DBA92F687061D45C99AE5C5679A81EC5935
AF20FA49FAC2CF6FD07D84F47AE1348D17162E88FE2D51D32FDC2BF7FCFB9D6B
EF9DB86133F9C489A28D1DB151A1E5280B2A3AD11325BA32D8> |-
/v <1C60D8A8C9B79D2DD43CD3D5958C15313F891469CF0503707E7878C07A24
9D2B1967D6BB126415DB7435BE6D759D3CF2ADBC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 45 /hyphen put
dup 83 /S put
dup 103 /g put
dup 118 /v put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C 
/.notdef /E 6{/.notdef}rp /L /.notdef /N 4{/.notdef}rp /S 
/T 12{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
/p /q /r /s /t /u /v 2{/.notdef}rp 
/y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
148.361 505.001 mo
(Loremipsumdolorsitamet,consecteturadipiscingelit.Sedvenenatismas-)
[5.78831 6.24654 3.86551 6.01744 13.8979 2.67992 6.75458 4.87169 6.70488 13.8879 6.75458 6.24654 
2.67992 6.24654 7.32251 4.8717 2.6799 7.36243 5.8779 10.5704 6.01743 4.14453 5.43964 5.51929 
6.24655 6.74469 4.8717 6.01743 5.66876 3.85559 6.01746 4.04486 6.7049 7.32251 5.8779 6.75458 
2.6799 6.75458 2.67993 4.8717 5.5293 2.67987 6.74472 10.1519 6.01743 2.67993 2.6799 4.1445 
5.43964 6.12704 6.01746 10.0821 5.25037 6.01746 6.74469 6.01746 6.74469 5.8779 4.04486 2.67993 
8.19919 10.5704 5.87793 4.8717 0 ]xsh
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B66C0E35A95A6055249C60FE9B71320A18FAE99D47FF0AD5E6
04065016CE80CD24594A802C9DF47FA2F850FB5DEFB842C2> |-
/Q <1C60D8A8C9B6BAE50547D365591A45C058CCD6D11A0673F9F85DF98E2C01
A4FF93F0B6F1C7255624A28F0669E593BEA5C45AAFDDA1C65BCA5B81C2F0AD1F
E1A71C7BAC73D6A85C7A9A1573B692236648A8B7C3B5735F2FF49BD49F7D709B
48A9EA0D0A15688A0598952021271CAE3E6C6CA0854E22B87A085939CC9D974C
43F228DA1C9C37F181CCB96F5E182CF2> |-
/x <1C60D8A8C9B785CBECADF9A9161BBFC63BDAFEF8AB315688C2521DF06328
768CF7B82D429CB5A6F2718EAD837C56B53348EDE2B4355AF3EF96824E4FE577
FD1BF53F2F6330ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 70 /F put
dup 81 /Q put
dup 120 /x put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C 
/.notdef /E /F 5{/.notdef}rp /L /.notdef /N 2{/.notdef}rp 
/Q /.notdef /S /T 12{/.notdef}rp /a /b /c 
/d /e /f /g /.notdef /i 2{/.notdef}rp /l 
/m /n /o /p /q /r /s /t 
/u /v /.notdef /x /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 519.347 mo
(savitaeduiauctorornare.Quisquefermentumexligula.Fusceegetplaceratturpis,agravida)
[4.8717 9.1257 5.3998 2.67991 4.04488 5.8779 9.27522 6.75458 6.70486 5.92773 5.87789 6.70488 
5.66875 3.85559 6.24655 7.24281 6.24654 3.91531 6.74469 5.8779 3.86549 6.01744 5.3699 8.35867 
6.70486 2.6799 4.8717 6.75458 6.70486 9.26526 3.28772 6.01743 3.91531 10.5704 6.01746 6.74469 
4.04489 6.70486 13.8281 5.86801 8.56781 2.67993 2.6799 6.83438 6.7049 2.6799 5.8779 5.36987 
6.12698 6.70486 4.8717 5.51929 9.26526 6.01743 6.83441 6.01743 7.30264 6.75458 2.67993 5.8779 
5.51932 6.01746 3.52676 5.8779 7.29266 4.04489 6.70486 3.91531 6.75458 2.67993 4.87167 5.35995 
9.13565 6.83438 3.52676 5.77826 5.39984 2.67987 6.75458 0 ]xsh
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B6035520AB0462563BE6492AB8E2EAC0C61862AEC36F633CB7
D9BA61F9B35686DD3048CB7A4FDDA099E4A13286E3CA466D2A7C7A0B011BB65A
89A68F1A3BE7974426219D8EDCCBD3BA77513DC5C8927DA91FBCFBFF6083> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute 11{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C 
/.notdef /E /F 5{/.notdef}rp /L /.notdef /N /.notdef 
/P /Q /.notdef /S /T 12{/.notdef}rp /a /b 
/c /d /e /f /g /.notdef /i 2{/.notdef}rp 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 533.693 mo
(quam.)sh
97.5798 533.693 mo
(Nullam)sh
137.38 533.693 mo
(sit)sh
152.165 533.693 mo
(amet)sh
181.864 533.693 mo
(neque)sh
217.301 533.693 mo
(dignissim,)sh
271.288 533.693 mo
(dignissim)sh
323.163 533.693 mo
(est)sh
341.285 533.693 mo
(at,mollissem.Pellentesquevulputate)
[5.8779 4.1445 5.31012 10.5704 6.24652 2.67993 2.6799 2.6799 8.05975 4.87167 6.01746 10.5704 
5.30014 7.02365 6.01746 2.6799 2.67993 6.01743 6.74472 3.85556 6.01746 4.8717 6.75458 6.70486 
9.21542 5.39981 6.70486 2.67993 6.75458 6.70486 4.04486 5.87787 3.85559 0 ]xsh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 548.039 mo
(malesuada)sh
120.205 548.039 mo
(liber)sh
142.202 548.039 mo
(o,acporttitormassamattissitamet.Etiamaliquetconsequatiaculis.)
[6.09709 4.72234 5.8779 8.21918 6.75458 6.24654 4.14445 3.9054 4.04489 2.6799 3.85559 6.24652 
6.60522 10.5704 5.8779 4.87167 4.8717 8.4881 10.5703 5.8779 3.9054 4.04489 2.6799 7.4819 
4.87167 2.67993 6.65506 5.8779 10.5704 6.01743 4.14453 4.72232 6.51559 4.04489 2.6799 5.8779 
13.1805 5.8779 2.67993 2.6799 6.75458 6.7049 6.01746 6.65509 5.51932 6.24652 6.74472 4.87167 
6.01746 6.75458 6.7049 5.87787 6.65509 2.67993 5.8779 5.60898 6.70486 2.6799 2.6799 4.8717 
0 ]xsh
.81 .62 0 .22 cmyk
%ADOBeginSubsetFont: LAAAAA+Montserrat-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPILX+Montserrat-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/j.sc <1C60D8A8C9B75BE56E0C650A912A82BF300F89EFF17E6598D60D05C0F
2F098A65B8AEC8A4557EA5BBC73F1BD403322DBD24FBFD977902385C816C022A
581E96007330F325B7E3F7E> |-
/p.sc <1C60D8A8C9B6703197824C72335A74F58C141EC5DDFA77764B57122A7
D4F3E32717B03F5609AA6FB9333C6A1CC2E6511A4893483CD8B2E76F8610F43A
5EF3BB8445558C0D66C67C6709AD2A8CBCFA19F753742469EB965> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPILX+Montserrat-Bold /Encoding get
dup 41 /j.sc put
dup 42 /p.sc put
pop
%ADOEndSubsetFont
/DUPILX+Montserrat-Bold*1 
[32{/.notdef}rp /o.sc /oacute.sc /one.tf /two.tf /three.tf /four.tf /five.tf 
/b.sc /v.sc /j.sc /p.sc 23{/.notdef}rp /B /C /D 
/E /F 5{/.notdef}rp /L /M /.notdef /O 4{/.notdef}rp 
/T 42{/.notdef}rp /s.sc /c.sc /u.sc /e.sc /l.sc /a.sc 
/d.sc /i.sc /n.sc /iacute.sc /y.sc /t.sc /m.sc /aacute.sc 
/f.sc /r.sc 113{/.notdef}rp]
DUPILX+Montserrat-Bold nf
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 571.352 mo
(E\)\202\213*\203 ")
[6.73477 4.78201 5.75841 8.23903 6.34612 5.10087 9.99252 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
116.291 571.352 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
121.511 571.352 mo
(Loremipsumdolorsitamet,consecteturadipiscingelit.Sedvenenatismassavitae)
[5.78831 6.24654 3.86549 6.01746 13.2204 2.67992 6.75458 4.87169 6.70488 13.2204 6.75458 6.24655 
2.6799 6.24655 6.6351 4.8717 2.6799 6.69492 5.8779 10.5704 6.01746 4.1445 4.76218 5.51932 
6.24652 6.74472 4.87167 6.01746 5.66876 3.85559 6.01746 4.04486 6.7049 6.64505 5.8779 6.75458 
2.67993 6.75458 2.6799 4.8717 5.52927 2.67993 6.74469 9.47446 6.01746 2.6799 2.67993 4.1445 
4.76218 6.12704 6.01746 9.40463 5.25037 6.01746 6.74472 6.01743 6.74472 5.8779 4.04486 2.6799 
7.52176 10.5703 5.8779 4.8717 4.8717 8.52792 5.39981 2.67993 4.04486 5.87793 0 ]xsh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 585.698 mo
(dui)sh
80.6234 585.698 mo
(auc)sh
98.8749 585.698 mo
(torornare.Quisquefermentumexligula.Fusceegetplaceratturpis,agravidaquam.Nu-)
[3.85558 6.24654 6.10708 6.24654 3.91531 6.74471 5.8779 3.86549 6.01746 4.23416 8.35867 6.70486 
2.67992 4.87169 6.75458 6.70488 8.13948 3.2877 6.01746 3.91531 10.5704 6.01746 6.74469 4.04488 
6.70486 12.6824 5.86804 7.44202 2.6799 2.6799 6.83441 6.70486 2.6799 5.8779 4.23416 6.12695 
6.70486 4.8717 5.51932 8.13947 6.01746 6.83438 6.01746 6.15695 6.75458 2.6799 5.8779 5.51932 
6.01743 3.52676 5.8779 6.16693 4.04486 6.70486 3.91531 6.75461 2.6799 4.8717 4.23416 7.98999 
6.83438 3.52676 5.77829 5.39981 2.6799 6.75458 7.99994 6.75458 6.7049 5.8779 10.5703 4.23416 
8.09961 6.7049 0 ]xsh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 600.044 mo
(llam)sh
86.6607 600.044 mo
(sit)sh
100.748 600.044 mo
(amet)sh
129.749 600.044 mo
(neque)sh
164.479 600.044 mo
(dignissim,)sh
217.769 600.044 mo
(dignissim)sh
268.947 600.044 mo
(est)sh
286.371 600.044 mo
(at,mollissem.Pellentesquevulputatemalesuada)
[5.8779 4.1445 4.60275 10.5704 6.24655 2.6799 2.67993 2.6799 7.36234 4.8717 6.01746 10.5704 
4.60275 7.02365 6.01746 2.6799 2.67993 6.01746 6.74469 3.85559 6.01746 4.87167 6.75461 6.70486 
8.50809 5.39981 6.70486 2.6799 6.75461 6.70486 4.04486 5.8779 3.85559 8.50809 10.5704 5.8779 
2.6799 6.01746 4.87167 6.7049 5.87787 6.75458 0 ]xsh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 614.39 mo
(liber)sh
84.3593 614.39 mo
(o,acporttitormassamattissitamet.Etiamaliquetconsequatiaculis.)
[6.09711 4.72232 5.8779 8.21918 6.75459 6.24654 4.14445 3.9054 4.04488 2.6799 3.85559 6.24654 
6.60522 10.5704 5.8779 4.87169 4.8717 8.4881 10.5704 5.8779 3.90541 4.04486 2.67992 7.48189 
4.87169 2.67992 6.65508 5.87788 10.5704 6.01744 4.1445 4.72232 6.51559 4.04489 2.6799 5.8779 
13.1806 5.8779 2.6799 2.6799 6.75461 6.70486 6.01746 6.65506 5.51932 6.24652 6.74469 4.8717 
6.01746 6.75458 6.70486 5.8779 6.65509 2.6799 5.8779 5.60898 6.70486 2.67993 2.6799 4.8717 
0 ]xsh
534.337 691.248 mo
66.614 691.248 li
65.0798 691.248 63.836 690.005 63.836 688.47 cv
63.836 630.537 li
63.836 629.003 65.0798 627.759 66.614 627.759 cv
534.337 627.759 li
535.871 627.759 537.115 629.003 537.115 630.537 cv
537.115 688.47 li
537.115 690.005 535.871 691.248 534.337 691.248 cv
66.614 628.099 mo
65.2677 628.099 64.1763 629.191 64.1763 630.537 cv
64.1763 688.47 li
64.1763 689.817 65.2677 690.908 66.614 690.908 cv
534.337 690.908 li
535.683 690.908 536.775 689.817 536.775 688.47 cv
536.775 630.537 li
536.775 629.191 535.683 628.099 534.337 628.099 cv
66.614 628.099 li
1 /0 /CSD get_res sepcs
.00590542 sep
f
534.337 690.908 mo
66.614 690.908 li
65.2677 690.908 64.1763 689.817 64.1763 688.47 cv
64.1763 630.537 li
64.1763 629.191 65.2677 628.099 66.614 628.099 cv
534.337 628.099 li
535.683 628.099 536.775 629.191 536.775 630.537 cv
536.775 688.47 li
536.775 689.817 535.683 690.908 534.337 690.908 cv
66.614 628.439 mo
65.4554 628.439 64.5163 629.379 64.5163 630.537 cv
64.5163 688.47 li
64.5163 689.629 65.4554 690.568 66.614 690.568 cv
534.337 690.568 li
535.495 690.568 536.434 689.629 536.434 688.47 cv
536.434 630.537 li
536.434 629.379 535.495 628.439 534.337 628.439 cv
66.614 628.439 li
1 /0 /CSD get_res sepcs
.0157478 sep
f
534.337 690.568 mo
66.614 690.568 li
65.4554 690.568 64.5163 689.629 64.5163 688.47 cv
64.5163 630.537 li
64.5163 629.379 65.4554 628.439 66.614 628.439 cv
534.337 628.439 li
535.495 628.439 536.434 629.379 536.434 630.537 cv
536.434 688.47 li
536.434 689.629 535.495 690.568 534.337 690.568 cv
66.614 628.78 mo
65.6434 628.78 64.8564 629.566 64.8564 630.537 cv
64.8564 688.47 li
64.8564 689.441 65.6434 690.228 66.614 690.228 cv
534.337 690.228 li
535.307 690.228 536.094 689.441 536.094 688.47 cv
536.094 630.537 li
536.094 629.566 535.307 628.78 534.337 628.78 cv
66.614 628.78 li
1 /0 /CSD get_res sepcs
.0354325 sep
f
534.337 690.228 mo
66.614 690.228 li
65.6434 690.228 64.8564 689.441 64.8564 688.47 cv
64.8564 630.537 li
64.8564 629.566 65.6434 628.78 66.614 628.78 cv
534.337 628.78 li
535.307 628.78 536.094 629.566 536.094 630.537 cv
536.094 688.47 li
536.094 689.441 535.307 690.228 534.337 690.228 cv
66.614 629.12 mo
65.8313 629.12 65.1967 629.754 65.1967 630.537 cv
65.1967 688.47 li
65.1967 689.253 65.8313 689.888 66.614 689.888 cv
534.337 689.888 li
535.119 689.888 535.754 689.253 535.754 688.47 cv
535.754 630.537 li
535.754 629.754 535.119 629.12 534.337 629.12 cv
66.614 629.12 li
1 /0 /CSD get_res sepcs
.0688966 sep
f
534.337 689.888 mo
66.614 689.888 li
65.8313 689.888 65.1967 689.253 65.1967 688.47 cv
65.1967 630.537 li
65.1967 629.754 65.8313 629.12 66.614 629.12 cv
534.337 629.12 li
535.119 629.12 535.754 629.754 535.754 630.537 cv
535.754 688.47 li
535.754 689.253 535.119 689.888 534.337 689.888 cv
66.614 629.46 mo
66.019 629.46 65.5368 629.942 65.5368 630.537 cv
65.5368 688.47 li
65.5368 689.065 66.019 689.547 66.614 689.547 cv
534.337 689.547 li
534.932 689.547 535.414 689.065 535.414 688.47 cv
535.414 630.537 li
535.414 629.942 534.932 629.46 534.337 629.46 cv
66.614 629.46 li
1 /0 /CSD get_res sepcs
.11614 sep
f
534.337 689.547 mo
66.614 689.547 li
66.019 689.547 65.5368 689.065 65.5368 688.47 cv
65.5368 630.537 li
65.5368 629.942 66.019 629.46 66.614 629.46 cv
534.337 629.46 li
534.932 629.46 535.414 629.942 535.414 630.537 cv
535.414 688.47 li
535.414 689.065 534.932 689.547 534.337 689.547 cv
66.614 629.8 mo
66.207 629.8 65.877 630.13 65.877 630.537 cv
65.877 688.47 li
65.877 688.878 66.207 689.207 66.614 689.207 cv
534.337 689.207 li
534.744 689.207 535.074 688.878 535.074 688.47 cv
535.074 630.537 li
535.074 630.13 534.744 629.8 534.337 629.8 cv
66.614 629.8 li
1 /0 /CSD get_res sepcs
.159446 sep
f
534.337 689.207 mo
66.614 689.207 li
66.207 689.207 65.877 688.878 65.877 688.47 cv
65.877 630.537 li
65.877 630.13 66.207 629.8 66.614 629.8 cv
534.337 629.8 li
534.744 629.8 535.074 630.13 535.074 630.537 cv
535.074 688.47 li
535.074 688.878 534.744 689.207 534.337 689.207 cv
66.614 630.14 mo
66.3947 630.14 66.2171 630.318 66.2171 630.537 cv
66.2171 688.47 li
66.2171 688.69 66.3947 688.867 66.614 688.867 cv
534.337 688.867 li
534.556 688.867 534.734 688.69 534.734 688.47 cv
534.734 630.537 li
534.734 630.318 534.556 630.14 534.337 630.14 cv
66.614 630.14 li
1 /0 /CSD get_res sepcs
.183068 sep
f
534.337 688.867 mo
66.614 688.867 li
66.3947 688.867 66.2171 688.69 66.2171 688.47 cv
66.2171 630.537 li
66.2171 630.318 66.3947 630.14 66.614 630.14 cv
534.337 630.14 li
534.556 630.14 534.734 630.318 534.734 630.537 cv
534.734 688.47 li
534.734 688.69 534.556 688.867 534.337 688.867 cv
66.614 630.48 mo
66.5571 630.537 li
66.5571 688.47 li
66.614 688.527 li
534.337 688.527 li
534.394 688.47 li
534.394 630.537 li
534.337 630.48 li
66.614 630.48 li
1 /0 /CSD get_res sepcs
.194879 sep
f
534.337 688.527 mo
66.614 688.527 li
66.5571 688.47 li
66.5571 630.537 li
66.614 630.48 li
534.337 630.48 li
534.394 630.537 li
534.394 688.47 li
534.337 688.527 li
66.8974 630.821 mo
66.8974 688.187 li
534.053 688.187 li
534.053 630.821 li
66.8974 630.821 li
1 /0 /CSD get_res sepcs
.200784 sep
f
534.053 688.187 mo
66.8974 688.187 li
66.8974 630.821 li
534.053 630.821 li
534.053 688.187 li
1 /0 /CSD get_res sepcs
.204721 sep
f
62.362 687.053 mo
62.362 626.285 li
532.919 626.285 li
532.919 687.053 li
cp
.81 .62 0 .22 cmyk
f
64.3545 687.053 mo
64.3545 626.285 li
532.919 626.285 li
532.919 687.053 li
cp
.0567 .0434 0 .0154 cmyk
f
.81 .62 0 .22 cmyk
DUPILX+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.859 637.875 mo
(E\)\202\216\200\206\200\206 ")
[6.73477 4.78201 5.75841 6.41589 6.23666 3.09841 6.23666 3.09841 9.95267 0 ]xsh
DUPIMB+Montserrat-Bold*1 [9.9626 0 0 -9.9626 0 0 ]msf
132.146 637.875 mo
(.)sh
1 /1 /CSD get_res sepcs
1 sep
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
137.366 637.875 mo
(Calcular)
[7.08334 5.8779 2.67992 5.60898 6.70488 2.6799 5.8779 0 ]xsh
%ADOBeginSubsetFont: EBAAAA+EUEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /EBAAAA+EUEX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUEX10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /integraldisplay put
def
/FontBBox {-24 -2959 1361 771} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 693 706] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 54] def
/StemSnapV [40 75] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/integraldisplay <1C60D8A8C9B77FE2C6556E298B8DBB80E5962171C742C5
677A3ED940502059AF1235E3E74B4B976BB8385C53A087314A7A75B913E02D23
CAA915987FB4A3B286801D060FFE1AB187A0AEEDE1E49635D6C9E99FBA931CB5
93C964578E4D2B224932DD8256B4D39C95FB885C584B08650D1733ACC2FE27DC
C7CD43EAA1D604958D191883BCD7EDE36A378F3D7C622496B2100767D6E6EDE6
C477D9D303E1684D20A5194E89E3603292C1D38514449A7E312FC9EEC706EE32
0B88620DB11958505BE4F5782337DD5342E053652E66260027C78B9AB8B7C8EC
319510D977> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMI+EUEX10 /EBAAAA+EUEX10 findfont ct_VMDictPut
/DUPIMI+EUEX10*1 
[90{/.notdef}rp /integraldisplay 165{/.notdef}rp]
DUPIMI+EUEX10 nf
DUPIMI+EUEX10*1 [10.7397 0 0 -10.7397 0 0 ]msf
257.711 638.961 mo
(ZZ)
[5.36337 0 ]xsh
%ADOBeginSubsetFont: FBAAAA+EURM7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FBAAAA+EURM7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EURM7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
def
/FontBBox {-5 -243 1229 720} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [69] def
/StdVW [88] def
/StemSnapH [69 83] def
/StemSnapV [88 97] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/D <1C60D8A8C9B5EBDD515C7E740957ABD0EAC54C275A55D693914B04178F10
B6E311B7DAAF15A7151B14C8B49C446E4E5B9F33DED8A9B7C3A9942869A325A1
5CD64D7D7D633B1D3E08899B05E80E1B1A2FD45B05D1EAB1C24E835FDB6FD6FD
E4FECDBAE113E7EEEBEE4ADC0E89C389F41F24B09B34A96655A5FD3F471E36BC
A0AFB45387915E26F15D9EB59A0BA066A6C23AC3934519B980714C0C3D61> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMJ+EURM7 /FBAAAA+EURM7 findfont ct_VMDictPut
/DUPIMJ+EURM7*1 
[68{/.notdef}rp /D 187{/.notdef}rp]
DUPIMJ+EURM7 nf
DUPIMJ+EURM7*1 [6.9738 0 0 -6.9738 0 0 ]msf
267.844 663.174 mo
(D)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
277.084 653.653 mo
(x)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
282.734 649.218 mo
(\177)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
290.5 653.653 mo
(+)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
301.006 653.653 mo
(y)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
307.385 649.218 mo
(\177)sh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7DF55178929CB48BB8E199C75B7E024DD476FD28997D199C5
155A51760D295E877FFC0926FAD859A8536B87A2207791DA50166DA2194A4C10
8CAC0305651F8E18D561330E443A8AF6487DFEAC802DA8A7E5BFFB1FDB3A37D8
551FD0E48379DC440F7FE5F94DA9C04F6F4293DD3F919755BFAC9C024E2639EA
DB5E786480FC7C0CD41F58FEC872CFE0B963C0E77A9F81849520> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 61{/.notdef}rp /P 19{/.notdef}rp /d 13{/.notdef}rp /r 
5{/.notdef}rp /x /y 134{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
314.555 653.653 mo
(dxdy)
[6.48569 5.65005 6.48569 0 ]xsh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
72.859 680.116 mo
(donde)sh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6B1AB412D177DE5E705B388E263E30DA43302DEDEDAD50605
E4B8A858DE19EA0CAED853EE25C9C1BF6F096BAF32467D8B83388CD6018BC4F6
D8F4411A1B536E0CB8D78B9B547F09194102C2C80F0971A03D8726A7A5BAFB22
8840C5501E1B5A5621FA4B6A6FF70F0162A66B35B830BB4109C7C6DA3989A3EA
E4D3809211E4108ACE92C9258DB4E5ABFDAF39> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 49{/.notdef}rp /D 11{/.notdef}rp /P 19{/.notdef}rp /d 
13{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
107.987 680.116 mo
(D)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
119.862 680.116 mo
(=)sh
%ADOBeginSubsetFont: GBAAAA+EUSM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GBAAAA+EUSM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUSM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /braceleft put
def
/FontBBox {-8 -192 963 738} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 682 703] def
/OtherBlues [-132 -129] def
/BlueScale 0.0437899 def
/StdHW [34] def
/StdVW [70] def
/StemSnapH [34 43] def
/StemSnapV [70 80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/braceleft <1C60D8A8C9B82A0D8A60C8FA7705BB66CEEA4B5D06CFD40A85A0
7A7E54CF31EA4277A3426B3A5D882D50AD716E1674C7B6BA3B5399ECC3E84486
75110F5DC94D5A73460FC21D0B227EE7702288A02CDA8B53733749D2D414AF29
B6482F93EF74275DDA9FA2D976B5D14602776630DD7815BACB5F4A44361F4E62> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIMK+EUSM10 /GBAAAA+EUSM10 findfont ct_VMDictPut
/DUPIMK+EUSM10*1 
[102{/.notdef}rp /braceleft 153{/.notdef}rp]
DUPIMK+EUSM10 nf
DUPIMK+EUSM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
130.965 680.116 mo
(f)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
134.402 680.116 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
138.579 680.116 mo
(x)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
144.228 680.116 mo
(,)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
148.295 680.116 mo
(y)sh
DUPILY+CMSY10*1 [10.7397 0 0 -10.7397 0 0 ]msf
157.658 680.116 mo
(2)sh
DUPIMD+MSBM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
167.804 680.116 mo
(R)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
175.561 676.218 mo
(\177)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
183.924 680.116 mo
(:)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
189.227 680.116 mo
(x)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
194.876 676.218 mo
(\177)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
202.642 680.116 mo
(+)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
213.148 680.116 mo
(y)sh
DUPIME+Montserrat-Regular*1 [6.9738 0 0 -6.9738 0 0 ]msf
219.527 676.218 mo
(\177)sh
%ADOBeginSubsetFont: HBAAAA+MSAM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HBAAAA+MSAM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSAM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 54 /lessorequalslant put
def
/FontBBox {8 -463 1331 1003} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 529 539 680 696] def
/OtherBlues [-206 -194] def
/BlueScale 0.0437899 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [25 40] def
/StemSnapV [25 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/lessorequalslant <1C60D8A8C9B6FC2D944F492429C423E2E9663627C73D8
5B6ACB824DCA53B9189984906D2215A256F3825EB76B477E05F2E33190B0B354
64B3377C713E355702CECF3285114823880C5B3399897D3C4C2BBB90DB6D4920
5329DEC7B257753D01841A859906DE515C1EED9E10364B9C109C8A34564A88B5
139B333230E1165755AA38C0F0C6C4FA1BEA5990A3CF7BE5F> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DUPIML+MSAM10 /HBAAAA+MSAM10 findfont ct_VMDictPut
/DUPIML+MSAM10*1 
[54{/.notdef}rp /lessorequalslant 201{/.notdef}rp]
DUPIML+MSAM10 nf
DUPIML+MSAM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
227.89 680.116 mo
(6)sh
%ADOBeginSubsetFont: TAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIME+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four.tf <1C60D8A8C9B6317D209090F22B572007E4B5E21EF92CCA5A071180
BC09737DAAD3C13B9A7ED0A0E82BEBACC36C1E96DC3477FC76757610E6F7D567
2BBB5CEC54164EBB43A18CFA84> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIME+Montserrat-Regular /Encoding get
dup 33 /four.tf put
pop
%ADOEndSubsetFont
/DUPIME+Montserrat-Regular*1 
[32{/.notdef}rp /zero.tf /four.tf 10{/.notdef}rp /comma 52{/.notdef}rp /a /.notdef 
/c /.notdef /e 8{/.notdef}rp /n /o 3{/.notdef}rp /s 
/t 10{/.notdef}rp /two.tf 128{/.notdef}rp]
DUPIME+Montserrat-Regular nf
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
239.218 680.116 mo
(!,)
[7.51776 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+EURM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMF+EURM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B6E9C389CC346F0DA6193E58F49FD0D226F3342D5357
C79C7EC864F1B2C7C700EB671DAA399470F2910A5B56F5C1B73CCB44AC292594
0068EF84DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMF+EURM10 /Encoding get
dup 62 /greater put
pop
%ADOEndSubsetFont
/DUPIMF+EURM10*1 
[18{/.notdef}rp /theta 43{/.notdef}rp /greater 5{/.notdef}rp /D 11{/.notdef}rp /P 
19{/.notdef}rp /d 13{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
DUPIMF+EURM10 nf
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
253.413 680.116 mo
(y>)
[9.36398 0 ]xsh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
273.878 680.116 mo
( )sh
%ADOBeginSubsetFont: GBAAAA+EUSM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMK+EUSM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceright <1C60D8A8C9B82A0D8A631F8518549EE92B07A53DEADF69E1C2A
A4146C026AA6ACC95612AC5E0ACFCF250F6E047BBA0035F1A3743AFA417ADB3B
899A687D496524F0C44CFFF4D1EAFD22F9587B1CC67ACD447A942A42AE2F24BB
90D30B166AC99A83387E0D0DEDFB95F342B2B47C3898160676DAD4AB97B9C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMK+EUSM10 /Encoding get
dup 103 /braceright put
pop
%ADOEndSubsetFont
/DUPIMK+EUSM10*1 
[102{/.notdef}rp /braceleft /braceright 152{/.notdef}rp]
DUPIMK+EUSM10 nf
DUPIMK+EUSM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
281.396 680.116 mo
(g)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
284.833 680.116 mo
(.)sh
%ADOBeginSubsetFont: OAAAAA+Montserrat-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMA+Montserrat-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/oacute <1C60D8A8C9B66621CE82B94831125BE347163471D18CF0E0621BDA7
46B1EFA343E1B7DFFE7C57F1CE11FF4350607A959922412463D5770F0C645FAE
2F8F582609300D29A8E54F09176D270DADA6FE4C3DD0B76835BE1D4AFD5C8923
67A11C2B2FE4D8FB4410C054EBBA2232D8E9A37> |-
/c <1C60D8A8C9B7E89793FE683E3003ECF62D59C545E84A505192122890B6E4
BE41386DD964D5CADD63CF3F42EC2008A47CD59462BBF309926D6EC70596C3AA
C8B00967CD515581EFBF9A78002C2B175EBD529D0C21D2A12B> |-
/l <1C60D8A8C9B85FB10645229C5FFA683248D9138F2E3BD20069EBB4BAFAB6
B21F> |-
/u <1C60D8A8C9B654A489AF8583E1E4CC290181DFA9E8BA43A91A6AFA0D32E4
D7C5DAEDAA037C1CEEA268D8C64E3740F8FDEDE6E11CD21AE6D1736F6778A85D
0D9D66CB3C68FE1C9D843D05DE58F8E24FC9558F47AA4342889BE6E53D677CB0
F7D3D3844EC0BFC6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMA+Montserrat-Italic /Encoding get
dup 35 /oacute put
dup 99 /c put
dup 108 /l put
dup 117 /u put
pop
%ADOEndSubsetFont
/DUPIMA+Montserrat-Italic*1 
[32{/.notdef}rp /two.tf /zero.tf /one.tf /oacute 9{/.notdef}rp /hyphen /period 
18{/.notdef}rp /A 11{/.notdef}rp /M 5{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/m /n /o 2{/.notdef}rp /r /s /t /u 
9{/.notdef}rp /eacute 128{/.notdef}rp]
DUPIMA+Montserrat-Italic nf
DUPIMA+Montserrat-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 705.065 mo
(Soluc)sh
89.6497 705.065 mo
(i#n.)sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
112.414 705.065 mo
(Pararesolverestaintegral,tomaremoselcambiodevariableacoordenadaspolares,)
[7.00373 5.8779 3.52677 8.84676 3.86549 6.01744 4.8717 6.24654 2.67992 5.25037 6.01744 6.96387 
6.01744 4.8717 4.04489 8.84674 2.67992 6.74471 3.85558 6.01744 6.8344 3.52678 5.8779 2.6799 
5.09094 3.85559 6.24655 10.5703 5.8779 3.86551 6.01743 10.5704 6.24655 7.84055 6.01746 5.64877 
5.60898 5.8779 10.5703 6.75458 2.67993 9.21539 6.75458 8.98633 5.24039 5.8779 3.91531 2.6799 
5.8779 6.75458 2.67993 8.9863 8.85672 5.51929 6.24655 6.24652 3.86551 6.75458 6.01746 6.74469 
5.8779 6.75458 5.8779 7.84055 6.75458 6.24655 2.6799 5.87793 3.86548 6.01746 4.8717 0 
]xsh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
62.362 719.411 mo
(esdecir,elcambiodevariable)
[6.01745 7.4819 6.75458 6.01745 5.52928 2.67992 3.89539 4.72232 6.01746 5.29011 5.60898 5.87789 
10.5704 6.75458 2.6799 8.85675 6.75458 8.62766 5.2404 5.8779 3.9153 2.67992 5.8779 6.75458 
2.67992 0 ]xsh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
214.567 744.012 mo
(x)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
223.2 744.012 mo
(=)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
234.302 744.012 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
240.732 744.012 mo
(cos)
[5.94983 6.73378 0 ]xsh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
258.667 744.012 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
262.845 744.012 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
268.794 744.012 mo
(\))sh
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
292.897 744.012 mo
(y)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
318.222 744.012 mo
(y)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
327.585 744.012 mo
(=)sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
338.687 744.012 mo
(r)sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
345.117 744.012 mo
(sen)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
364.126 744.012 mo
(\()sh
DUPIMF+EURM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
368.304 744.012 mo
(\022)sh
DUPIMG+EUFM10*1 [10.7397 0 0 -10.7397 0 0 ]msf
374.254 744.012 mo
(\))sh
DUPIME+Montserrat-Regular*1 [10.7397 0 0 -10.7397 0 0 ]msf
378.431 744.012 mo
(,)sh
%ADOBeginSubsetFont: RAAAAA+Montserrat-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
systemdict begin
DUPIMC+Montserrat-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one.tf <1C60D8A8C9B6317D0B3C2AD97016DDD802AB8FB24387B31EB4FB980
DAA9EE1518ADD26D519BA40835C6C1A94EEA2742981> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DUPIMC+Montserrat-Regular /Encoding get
dup 33 /one.tf put
pop
%ADOEndSubsetFont
/DUPIMC+Montserrat-Regular*1 
[32{/.notdef}rp /oacute /one.tf 10{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp 
/C /.notdef /E /F 5{/.notdef}rp /L /.notdef /N 
/.notdef /P /Q /.notdef /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /g /.notdef /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/s /t /u /v /.notdef /x /y 134{/.notdef}rp]
DUPIMC+Montserrat-Regular nf
DUPIMC+Montserrat-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
294.151 808.098 mo
(!)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/DUPIMK+EUSM10*1 uf
/DUPIMK+EUSM10 uf
/GBAAAA+EUSM10 uf
/DUPIML+MSAM10*1 uf
/DUPIML+MSAM10 uf
/HBAAAA+MSAM10 uf
/DUPIMJ+EURM7*1 uf
/DUPIMJ+EURM7 uf
/FBAAAA+EURM7 uf
/DUPIMI+EUEX10*1 uf
/DUPIMI+EUEX10 uf
/EBAAAA+EUEX10 uf
/DUPIMB+Montserrat-Bold*1 uf
/DUPIMB+Montserrat-Bold uf
/QAAAAA+Montserrat-Bold uf
/DUPILZ+Montserrat-Regular*1 uf
/DUPILZ+Montserrat-Regular uf
/NAAAAA+Montserrat-Regular uf
/DUPILY+CMSY10*1 uf
/DUPILY+CMSY10 uf
/MAAAAA+CMSY10 uf
/DUPIMG+EUFM10*1 uf
/DUPIMG+EUFM10 uf
/VAAAAA+EUFM10 uf
/DUPIMD+MSBM10*1 uf
/DUPIMD+MSBM10 uf
/SAAAAA+MSBM10 uf
/DUPIMC+Montserrat-Regular*1 uf
/DUPIMC+Montserrat-Regular uf
/RAAAAA+Montserrat-Regular uf
/DUPIMF+EURM10*1 uf
/DUPIMF+EURM10 uf
/UAAAAA+EURM10 uf
/DUPILX+Montserrat-Bold*1 uf
/DUPILX+Montserrat-Bold uf
/LAAAAA+Montserrat-Bold uf
/DUPIME+Montserrat-Regular*1 uf
/DUPIME+Montserrat-Regular uf
/TAAAAA+Montserrat-Regular uf
/DUPIMA+Montserrat-Italic*1 uf
/DUPIMA+Montserrat-Italic uf
/OAAAAA+Montserrat-Italic uf
/DUPIMH+FontAwesome*1 uf
/DUPIMH+FontAwesome uf
/WAAAAA+FontAwesome uf
/DUPILW+PalatinoLinotype-Roman*1 uf
/DUPILW+PalatinoLinotype-Roman uf
/LBAAAA+PalatinoLinotype-Roman uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
